/**
 */
package org.openhealthtools.mdht.uml.cda.emspcr.util;

import java.util.Map;

import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.util.EObjectValidator;
import org.eclipse.mdht.uml.cda.util.CDAValidator;
import org.openhealthtools.mdht.uml.cda.emspcr.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Validator</b> for the model.
 * <!-- end-user-doc -->
 * @see org.openhealthtools.mdht.uml.cda.emspcr.EmspcrPackage
 * @generated
 */
public class EmspcrValidator extends EObjectValidator {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final EmspcrValidator INSTANCE = new EmspcrValidator();

	/**
	 * A constant for the {@link org.eclipse.emf.common.util.Diagnostic#getSource() source} of diagnostic {@link org.eclipse.emf.common.util.Diagnostic#getCode() codes} from this package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see org.eclipse.emf.common.util.Diagnostic#getSource()
	 * @see org.eclipse.emf.common.util.Diagnostic#getCode()
	 * @generated
	 */
	public static final String DIAGNOSTIC_SOURCE = "org.openhealthtools.mdht.uml.cda.emspcr";

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Template Id' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_TEMPLATE_ID = 1;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Current Medication Section Template Id' of 'EMS Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CURRENT_MEDICATION_SECTION__EMS_CURRENT_MEDICATION_SECTION_TEMPLATE_ID = 168;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Current Medication Section Code' of 'EMS Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CURRENT_MEDICATION_SECTION__EMS_CURRENT_MEDICATION_SECTION_CODE = 169;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Current Medication Section Code P' of 'EMS Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CURRENT_MEDICATION_SECTION__EMS_CURRENT_MEDICATION_SECTION_CODE_P = 170;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Current Medication Section Title' of 'EMS Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CURRENT_MEDICATION_SECTION__EMS_CURRENT_MEDICATION_SECTION_TITLE = 171;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Current Medication Section Text' of 'EMS Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CURRENT_MEDICATION_SECTION__EMS_CURRENT_MEDICATION_SECTION_TEXT = 172;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Current Medication Section Currently On Medication' of 'EMS Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CURRENT_MEDICATION_SECTION__EMS_CURRENT_MEDICATION_SECTION_CURRENTLY_ON_MEDICATION = 173;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Current Medication Section Current Medication' of 'EMS Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CURRENT_MEDICATION_SECTION__EMS_CURRENT_MEDICATION_SECTION_CURRENT_MEDICATION = 174;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Currently On Medication Template Id' of 'Currently On Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENTLY_ON_MEDICATION__CURRENTLY_ON_MEDICATION_TEMPLATE_ID = 175;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Currently On Medication Mood Code' of 'Currently On Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENTLY_ON_MEDICATION__CURRENTLY_ON_MEDICATION_MOOD_CODE = 176;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Currently On Medication Code' of 'Currently On Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENTLY_ON_MEDICATION__CURRENTLY_ON_MEDICATION_CODE = 177;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Currently On Medication Value' of 'Currently On Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENTLY_ON_MEDICATION__CURRENTLY_ON_MEDICATION_VALUE = 178;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Consumable' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_CONSUMABLE = 179;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Template Id' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_TEMPLATE_ID = 180;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Negation Ind' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_NEGATION_IND = 181;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Null Flavor' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_NULL_FLAVOR = 182;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Dose Quantity' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_DOSE_QUANTITY = 183;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Route Code P' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_ROUTE_CODE_P = 184;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Route Code' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_ROUTE_CODE = 185;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Cardiac Arrest Event Section Template Id' of 'EMS Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CARDIAC_ARREST_EVENT_SECTION__EMS_CARDIAC_ARREST_EVENT_SECTION_TEMPLATE_ID = 112;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Cardiac Arrest Event Section Code' of 'EMS Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CARDIAC_ARREST_EVENT_SECTION__EMS_CARDIAC_ARREST_EVENT_SECTION_CODE = 113;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Cardiac Arrest Event Section Code P' of 'EMS Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CARDIAC_ARREST_EVENT_SECTION__EMS_CARDIAC_ARREST_EVENT_SECTION_CODE_P = 114;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Cardiac Arrest Event Section Title' of 'EMS Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CARDIAC_ARREST_EVENT_SECTION__EMS_CARDIAC_ARREST_EVENT_SECTION_TITLE = 115;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Cardiac Arrest Event Section Text' of 'EMS Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CARDIAC_ARREST_EVENT_SECTION__EMS_CARDIAC_ARREST_EVENT_SECTION_TEXT = 116;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Cardiac Arrest Event Section Cardiac Arrest Existence' of 'EMS Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_CARDIAC_ARREST_EVENT_SECTION__EMS_CARDIAC_ARREST_EVENT_SECTION_CARDIAC_ARREST_EXISTENCE = 117;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cardiac Arrest Cause Relationship' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_CARDIAC_ARREST_CAUSE_RELATIONSHIP = 118;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cardiac Arrest Informant Participation' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_CARDIAC_ARREST_INFORMANT_PARTICIPATION = 119;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Spontaneous Circulation Relationship' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_SPONTANEOUS_CIRCULATION_RELATIONSHIP = 120;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Destination Rhythm Relationship' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_DESTINATION_RHYTHM_RELATIONSHIP = 121;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Arrest Rhythm Relationship' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_ARREST_RHYTHM_RELATIONSHIP = 122;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Template Id' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_TEMPLATE_ID = 123;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Mood Code' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_MOOD_CODE = 124;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Code' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_CODE = 125;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Negation Ind' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_NEGATION_IND = 126;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Effective Time' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_EFFECTIVE_TIME = 127;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Value' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_VALUE = 128;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cardiac Arrest Timing Relationship' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_CARDIAC_ARREST_TIMING_RELATIONSHIP = 129;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cardiac Arrest Outcome Relationship' of 'Cardiac Arrest'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST__CARDIAC_ARREST_CARDIAC_ARREST_OUTCOME_RELATIONSHIP = 130;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Advance Directives Section Template Id' of 'EMS Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ADVANCE_DIRECTIVES_SECTION__EMS_ADVANCE_DIRECTIVES_SECTION_TEMPLATE_ID = 131;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Advance Directives Section Code' of 'EMS Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ADVANCE_DIRECTIVES_SECTION__EMS_ADVANCE_DIRECTIVES_SECTION_CODE = 132;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Advance Directives Section Code P' of 'EMS Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ADVANCE_DIRECTIVES_SECTION__EMS_ADVANCE_DIRECTIVES_SECTION_CODE_P = 133;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Advance Directives Section Title' of 'EMS Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ADVANCE_DIRECTIVES_SECTION__EMS_ADVANCE_DIRECTIVES_SECTION_TITLE = 134;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Advance Directives Section Text' of 'EMS Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ADVANCE_DIRECTIVES_SECTION__EMS_ADVANCE_DIRECTIVES_SECTION_TEXT = 135;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Advance Directives Section Advanced Directive Observation' of 'EMS Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ADVANCE_DIRECTIVES_SECTION__EMS_ADVANCE_DIRECTIVES_SECTION_ADVANCED_DIRECTIVE_OBSERVATION = 136;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Template Id' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_TEMPLATE_ID = 137;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Mood Code' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_MOOD_CODE = 138;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Code' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CODE = 139;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Value' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_VALUE = 140;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Value P' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_VALUE_P = 141;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Allergies And Adverse Reactions Section Template Id' of 'EMS Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_TEMPLATE_ID = 142;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Allergies And Adverse Reactions Section Code' of 'EMS Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_CODE = 143;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Allergies And Adverse Reactions Section Code P' of 'EMS Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_CODE_P = 144;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Allergies And Adverse Reactions Section Title' of 'EMS Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_TITLE = 145;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Allergies And Adverse Reactions Section Text' of 'EMS Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_TEXT = 146;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Allergies And Adverse Reactions Section Environmental Allergies' of 'EMS Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_ENVIRONMENTAL_ALLERGIES = 147;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Allergies And Adverse Reactions Section EMS Drug Allergy Organizer' of 'EMS Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_EMS_DRUG_ALLERGY_ORGANIZER = 148;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Organizer Existence Of Non Drug Allergy' of 'Non Drug Allergy Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY_ORGANIZER__NON_DRUG_ALLERGY_ORGANIZER_EXISTENCE_OF_NON_DRUG_ALLERGY = 149;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Organizer Non Drug Allergy' of 'Non Drug Allergy Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY_ORGANIZER__NON_DRUG_ALLERGY_ORGANIZER_NON_DRUG_ALLERGY = 150;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Organizer Template Id' of 'Non Drug Allergy Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY_ORGANIZER__NON_DRUG_ALLERGY_ORGANIZER_TEMPLATE_ID = 151;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Organizer Component4' of 'Non Drug Allergy Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY_ORGANIZER__NON_DRUG_ALLERGY_ORGANIZER_COMPONENT4 = 152;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Organizer Component4' of 'Non Drug Allergy Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int NON_DRUG_ALLERGY_ORGANIZER__NON_DRUG_ALLERGY_ORGANIZER_COMPONENT4 = 96;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Organizer Component4' of 'Non Drug Allergy Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY_ORGANIZER__NON_DRUG_ALLERGY_ORGANIZER_COMPONENT4 = 153;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Known Non Drug Allergy Template Id' of 'Existence Of Known Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY__EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY_TEMPLATE_ID = 154;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Known Non Drug Allergy Mood Code' of 'Existence Of Known Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY__EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY_MOOD_CODE = 155;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Known Non Drug Allergy Code P' of 'Existence Of Known Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY__EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY_CODE_P = 156;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Known Non Drug Allergy Code' of 'Existence Of Known Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY__EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY_CODE = 157;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Known Non Drug Allergy Value' of 'Existence Of Known Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY__EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY_VALUE = 158;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Template Id' of 'Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY__NON_DRUG_ALLERGY_TEMPLATE_ID = 159;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Mood Code' of 'Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY__NON_DRUG_ALLERGY_MOOD_CODE = 160;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Code P' of 'Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY__NON_DRUG_ALLERGY_CODE_P = 161;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Code' of 'Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY__NON_DRUG_ALLERGY_CODE = 162;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Value' of 'Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY__NON_DRUG_ALLERGY_VALUE = 163;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Drug Allergy Value P' of 'Non Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_DRUG_ALLERGY__NON_DRUG_ALLERGY_VALUE_P = 164;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Allergy Organizer Template Id' of 'Drug Allergy Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_ALLERGY_ORGANIZER__DRUG_ALLERGY_ORGANIZER_TEMPLATE_ID = 165;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Allergy Organizer Component4' of 'Drug Allergy Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_ALLERGY_ORGANIZER__DRUG_ALLERGY_ORGANIZER_COMPONENT4 = 166;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Allergy Organizer Component42' of 'Drug Allergy Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_ALLERGY_ORGANIZER__DRUG_ALLERGY_ORGANIZER_COMPONENT42 = 167;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Past Medical History Section Template Id' of 'EMS Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PAST_MEDICAL_HISTORY_SECTION__EMS_PAST_MEDICAL_HISTORY_SECTION_TEMPLATE_ID = 2;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Past Medical History Section Code' of 'EMS Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PAST_MEDICAL_HISTORY_SECTION__EMS_PAST_MEDICAL_HISTORY_SECTION_CODE = 3;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Past Medical History Section Code P' of 'EMS Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PAST_MEDICAL_HISTORY_SECTION__EMS_PAST_MEDICAL_HISTORY_SECTION_CODE_P = 4;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Past Medical History Section Title' of 'EMS Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PAST_MEDICAL_HISTORY_SECTION__EMS_PAST_MEDICAL_HISTORY_SECTION_TITLE = 5;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Past Medical History Section Text' of 'EMS Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PAST_MEDICAL_HISTORY_SECTION__EMS_PAST_MEDICAL_HISTORY_SECTION_TEXT = 6;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Past Medical History Section Existence Of History Of Condition' of 'EMS Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PAST_MEDICAL_HISTORY_SECTION__EMS_PAST_MEDICAL_HISTORY_SECTION_EXISTENCE_OF_HISTORY_OF_CONDITION = 7;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Past Medical History Section History Of Condition' of 'EMS Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PAST_MEDICAL_HISTORY_SECTION__EMS_PAST_MEDICAL_HISTORY_SECTION_HISTORY_OF_CONDITION = 8;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Condition Or Surgery Template Id' of 'Existence Of History Of Condition Or Surgery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY__EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY_TEMPLATE_ID = 9;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Condition Or Surgery Mood Code' of 'Existence Of History Of Condition Or Surgery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY__EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY_MOOD_CODE = 10;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Condition Or Surgery Code P' of 'Existence Of History Of Condition Or Surgery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY__EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY_CODE_P = 11;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Condition Or Surgery Code' of 'Existence Of History Of Condition Or Surgery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY__EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY_CODE = 12;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Condition Or Surgery Value' of 'Existence Of History Of Condition Or Surgery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY__EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY_VALUE = 13;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Surgical History Template Id' of 'Medical Surgical History'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_SURGICAL_HISTORY__MEDICAL_SURGICAL_HISTORY_TEMPLATE_ID = 14;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Surgical History Mood Code' of 'Medical Surgical History'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_SURGICAL_HISTORY__MEDICAL_SURGICAL_HISTORY_MOOD_CODE = 15;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Surgical History Code P' of 'Medical Surgical History'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_SURGICAL_HISTORY__MEDICAL_SURGICAL_HISTORY_CODE_P = 16;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Surgical History Code' of 'Medical Surgical History'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_SURGICAL_HISTORY__MEDICAL_SURGICAL_HISTORY_CODE = 17;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Surgical History Value' of 'Medical Surgical History'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_SURGICAL_HISTORY__MEDICAL_SURGICAL_HISTORY_VALUE = 18;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Surgical History Value P' of 'Medical Surgical History'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_SURGICAL_HISTORY__MEDICAL_SURGICAL_HISTORY_VALUE_P = 19;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Surgical History Negation Ind' of 'Medical Surgical History'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_SURGICAL_HISTORY__MEDICAL_SURGICAL_HISTORY_NEGATION_IND = 20;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Social History Section Template Id' of 'EMS Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SOCIAL_HISTORY_SECTION__EMS_SOCIAL_HISTORY_SECTION_TEMPLATE_ID = 186;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Social History Section Code' of 'EMS Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SOCIAL_HISTORY_SECTION__EMS_SOCIAL_HISTORY_SECTION_CODE = 187;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Social History Section Code P' of 'EMS Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SOCIAL_HISTORY_SECTION__EMS_SOCIAL_HISTORY_SECTION_CODE_P = 188;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Social History Section Title' of 'EMS Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SOCIAL_HISTORY_SECTION__EMS_SOCIAL_HISTORY_SECTION_TITLE = 189;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Social History Section Text' of 'EMS Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SOCIAL_HISTORY_SECTION__EMS_SOCIAL_HISTORY_SECTION_TEXT = 190;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Social History Section Existence Of Drug Use Indication' of 'EMS Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SOCIAL_HISTORY_SECTION__EMS_SOCIAL_HISTORY_SECTION_EXISTENCE_OF_DRUG_USE_INDICATION = 191;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Social History Section Drug Use Indication' of 'EMS Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SOCIAL_HISTORY_SECTION__EMS_SOCIAL_HISTORY_SECTION_DRUG_USE_INDICATION = 192;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Use Indication Template Id' of 'Existence Of Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_USE_INDICATION__EXISTENCE_OF_DRUG_USE_INDICATION_TEMPLATE_ID = 193;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Use Indication Mood Code' of 'Existence Of Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_USE_INDICATION__EXISTENCE_OF_DRUG_USE_INDICATION_MOOD_CODE = 194;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Use Indication Code P' of 'Existence Of Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_USE_INDICATION__EXISTENCE_OF_DRUG_USE_INDICATION_CODE_P = 195;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Use Indication Code' of 'Existence Of Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_USE_INDICATION__EXISTENCE_OF_DRUG_USE_INDICATION_CODE = 196;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Use Indication Value' of 'Existence Of Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_USE_INDICATION__EXISTENCE_OF_DRUG_USE_INDICATION_VALUE = 197;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Use Indication Template Id' of 'Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_USE_INDICATION__DRUG_USE_INDICATION_TEMPLATE_ID = 198;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Use Indication Mood Code' of 'Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_USE_INDICATION__DRUG_USE_INDICATION_MOOD_CODE = 199;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Use Indication Code' of 'Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_USE_INDICATION__DRUG_USE_INDICATION_CODE = 200;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Use Indication Value' of 'Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_USE_INDICATION__DRUG_USE_INDICATION_VALUE = 201;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Use Indication Value P' of 'Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_USE_INDICATION__DRUG_USE_INDICATION_VALUE_P = 202;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Template Id' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_TEMPLATE_ID = 220;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Code' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_CODE = 221;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Code P' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_CODE_P = 222;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Title' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_TITLE = 223;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Text' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_TEXT = 224;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Physical Assessment Organizer' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_PHYSICAL_ASSESSMENT_ORGANIZER = 225;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Patient Pregnancy' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_PATIENT_PREGNANCY = 226;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Last Oral Intake' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_LAST_ORAL_INTAKE = 227;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Patient Age' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_PATIENT_AGE = 228;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Thrombolytic Contraindications' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_THROMBOLYTIC_CONTRAINDICATIONS = 229;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Barriers To Patient Care' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_BARRIERS_TO_PATIENT_CARE = 230;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Body Weight' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_BODY_WEIGHT = 231;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Physical Assessment Section Length Based Body Weight' of 'EMS Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PHYSICAL_ASSESSMENT_SECTION__EMS_PHYSICAL_ASSESSMENT_SECTION_LENGTH_BASED_BODY_WEIGHT = 232;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component3' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT3 = 233;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component4' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT4 = 234;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component4' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT4 = 162;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component5' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT5 = 235;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component6' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT6 = 236;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component8' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT8 = 237;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component9' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT9 = 238;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component10' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT10 = 239;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component11' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT11 = 240;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component12' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT12 = 241;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component13' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT13 = 242;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component14' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT14 = 243;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Template Id' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_TEMPLATE_ID = 244;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component15' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT15 = 245;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component42' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT42 = 246;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component4' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT4 = 247;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Template Id' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_TEMPLATE_ID = 248;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Mood Code' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_MOOD_CODE = 249;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Code P' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_CODE_P = 250;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Code' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_CODE = 251;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Value' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_VALUE = 252;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Value P' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_VALUE_P = 253;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Last Oral Intake Template Id' of 'Last Oral Intake'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LAST_ORAL_INTAKE__LAST_ORAL_INTAKE_TEMPLATE_ID = 254;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Last Oral Intake Mood Code' of 'Last Oral Intake'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LAST_ORAL_INTAKE__LAST_ORAL_INTAKE_MOOD_CODE = 255;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Last Oral Intake Code P' of 'Last Oral Intake'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LAST_ORAL_INTAKE__LAST_ORAL_INTAKE_CODE_P = 256;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Last Oral Intake Code' of 'Last Oral Intake'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LAST_ORAL_INTAKE__LAST_ORAL_INTAKE_CODE = 257;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Last Oral Intake Value' of 'Last Oral Intake'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LAST_ORAL_INTAKE__LAST_ORAL_INTAKE_VALUE = 258;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Age Template Id' of 'Patient Age'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_AGE__PATIENT_AGE_TEMPLATE_ID = 259;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Age Mood Code' of 'Patient Age'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_AGE__PATIENT_AGE_MOOD_CODE = 260;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Age Code P' of 'Patient Age'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_AGE__PATIENT_AGE_CODE_P = 261;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Age Code' of 'Patient Age'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_AGE__PATIENT_AGE_CODE = 262;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Age Value' of 'Patient Age'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_AGE__PATIENT_AGE_VALUE = 263;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Template Id' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_TEMPLATE_ID = 264;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Mood Code' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_MOOD_CODE = 265;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Code P' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_CODE_P = 266;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Code' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_CODE = 267;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Value' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_VALUE = 268;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Value P' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_VALUE_P = 269;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Template Id' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_TEMPLATE_ID = 270;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Mood Code' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_MOOD_CODE = 271;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Code P' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_CODE_P = 272;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Code' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_CODE = 273;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Value' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_VALUE = 274;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Value P' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_VALUE_P = 275;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Medications Administered Section Template Id' of 'EMS Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_MEDICATIONS_ADMINISTERED_SECTION__EMS_MEDICATIONS_ADMINISTERED_SECTION_TEMPLATE_ID = 276;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Medications Administered Section Code' of 'EMS Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_MEDICATIONS_ADMINISTERED_SECTION__EMS_MEDICATIONS_ADMINISTERED_SECTION_CODE = 277;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Medications Administered Section Code P' of 'EMS Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_MEDICATIONS_ADMINISTERED_SECTION__EMS_MEDICATIONS_ADMINISTERED_SECTION_CODE_P = 278;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Medications Administered Section Title' of 'EMS Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_MEDICATIONS_ADMINISTERED_SECTION__EMS_MEDICATIONS_ADMINISTERED_SECTION_TITLE = 279;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Medications Administered Section Text' of 'EMS Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_MEDICATIONS_ADMINISTERED_SECTION__EMS_MEDICATIONS_ADMINISTERED_SECTION_TEXT = 280;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Medications Administered Section Medication Administered' of 'EMS Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_MEDICATIONS_ADMINISTERED_SECTION__EMS_MEDICATIONS_ADMINISTERED_SECTION_MEDICATION_ADMINISTERED = 281;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Not Administered Entry Relationship' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_NOT_ADMINISTERED_ENTRY_RELATIONSHIP = 282;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Consumable' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_CONSUMABLE = 283;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Administered Response Relationship' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_ADMINISTERED_RESPONSE_RELATIONSHIP = 284;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Complication Relationship' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_COMPLICATION_RELATIONSHIP = 285;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Prior Administration Relationship' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_PRIOR_ADMINISTRATION_RELATIONSHIP = 286;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Performer Participation' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_PERFORMER_PARTICIPATION = 287;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Authorization Relationship' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_AUTHORIZATION_RELATIONSHIP = 288;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Administration Device Participant' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_ADMINISTRATION_DEVICE_PARTICIPANT = 289;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Template Id' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_TEMPLATE_ID = 290;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Class Code' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_CLASS_CODE = 291;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Negation Ind' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_NEGATION_IND = 292;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Effective Time' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_EFFECTIVE_TIME = 293;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Route Code P' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_ROUTE_CODE_P = 294;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Route Code' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_ROUTE_CODE = 295;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Dose Quantity' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_DOSE_QUANTITY = 296;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Rate Quantity' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_RATE_QUANTITY = 297;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Approach Site Code P' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_APPROACH_SITE_CODE_P = 298;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Approach Site Code' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_APPROACH_SITE_CODE = 299;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Procedures Performed Section Template Id' of 'EMS Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROCEDURES_PERFORMED_SECTION__EMS_PROCEDURES_PERFORMED_SECTION_TEMPLATE_ID = 300;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Procedures Performed Section Code' of 'EMS Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROCEDURES_PERFORMED_SECTION__EMS_PROCEDURES_PERFORMED_SECTION_CODE = 301;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Procedures Performed Section Code P' of 'EMS Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROCEDURES_PERFORMED_SECTION__EMS_PROCEDURES_PERFORMED_SECTION_CODE_P = 302;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Procedures Performed Section Title' of 'EMS Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROCEDURES_PERFORMED_SECTION__EMS_PROCEDURES_PERFORMED_SECTION_TITLE = 303;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Procedures Performed Section Text' of 'EMS Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROCEDURES_PERFORMED_SECTION__EMS_PROCEDURES_PERFORMED_SECTION_TEXT = 304;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Procedures Performed Section Procedure Activity Procedure1' of 'EMS Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROCEDURES_PERFORMED_SECTION__EMS_PROCEDURES_PERFORMED_SECTION_PROCEDURE_ACTIVITY_PROCEDURE1 = 305;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Abandoned Procedure Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_ABANDONED_PROCEDURE_RELATIONSHIP = 306;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_PRIOR_RELATIONSHIP = 307;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_NUMBER_OF_ATTEMPTS_RELATIONSHIP = 308;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_SUCCESSFUL_RELATIONSHIP = 309;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_COMPLICATIONS_RELATIONSHIP = 310;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_PATIENT_RESPONSE_RELATIONSHIP = 311;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Performer' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_PERFORMER = 312;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Airway Confirmation Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_AIRWAY_CONFIRMATION_RELATIONSHIP = 313;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Reason Procedure Not Attempted Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_REASON_PROCEDURE_NOT_ATTEMPTED_RELATIONSHIP = 314;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Template Id' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_TEMPLATE_ID = 315;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Code' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_CODE = 316;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Code P' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_CODE_P = 317;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Negation Ind' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_NEGATION_IND = 318;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Status Code' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_STATUS_CODE = 319;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Effective Time' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_EFFECTIVE_TIME = 320;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Approach Site Code' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_APPROACH_SITE_CODE = 321;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Approach Site Code P' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_APPROACH_SITE_CODE_P = 322;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Device Participation' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_DEVICE_PARTICIPATION = 323;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Patient Care Narrative Section Template Id' of 'EMS Patient Care Narrative Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PATIENT_CARE_NARRATIVE_SECTION__EMS_PATIENT_CARE_NARRATIVE_SECTION_TEMPLATE_ID = 324;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Patient Care Narrative Section Code' of 'EMS Patient Care Narrative Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PATIENT_CARE_NARRATIVE_SECTION__EMS_PATIENT_CARE_NARRATIVE_SECTION_CODE = 325;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Patient Care Narrative Section Code P' of 'EMS Patient Care Narrative Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PATIENT_CARE_NARRATIVE_SECTION__EMS_PATIENT_CARE_NARRATIVE_SECTION_CODE_P = 326;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Patient Care Narrative Section Title' of 'EMS Patient Care Narrative Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PATIENT_CARE_NARRATIVE_SECTION__EMS_PATIENT_CARE_NARRATIVE_SECTION_TITLE = 327;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Patient Care Narrative Section Text' of 'EMS Patient Care Narrative Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PATIENT_CARE_NARRATIVE_SECTION__EMS_PATIENT_CARE_NARRATIVE_SECTION_TEXT = 328;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Scene Section Template Id' of 'EMS Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SCENE_SECTION__EMS_SCENE_SECTION_TEMPLATE_ID = 510;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Scene Section Code' of 'EMS Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SCENE_SECTION__EMS_SCENE_SECTION_CODE = 511;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Scene Section Code P' of 'EMS Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SCENE_SECTION__EMS_SCENE_SECTION_CODE_P = 512;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Scene Section Title' of 'EMS Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SCENE_SECTION__EMS_SCENE_SECTION_TITLE = 513;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Scene Section Text' of 'EMS Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SCENE_SECTION__EMS_SCENE_SECTION_TEXT = 514;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Scene Section First Unit Indicator' of 'EMS Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SCENE_SECTION__EMS_SCENE_SECTION_FIRST_UNIT_INDICATOR = 515;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Scene Section Scene Patient Count' of 'EMS Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SCENE_SECTION__EMS_SCENE_SECTION_SCENE_PATIENT_COUNT = 516;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Scene Section Mass Casualty Indicator' of 'EMS Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SCENE_SECTION__EMS_SCENE_SECTION_MASS_CASUALTY_INDICATOR = 517;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Scene Section Location Type Observation' of 'EMS Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SCENE_SECTION__EMS_SCENE_SECTION_LOCATION_TYPE_OBSERVATION = 518;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit Indicator Template Id' of 'First Unit Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_INDICATOR__FIRST_UNIT_INDICATOR_TEMPLATE_ID = 519;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit Indicator Mood Code' of 'First Unit Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_INDICATOR__FIRST_UNIT_INDICATOR_MOOD_CODE = 520;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit Indicator Code P' of 'First Unit Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_INDICATOR__FIRST_UNIT_INDICATOR_CODE_P = 521;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit Indicator Code' of 'First Unit Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_INDICATOR__FIRST_UNIT_INDICATOR_CODE = 522;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit Indicator Value' of 'First Unit Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_INDICATOR__FIRST_UNIT_INDICATOR_VALUE = 523;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Patient Count Template Id' of 'Scene Patient Count'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_PATIENT_COUNT__SCENE_PATIENT_COUNT_TEMPLATE_ID = 524;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Patient Count Mood Code' of 'Scene Patient Count'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_PATIENT_COUNT__SCENE_PATIENT_COUNT_MOOD_CODE = 525;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Patient Count Code P' of 'Scene Patient Count'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_PATIENT_COUNT__SCENE_PATIENT_COUNT_CODE_P = 526;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Patient Count Code' of 'Scene Patient Count'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_PATIENT_COUNT__SCENE_PATIENT_COUNT_CODE = 527;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Patient Count Value' of 'Scene Patient Count'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_PATIENT_COUNT__SCENE_PATIENT_COUNT_VALUE = 528;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mass Casualty Indicator Template Id' of 'Mass Casualty Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MASS_CASUALTY_INDICATOR__MASS_CASUALTY_INDICATOR_TEMPLATE_ID = 529;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mass Casualty Indicator Mood Code' of 'Mass Casualty Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MASS_CASUALTY_INDICATOR__MASS_CASUALTY_INDICATOR_MOOD_CODE = 530;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mass Casualty Indicator Code P' of 'Mass Casualty Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MASS_CASUALTY_INDICATOR__MASS_CASUALTY_INDICATOR_CODE_P = 531;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mass Casualty Indicator Code' of 'Mass Casualty Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MASS_CASUALTY_INDICATOR__MASS_CASUALTY_INDICATOR_CODE = 532;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mass Casualty Indicator Value' of 'Mass Casualty Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MASS_CASUALTY_INDICATOR__MASS_CASUALTY_INDICATOR_VALUE = 533;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Location Type Observation Template Id' of 'Location Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION_TYPE_OBSERVATION__LOCATION_TYPE_OBSERVATION_TEMPLATE_ID = 534;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Location Type Observation Code P' of 'Location Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION_TYPE_OBSERVATION__LOCATION_TYPE_OBSERVATION_CODE_P = 535;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Location Type Observation Code' of 'Location Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION_TYPE_OBSERVATION__LOCATION_TYPE_OBSERVATION_CODE = 536;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Location Type Observation Value' of 'Location Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION_TYPE_OBSERVATION__LOCATION_TYPE_OBSERVATION_VALUE = 537;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Location Type Observation Value P' of 'Location Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION_TYPE_OBSERVATION__LOCATION_TYPE_OBSERVATION_VALUE_P = 538;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Dispatch Section Template Id' of 'EMS Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPATCH_SECTION__EMS_DISPATCH_SECTION_TEMPLATE_ID = 329;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Dispatch Section Code' of 'EMS Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPATCH_SECTION__EMS_DISPATCH_SECTION_CODE = 330;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Dispatch Section Code P' of 'EMS Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPATCH_SECTION__EMS_DISPATCH_SECTION_CODE_P = 331;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Dispatch Section Title' of 'EMS Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPATCH_SECTION__EMS_DISPATCH_SECTION_TITLE = 332;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Dispatch Section Text' of 'EMS Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPATCH_SECTION__EMS_DISPATCH_SECTION_TEXT = 333;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Dispatch Section Emergency Medical Dispatch Observation' of 'EMS Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPATCH_SECTION__EMS_DISPATCH_SECTION_EMERGENCY_MEDICAL_DISPATCH_OBSERVATION = 334;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Dispatch Section Complaint Reported By Dispatch' of 'EMS Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPATCH_SECTION__EMS_DISPATCH_SECTION_COMPLAINT_REPORTED_BY_DISPATCH = 335;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Template Id' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_TEMPLATE_ID = 336;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Mood Code' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_MOOD_CODE = 337;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Code P' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_CODE_P = 338;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Code' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_CODE = 339;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Value' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_VALUE = 340;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Value P' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_VALUE_P = 341;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Reason Template Id' of 'Dispatch Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_REASON__DISPATCH_REASON_TEMPLATE_ID = 342;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Reason Mood Code' of 'Dispatch Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_REASON__DISPATCH_REASON_MOOD_CODE = 343;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Reason Code P' of 'Dispatch Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_REASON__DISPATCH_REASON_CODE_P = 344;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Reason Code' of 'Dispatch Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_REASON__DISPATCH_REASON_CODE = 345;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Reason Value' of 'Dispatch Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_REASON__DISPATCH_REASON_VALUE = 346;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Reason Value P' of 'Dispatch Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_REASON__DISPATCH_REASON_VALUE_P = 347;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Template Id' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_TEMPLATE_ID = 386;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Code' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_CODE = 387;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Code P' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_CODE_P = 388;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Title' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_TITLE = 389;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Text' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_TEXT = 390;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Number Of Patients Observation' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_NUMBER_OF_PATIENTS_OBSERVATION = 391;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Transport Mode Observation' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_TRANSPORT_MODE_OBSERVATION = 392;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Transport Method Observation' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_TRANSPORT_METHOD_OBSERVATION = 393;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Reason For Choosing Destination Observation' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_REASON_FOR_CHOOSING_DESTINATION_OBSERVATION = 394;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Prearrival Activation Observation' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_PREARRIVAL_ACTIVATION_OBSERVATION = 395;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Patient Condition Change At Destination Observation' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION = 396;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Primary Destination Hospital Capability' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_PRIMARY_DESTINATION_HOSPITAL_CAPABILITY = 397;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Destination Ward' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_DESTINATION_WARD = 398;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Unit Disposition' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_UNIT_DISPOSITION = 399;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Patient Engagement' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_PATIENT_ENGAGEMENT = 400;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Crew Disposition' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_CREW_DISPOSITION = 401;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Disposition Section Transport Disposition' of 'EMS Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_DISPOSITION_SECTION__EMS_DISPOSITION_SECTION_TRANSPORT_DISPOSITION = 402;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Number Of Patients Transported Observation Template Id' of 'Number Of Patients Transported Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION__NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION_TEMPLATE_ID = 403;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Number Of Patients Transported Observation Mood Code' of 'Number Of Patients Transported Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION__NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION_MOOD_CODE = 404;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Number Of Patients Transported Observation Code P' of 'Number Of Patients Transported Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION__NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION_CODE_P = 405;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Number Of Patients Transported Observation Code' of 'Number Of Patients Transported Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION__NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION_CODE = 406;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Number Of Patients Transported Observation Value' of 'Number Of Patients Transported Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION__NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION_VALUE = 407;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Template Id' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_TEMPLATE_ID = 408;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Mood Code' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_MOOD_CODE = 409;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Code P' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_CODE_P = 410;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Code' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_CODE = 411;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Value' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_VALUE = 412;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Value P' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_VALUE_P = 413;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Transport Mode Qualifier Relationship' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_TRANSPORT_MODE_QUALIFIER_RELATIONSHIP = 414;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Template Id' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_TEMPLATE_ID = 415;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Mood Code' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_MOOD_CODE = 416;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Code P' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_CODE_P = 417;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Code' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_CODE = 418;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Value' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_VALUE = 419;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Value P' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_VALUE_P = 420;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Template Id' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_TEMPLATE_ID = 421;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Mood Code' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_MOOD_CODE = 422;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Code P' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_CODE_P = 423;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Code' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_CODE = 424;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Value' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_VALUE = 425;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Value P' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_VALUE_P = 426;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Template Id' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_TEMPLATE_ID = 427;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Mood Code' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_MOOD_CODE = 428;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Code P' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_CODE_P = 429;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Code' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_CODE = 430;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Effective Time' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_EFFECTIVE_TIME = 431;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Value' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_VALUE = 432;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Value P' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_VALUE_P = 433;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition At Destination Observation Template Id' of 'Patient Condition At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_AT_DESTINATION_OBSERVATION_TEMPLATE_ID = 434;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition At Destination Observation Mood Code' of 'Patient Condition At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_AT_DESTINATION_OBSERVATION_MOOD_CODE = 435;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition At Destination Observation Code P' of 'Patient Condition At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_AT_DESTINATION_OBSERVATION_CODE_P = 436;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition At Destination Observation Code' of 'Patient Condition At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_AT_DESTINATION_OBSERVATION_CODE = 437;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition At Destination Observation Value' of 'Patient Condition At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_AT_DESTINATION_OBSERVATION_VALUE = 438;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition At Destination Observation Value P' of 'Patient Condition At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_AT_DESTINATION_OBSERVATION_VALUE_P = 439;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Hospital Capability Template Id' of 'Destination Hospital Capability'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_HOSPITAL_CAPABILITY__DESTINATION_HOSPITAL_CAPABILITY_TEMPLATE_ID = 440;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Hospital Capability Class Code' of 'Destination Hospital Capability'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_HOSPITAL_CAPABILITY__DESTINATION_HOSPITAL_CAPABILITY_CLASS_CODE = 441;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Hospital Capability Code P' of 'Destination Hospital Capability'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_HOSPITAL_CAPABILITY__DESTINATION_HOSPITAL_CAPABILITY_CODE_P = 442;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Hospital Capability Code' of 'Destination Hospital Capability'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_HOSPITAL_CAPABILITY__DESTINATION_HOSPITAL_CAPABILITY_CODE = 443;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Hospital Capability Mood Code' of 'Destination Hospital Capability'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_HOSPITAL_CAPABILITY__DESTINATION_HOSPITAL_CAPABILITY_MOOD_CODE = 444;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Hospital Capability Value' of 'Destination Hospital Capability'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_HOSPITAL_CAPABILITY__DESTINATION_HOSPITAL_CAPABILITY_VALUE = 445;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Hospital Capability Value P' of 'Destination Hospital Capability'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_HOSPITAL_CAPABILITY__DESTINATION_HOSPITAL_CAPABILITY_VALUE_P = 446;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Ward Template Id' of 'Destination Ward'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_WARD__DESTINATION_WARD_TEMPLATE_ID = 447;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Ward Class Code' of 'Destination Ward'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_WARD__DESTINATION_WARD_CLASS_CODE = 448;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Ward Code P' of 'Destination Ward'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_WARD__DESTINATION_WARD_CODE_P = 449;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Ward Code' of 'Destination Ward'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_WARD__DESTINATION_WARD_CODE = 450;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Ward Mood Code' of 'Destination Ward'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_WARD__DESTINATION_WARD_MOOD_CODE = 451;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Ward Value' of 'Destination Ward'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_WARD__DESTINATION_WARD_VALUE = 452;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Ward Value P' of 'Destination Ward'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_WARD__DESTINATION_WARD_VALUE_P = 453;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Disposition Template Id' of 'Unit Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_DISPOSITION__UNIT_DISPOSITION_TEMPLATE_ID = 454;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Disposition Code P' of 'Unit Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_DISPOSITION__UNIT_DISPOSITION_CODE_P = 455;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Disposition Code' of 'Unit Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_DISPOSITION__UNIT_DISPOSITION_CODE = 456;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Disposition Value' of 'Unit Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_DISPOSITION__UNIT_DISPOSITION_VALUE = 457;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Disposition Value P' of 'Unit Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_DISPOSITION__UNIT_DISPOSITION_VALUE_P = 458;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Engagement Template Id' of 'Patient Engagement'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ENGAGEMENT__PATIENT_ENGAGEMENT_TEMPLATE_ID = 459;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Engagement Code P' of 'Patient Engagement'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ENGAGEMENT__PATIENT_ENGAGEMENT_CODE_P = 460;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Engagement Code' of 'Patient Engagement'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ENGAGEMENT__PATIENT_ENGAGEMENT_CODE = 461;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Engagement Value' of 'Patient Engagement'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ENGAGEMENT__PATIENT_ENGAGEMENT_VALUE = 462;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Engagement Value P' of 'Patient Engagement'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ENGAGEMENT__PATIENT_ENGAGEMENT_VALUE_P = 463;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Crew Disposition Template Id' of 'Crew Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CREW_DISPOSITION__CREW_DISPOSITION_TEMPLATE_ID = 464;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Crew Disposition Code' of 'Crew Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CREW_DISPOSITION__CREW_DISPOSITION_CODE = 465;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Crew Disposition Value' of 'Crew Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CREW_DISPOSITION__CREW_DISPOSITION_VALUE = 466;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Crew Disposition Value P' of 'Crew Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CREW_DISPOSITION__CREW_DISPOSITION_VALUE_P = 467;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Disposition Template Id' of 'Transport Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DISPOSITION__TRANSPORT_DISPOSITION_TEMPLATE_ID = 468;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Disposition Code P' of 'Transport Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DISPOSITION__TRANSPORT_DISPOSITION_CODE_P = 469;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Disposition Code' of 'Transport Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DISPOSITION__TRANSPORT_DISPOSITION_CODE = 470;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Disposition Value' of 'Transport Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DISPOSITION__TRANSPORT_DISPOSITION_VALUE = 471;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Disposition Value P' of 'Transport Disposition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DISPOSITION__TRANSPORT_DISPOSITION_VALUE_P = 472;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Personnel Adverse Event Section Template Id' of 'EMS Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PERSONNEL_ADVERSE_EVENT_SECTION__EMS_PERSONNEL_ADVERSE_EVENT_SECTION_TEMPLATE_ID = 473;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Personnel Adverse Event Section Code' of 'EMS Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PERSONNEL_ADVERSE_EVENT_SECTION__EMS_PERSONNEL_ADVERSE_EVENT_SECTION_CODE = 474;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Personnel Adverse Event Section Code P' of 'EMS Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PERSONNEL_ADVERSE_EVENT_SECTION__EMS_PERSONNEL_ADVERSE_EVENT_SECTION_CODE_P = 475;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Personnel Adverse Event Section Title' of 'EMS Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PERSONNEL_ADVERSE_EVENT_SECTION__EMS_PERSONNEL_ADVERSE_EVENT_SECTION_TITLE = 476;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Personnel Adverse Event Section Text' of 'EMS Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PERSONNEL_ADVERSE_EVENT_SECTION__EMS_PERSONNEL_ADVERSE_EVENT_SECTION_TEXT = 477;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Personnel Adverse Event Section Adverse Event Indicator' of 'EMS Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PERSONNEL_ADVERSE_EVENT_SECTION__EMS_PERSONNEL_ADVERSE_EVENT_SECTION_ADVERSE_EVENT_INDICATOR = 478;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Personnel Adverse Event Section Adverse Event Type Observation' of 'EMS Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PERSONNEL_ADVERSE_EVENT_SECTION__EMS_PERSONNEL_ADVERSE_EVENT_SECTION_ADVERSE_EVENT_TYPE_OBSERVATION = 479;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Indicator Template Id' of 'Adverse Event Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_INDICATOR__ADVERSE_EVENT_INDICATOR_TEMPLATE_ID = 480;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Indicator Mood Code' of 'Adverse Event Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_INDICATOR__ADVERSE_EVENT_INDICATOR_MOOD_CODE = 481;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Indicator Code P' of 'Adverse Event Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_INDICATOR__ADVERSE_EVENT_INDICATOR_CODE_P = 482;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Indicator Code' of 'Adverse Event Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_INDICATOR__ADVERSE_EVENT_INDICATOR_CODE = 483;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Indicator Value' of 'Adverse Event Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_INDICATOR__ADVERSE_EVENT_INDICATOR_VALUE = 484;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Template Id' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_TEMPLATE_ID = 485;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Mood Code' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_MOOD_CODE = 486;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Code P' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_CODE_P = 487;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Code' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_CODE = 488;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Value' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_VALUE = 489;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Value P' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_VALUE_P = 490;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Protocol Section Template Id' of 'EMS Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROTOCOL_SECTION__EMS_PROTOCOL_SECTION_TEMPLATE_ID = 491;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Protocol Section Code' of 'EMS Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROTOCOL_SECTION__EMS_PROTOCOL_SECTION_CODE = 492;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Protocol Section Code P' of 'EMS Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROTOCOL_SECTION__EMS_PROTOCOL_SECTION_CODE_P = 493;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Protocol Section Title' of 'EMS Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROTOCOL_SECTION__EMS_PROTOCOL_SECTION_TITLE = 494;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Protocol Section Text' of 'EMS Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROTOCOL_SECTION__EMS_PROTOCOL_SECTION_TEXT = 495;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Protocol Section Protocol Observation' of 'EMS Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROTOCOL_SECTION__EMS_PROTOCOL_SECTION_PROTOCOL_OBSERVATION = 496;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Protocol Section Candidate Patient Registry Type' of 'EMS Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_PROTOCOL_SECTION__EMS_PROTOCOL_SECTION_CANDIDATE_PATIENT_REGISTRY_TYPE = 497;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Template Id' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_TEMPLATE_ID = 498;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Mood Code' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_MOOD_CODE = 499;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Code P' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_CODE_P = 500;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Code' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_CODE = 501;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Value' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_VALUE = 502;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Value P' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_VALUE_P = 503;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Template Id' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_TEMPLATE_ID = 504;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Mood Code' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_MOOD_CODE = 505;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Code P' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_CODE_P = 506;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Code' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_CODE = 507;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Value' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_VALUE = 508;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Value P' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_VALUE_P = 509;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Response Section Template Id' of 'EMS Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_RESPONSE_SECTION__EMS_RESPONSE_SECTION_TEMPLATE_ID = 348;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Response Section Code' of 'EMS Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_RESPONSE_SECTION__EMS_RESPONSE_SECTION_CODE = 349;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Response Section Code P' of 'EMS Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_RESPONSE_SECTION__EMS_RESPONSE_SECTION_CODE_P = 350;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Response Section Title' of 'EMS Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_RESPONSE_SECTION__EMS_RESPONSE_SECTION_TITLE = 351;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Response Section Text' of 'EMS Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_RESPONSE_SECTION__EMS_RESPONSE_SECTION_TEXT = 352;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Response Section Delay Organizer' of 'EMS Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_RESPONSE_SECTION__EMS_RESPONSE_SECTION_DELAY_ORGANIZER = 353;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Response Section Dispatch Location Organizer' of 'EMS Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_RESPONSE_SECTION__EMS_RESPONSE_SECTION_DISPATCH_LOCATION_ORGANIZER = 354;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Response Section Response Odometer Reading Organizer' of 'EMS Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_RESPONSE_SECTION__EMS_RESPONSE_SECTION_RESPONSE_ODOMETER_READING_ORGANIZER = 355;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Response Section Response Mode To Scene' of 'EMS Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_RESPONSE_SECTION__EMS_RESPONSE_SECTION_RESPONSE_MODE_TO_SCENE = 356;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Dispatch Delay Relationship' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_DISPATCH_DELAY_RELATIONSHIP = 357;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Response Delay Relationship' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_RESPONSE_DELAY_RELATIONSHIP = 358;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Scene Delay Relationship' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_SCENE_DELAY_RELATIONSHIP = 359;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Transport Delay Relationship' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_TRANSPORT_DELAY_RELATIONSHIP = 360;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Turnaound Delay Relationship' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_TURNAOUND_DELAY_RELATIONSHIP = 361;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Template Id' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_TEMPLATE_ID = 362;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Organizer Dispatch Location Name Relationship' of 'Dispatch Location Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_ORGANIZER__DISPATCH_LOCATION_ORGANIZER_DISPATCH_LOCATION_NAME_RELATIONSHIP = 363;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Organizer Dispatch Location Latitude Relationship' of 'Dispatch Location Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_ORGANIZER__DISPATCH_LOCATION_ORGANIZER_DISPATCH_LOCATION_LATITUDE_RELATIONSHIP = 364;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Organizer Dispatch Location Longtude Relationship' of 'Dispatch Location Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_ORGANIZER__DISPATCH_LOCATION_ORGANIZER_DISPATCH_LOCATION_LONGTUDE_RELATIONSHIP = 365;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Organizer Template Id' of 'Dispatch Location Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_ORGANIZER__DISPATCH_LOCATION_ORGANIZER_TEMPLATE_ID = 366;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Odometer Reading Organizer Response Beginning Odometer Reading Relationship' of 'Response Odometer Reading Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ODOMETER_READING_ORGANIZER__RESPONSE_ODOMETER_READING_ORGANIZER_RESPONSE_BEGINNING_ODOMETER_READING_RELATIONSHIP = 367;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Odometer Reading Organizer Response On Scene Odometer Reading Relationship' of 'Response Odometer Reading Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ODOMETER_READING_ORGANIZER__RESPONSE_ODOMETER_READING_ORGANIZER_RESPONSE_ON_SCENE_ODOMETER_READING_RELATIONSHIP = 368;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Odometer Reading Organizer Response Destination Odometer Reading Relationship' of 'Response Odometer Reading Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ODOMETER_READING_ORGANIZER__RESPONSE_ODOMETER_READING_ORGANIZER_RESPONSE_DESTINATION_ODOMETER_READING_RELATIONSHIP = 369;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Odometer Reading Organizer Response Ending Odometer Reading Relationship' of 'Response Odometer Reading Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ODOMETER_READING_ORGANIZER__RESPONSE_ODOMETER_READING_ORGANIZER_RESPONSE_ENDING_ODOMETER_READING_RELATIONSHIP = 370;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Odometer Reading Organizer Template Id' of 'Response Odometer Reading Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ODOMETER_READING_ORGANIZER__RESPONSE_ODOMETER_READING_ORGANIZER_TEMPLATE_ID = 371;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Template Id' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_TEMPLATE_ID = 372;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Mood Code' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_MOOD_CODE = 373;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Code P' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_CODE_P = 374;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Code' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_CODE = 375;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Value' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_VALUE = 376;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Value P' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_VALUE_P = 377;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Response Mode Qualifier' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_RESPONSE_MODE_QUALIFIER = 378;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode Qualifier Template Id' of 'Response Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_QUALIFIER__RESPONSE_MODE_QUALIFIER_TEMPLATE_ID = 379;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode Qualifier Class Code' of 'Response Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_QUALIFIER__RESPONSE_MODE_QUALIFIER_CLASS_CODE = 380;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode Qualifier Code P' of 'Response Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_QUALIFIER__RESPONSE_MODE_QUALIFIER_CODE_P = 381;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode Qualifier Code' of 'Response Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_QUALIFIER__RESPONSE_MODE_QUALIFIER_CODE = 382;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode Qualifier Mood Code' of 'Response Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_QUALIFIER__RESPONSE_MODE_QUALIFIER_MOOD_CODE = 383;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode Qualifier Value' of 'Response Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_QUALIFIER__RESPONSE_MODE_QUALIFIER_VALUE = 384;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode Qualifier Value P' of 'Response Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_QUALIFIER__RESPONSE_MODE_QUALIFIER_VALUE_P = 385;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Template Id' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_TEMPLATE_ID = 539;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Code' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_CODE = 540;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Code P' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_CODE_P = 541;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Title' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_TITLE = 542;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Text' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_TEXT = 543;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Complaint' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_COMPLAINT = 544;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Possible Injury' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_POSSIBLE_INJURY = 545;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Provider Primary Impression' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_PROVIDER_PRIMARY_IMPRESSION = 546;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Primary Symptom' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_PRIMARY_SYMPTOM = 547;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Other Symptoms' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_OTHER_SYMPTOMS = 548;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Provider Secondary Impressions' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_PROVIDER_SECONDARY_IMPRESSIONS = 549;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Situation Section Initial Patient Acuity' of 'EMS Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_SITUATION_SECTION__EMS_SITUATION_SECTION_INITIAL_PATIENT_ACUITY = 550;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Relationship' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_DURATION_RELATIONSHIP = 551;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Relationship' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_TYPE_RELATIONSHIP = 552;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Relationship' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_ORGAN_SYSTEM_RELATIONSHIP = 553;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Template Id' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_TEMPLATE_ID = 554;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Mood Code' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_MOOD_CODE = 555;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Code P' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_CODE_P = 556;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Code' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_CODE = 557;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Effective Time' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_EFFECTIVE_TIME = 558;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Value' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_VALUE = 559;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Target Site Code' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_TARGET_SITE_CODE = 560;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Target Site Code P' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_TARGET_SITE_CODE_P = 561;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Possible Injury Template Id' of 'Possible Injury'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSSIBLE_INJURY__POSSIBLE_INJURY_TEMPLATE_ID = 562;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Possible Injury Mood Code' of 'Possible Injury'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSSIBLE_INJURY__POSSIBLE_INJURY_MOOD_CODE = 563;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Possible Injury Code P' of 'Possible Injury'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSSIBLE_INJURY__POSSIBLE_INJURY_CODE_P = 564;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Possible Injury Code' of 'Possible Injury'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSSIBLE_INJURY__POSSIBLE_INJURY_CODE = 565;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Possible Injury Value' of 'Possible Injury'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSSIBLE_INJURY__POSSIBLE_INJURY_VALUE = 566;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Template Id' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_TEMPLATE_ID = 567;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Mood Code' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_MOOD_CODE = 568;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Code P' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_CODE_P = 569;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Code' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_CODE = 570;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Value' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_VALUE = 571;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Value P' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_VALUE_P = 572;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Template Id' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_TEMPLATE_ID = 573;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Mood Code' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_MOOD_CODE = 574;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Code P' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_CODE_P = 575;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Code' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_CODE = 576;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Value' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_VALUE = 577;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Value P' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_VALUE_P = 578;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Template Id' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_TEMPLATE_ID = 579;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Mood Code' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_MOOD_CODE = 580;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Code P' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_CODE_P = 581;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Code' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_CODE = 582;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Value' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_VALUE = 583;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Value P' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_VALUE_P = 584;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Template Id' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_TEMPLATE_ID = 585;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Mood Code' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_MOOD_CODE = 586;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Code P' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_CODE_P = 587;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Code' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_CODE = 588;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Value' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_VALUE = 589;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Value P' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_VALUE_P = 590;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Template Id' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_TEMPLATE_ID = 591;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Mood Code' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_MOOD_CODE = 592;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Code P' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_CODE_P = 593;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Code' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_CODE = 594;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Value' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_VALUE = 595;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Value P' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_VALUE_P = 596;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Template Id' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_TEMPLATE_ID = 597;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Code' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_CODE = 598;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Code P' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_CODE_P = 599;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Title' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_TITLE = 600;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Text' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_TEXT = 601;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Call Time' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_CALL_TIME = 602;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Unit Notified Time' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_UNIT_NOTIFIED_TIME = 603;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Unit En Route Time' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_UNIT_EN_ROUTE_TIME = 604;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Unit On Scene Time' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_UNIT_ON_SCENE_TIME = 605;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Unit At Patientt Time' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_UNIT_AT_PATIENTT_TIME = 606;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Unit Left Scene Time' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_UNIT_LEFT_SCENE_TIME = 607;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Patient Arrived At Destination Time' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_PATIENT_ARRIVED_AT_DESTINATION_TIME = 608;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Unit Back In Service Time' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_UNIT_BACK_IN_SERVICE_TIME = 609;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Times Section Dispatch Notified Time' of 'EMS Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_TIMES_SECTION__EMS_TIMES_SECTION_DISPATCH_NOTIFIED_TIME = 610;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Call Time Template Id' of 'Call Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CALL_TIME__CALL_TIME_TEMPLATE_ID = 611;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Call Time Mood Code' of 'Call Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CALL_TIME__CALL_TIME_MOOD_CODE = 612;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Call Time Code P' of 'Call Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CALL_TIME__CALL_TIME_CODE_P = 613;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Call Time Code' of 'Call Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CALL_TIME__CALL_TIME_CODE = 614;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Call Time Value' of 'Call Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CALL_TIME__CALL_TIME_VALUE = 615;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Notified Time Template Id' of 'Unit Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_NOTIFIED_TIME__UNIT_NOTIFIED_TIME_TEMPLATE_ID = 616;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Notified Time Mood Code' of 'Unit Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_NOTIFIED_TIME__UNIT_NOTIFIED_TIME_MOOD_CODE = 617;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Notified Time Code P' of 'Unit Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_NOTIFIED_TIME__UNIT_NOTIFIED_TIME_CODE_P = 618;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Notified Time Code' of 'Unit Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_NOTIFIED_TIME__UNIT_NOTIFIED_TIME_CODE = 619;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Notified Time Value' of 'Unit Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_NOTIFIED_TIME__UNIT_NOTIFIED_TIME_VALUE = 620;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit En Route Time Template Id' of 'Unit En Route Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_EN_ROUTE_TIME__UNIT_EN_ROUTE_TIME_TEMPLATE_ID = 621;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit En Route Time Mood Code' of 'Unit En Route Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_EN_ROUTE_TIME__UNIT_EN_ROUTE_TIME_MOOD_CODE = 622;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit En Route Time Code P' of 'Unit En Route Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_EN_ROUTE_TIME__UNIT_EN_ROUTE_TIME_CODE_P = 623;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit En Route Time Code' of 'Unit En Route Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_EN_ROUTE_TIME__UNIT_EN_ROUTE_TIME_CODE = 624;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit En Route Time Value' of 'Unit En Route Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_EN_ROUTE_TIME__UNIT_EN_ROUTE_TIME_VALUE = 625;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit On Scene Time Template Id' of 'Unit On Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_ON_SCENE_TIME__UNIT_ON_SCENE_TIME_TEMPLATE_ID = 626;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit On Scene Time Mood Code' of 'Unit On Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_ON_SCENE_TIME__UNIT_ON_SCENE_TIME_MOOD_CODE = 627;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit On Scene Time Code P' of 'Unit On Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_ON_SCENE_TIME__UNIT_ON_SCENE_TIME_CODE_P = 628;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit On Scene Time Code' of 'Unit On Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_ON_SCENE_TIME__UNIT_ON_SCENE_TIME_CODE = 629;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit On Scene Time Value' of 'Unit On Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_ON_SCENE_TIME__UNIT_ON_SCENE_TIME_VALUE = 630;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit At Patient Time Template Id' of 'Unit At Patient Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_AT_PATIENT_TIME__UNIT_AT_PATIENT_TIME_TEMPLATE_ID = 631;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit At Patient Time Mood Code' of 'Unit At Patient Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_AT_PATIENT_TIME__UNIT_AT_PATIENT_TIME_MOOD_CODE = 632;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit At Patient Time Code P' of 'Unit At Patient Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_AT_PATIENT_TIME__UNIT_AT_PATIENT_TIME_CODE_P = 633;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit At Patient Time Code' of 'Unit At Patient Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_AT_PATIENT_TIME__UNIT_AT_PATIENT_TIME_CODE = 634;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit At Patient Time Value' of 'Unit At Patient Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_AT_PATIENT_TIME__UNIT_AT_PATIENT_TIME_VALUE = 635;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Left Scene Time Template Id' of 'Unit Left Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_LEFT_SCENE_TIME__UNIT_LEFT_SCENE_TIME_TEMPLATE_ID = 636;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Left Scene Time Mood Code' of 'Unit Left Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_LEFT_SCENE_TIME__UNIT_LEFT_SCENE_TIME_MOOD_CODE = 637;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Left Scene Time Code P' of 'Unit Left Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_LEFT_SCENE_TIME__UNIT_LEFT_SCENE_TIME_CODE_P = 638;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Left Scene Time Code' of 'Unit Left Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_LEFT_SCENE_TIME__UNIT_LEFT_SCENE_TIME_CODE = 639;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Left Scene Time Value' of 'Unit Left Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_LEFT_SCENE_TIME__UNIT_LEFT_SCENE_TIME_VALUE = 640;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Arrived At Destination Time Template Id' of 'Patient Arrived At Destination Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ARRIVED_AT_DESTINATION_TIME__PATIENT_ARRIVED_AT_DESTINATION_TIME_TEMPLATE_ID = 641;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Arrived At Destination Time Mood Code' of 'Patient Arrived At Destination Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ARRIVED_AT_DESTINATION_TIME__PATIENT_ARRIVED_AT_DESTINATION_TIME_MOOD_CODE = 642;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Arrived At Destination Time Code P' of 'Patient Arrived At Destination Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ARRIVED_AT_DESTINATION_TIME__PATIENT_ARRIVED_AT_DESTINATION_TIME_CODE_P = 643;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Arrived At Destination Time Code' of 'Patient Arrived At Destination Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ARRIVED_AT_DESTINATION_TIME__PATIENT_ARRIVED_AT_DESTINATION_TIME_CODE = 644;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Arrived At Destination Time Value' of 'Patient Arrived At Destination Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ARRIVED_AT_DESTINATION_TIME__PATIENT_ARRIVED_AT_DESTINATION_TIME_VALUE = 645;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Back In Service Time Template Id' of 'Unit Back In Service Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_BACK_IN_SERVICE_TIME__UNIT_BACK_IN_SERVICE_TIME_TEMPLATE_ID = 646;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Back In Service Time Mood Code' of 'Unit Back In Service Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_BACK_IN_SERVICE_TIME__UNIT_BACK_IN_SERVICE_TIME_MOOD_CODE = 647;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Back In Service Time Code P' of 'Unit Back In Service Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_BACK_IN_SERVICE_TIME__UNIT_BACK_IN_SERVICE_TIME_CODE_P = 648;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Back In Service Time Code' of 'Unit Back In Service Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_BACK_IN_SERVICE_TIME__UNIT_BACK_IN_SERVICE_TIME_CODE = 649;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Back In Service Time Value' of 'Unit Back In Service Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_BACK_IN_SERVICE_TIME__UNIT_BACK_IN_SERVICE_TIME_VALUE = 650;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Notified Time Template Id' of 'Dispatch Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_NOTIFIED_TIME__DISPATCH_NOTIFIED_TIME_TEMPLATE_ID = 651;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Notified Time Mood Code' of 'Dispatch Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_NOTIFIED_TIME__DISPATCH_NOTIFIED_TIME_MOOD_CODE = 652;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Notified Time Code P' of 'Dispatch Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_NOTIFIED_TIME__DISPATCH_NOTIFIED_TIME_CODE_P = 653;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Notified Time Code' of 'Dispatch Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_NOTIFIED_TIME__DISPATCH_NOTIFIED_TIME_CODE = 654;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Notified Time Value' of 'Dispatch Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_NOTIFIED_TIME__DISPATCH_NOTIFIED_TIME_VALUE = 655;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Vital Signs Section Template Id' of 'EMS Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_VITAL_SIGNS_SECTION__EMS_VITAL_SIGNS_SECTION_TEMPLATE_ID = 203;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Vital Signs Section Code' of 'EMS Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_VITAL_SIGNS_SECTION__EMS_VITAL_SIGNS_SECTION_CODE = 204;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Vital Signs Section Code P' of 'EMS Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_VITAL_SIGNS_SECTION__EMS_VITAL_SIGNS_SECTION_CODE_P = 205;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Vital Signs Section Title' of 'EMS Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_VITAL_SIGNS_SECTION__EMS_VITAL_SIGNS_SECTION_TITLE = 206;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Vital Signs Section Text' of 'EMS Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_VITAL_SIGNS_SECTION__EMS_VITAL_SIGNS_SECTION_TEXT = 207;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Vital Signs Section Vital Signs Organizer' of 'EMS Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_VITAL_SIGNS_SECTION__EMS_VITAL_SIGNS_SECTION_VITAL_SIGNS_ORGANIZER = 208;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Systolic Blood Pressure Component' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_SYSTOLIC_BLOOD_PRESSURE_COMPONENT = 209;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Respiratory Rate Component' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_RESPIRATORY_RATE_COMPONENT = 210;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Body Temperature Component' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_BODY_TEMPERATURE_COMPONENT = 211;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Oxygen Saturation Component' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_OXYGEN_SATURATION_COMPONENT = 212;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Template Id' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_TEMPLATE_ID = 213;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Code' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_CODE = 214;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Code P' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_CODE_P = 215;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Effective Time' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_EFFECTIVE_TIME = 216;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Component4' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_COMPONENT4 = 217;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Component42' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_COMPONENT42 = 218;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Component43' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_COMPONENT43 = 219;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Template Id' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_TEMPLATE_ID = 40;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Code' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_CODE = 41;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Code P' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_CODE_P = 42;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Title' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_TITLE = 43;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Text' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_TEXT = 44;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Injury Cause Category' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_INJURY_CAUSE_CATEGORY = 45;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Injury Mechanism' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_INJURY_MECHANISM = 46;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Trauma Center Criteria' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_TRAUMA_CENTER_CRITERIA = 47;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Injury Risk Factor' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_INJURY_RISK_FACTOR = 48;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Vehicle Impact Area' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_VEHICLE_IMPACT_AREA = 49;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Patient Location In Vehicle' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_PATIENT_LOCATION_IN_VEHICLE = 50;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Vehicle Occupant Safety Equipment' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_VEHICLE_OCCUPANT_SAFETY_EQUIPMENT = 51;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Airbag Deployment Status' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_AIRBAG_DEPLOYMENT_STATUS = 52;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Height Of Fall' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_HEIGHT_OF_FALL = 53;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Injury Incident Description Section Disaster Type' of 'EMS Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_INJURY_INCIDENT_DESCRIPTION_SECTION__EMS_INJURY_INCIDENT_DESCRIPTION_SECTION_DISASTER_TYPE = 54;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Cause Category Template Id' of 'Injury Cause Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_CAUSE_CATEGORY__INJURY_CAUSE_CATEGORY_TEMPLATE_ID = 55;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Cause Category Mood Code' of 'Injury Cause Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_CAUSE_CATEGORY__INJURY_CAUSE_CATEGORY_MOOD_CODE = 56;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Cause Category Code P' of 'Injury Cause Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_CAUSE_CATEGORY__INJURY_CAUSE_CATEGORY_CODE_P = 57;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Cause Category Code' of 'Injury Cause Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_CAUSE_CATEGORY__INJURY_CAUSE_CATEGORY_CODE = 58;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Cause Category Value' of 'Injury Cause Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_CAUSE_CATEGORY__INJURY_CAUSE_CATEGORY_VALUE = 59;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Cause Category Value P' of 'Injury Cause Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_CAUSE_CATEGORY__INJURY_CAUSE_CATEGORY_VALUE_P = 60;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Mechanism Template Id' of 'Injury Mechanism'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_MECHANISM__INJURY_MECHANISM_TEMPLATE_ID = 61;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Mechanism Mood Code' of 'Injury Mechanism'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_MECHANISM__INJURY_MECHANISM_MOOD_CODE = 62;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Mechanism Code P' of 'Injury Mechanism'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_MECHANISM__INJURY_MECHANISM_CODE_P = 63;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Mechanism Code' of 'Injury Mechanism'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_MECHANISM__INJURY_MECHANISM_CODE = 64;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Mechanism Value' of 'Injury Mechanism'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_MECHANISM__INJURY_MECHANISM_VALUE = 65;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Mechanism Value P' of 'Injury Mechanism'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_MECHANISM__INJURY_MECHANISM_VALUE_P = 66;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps1and2 Template Id' of 'Trauma Triage Criteria Steps1and2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS1AND2__TRAUMA_TRIAGE_CRITERIA_STEPS1AND2_TEMPLATE_ID = 67;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps1and2 Mood Code' of 'Trauma Triage Criteria Steps1and2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS1AND2__TRAUMA_TRIAGE_CRITERIA_STEPS1AND2_MOOD_CODE = 68;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps1and2 Code P' of 'Trauma Triage Criteria Steps1and2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS1AND2__TRAUMA_TRIAGE_CRITERIA_STEPS1AND2_CODE_P = 69;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps1and2 Code' of 'Trauma Triage Criteria Steps1and2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS1AND2__TRAUMA_TRIAGE_CRITERIA_STEPS1AND2_CODE = 70;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps1and2 Value' of 'Trauma Triage Criteria Steps1and2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS1AND2__TRAUMA_TRIAGE_CRITERIA_STEPS1AND2_VALUE = 71;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps1and2 Value P' of 'Trauma Triage Criteria Steps1and2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS1AND2__TRAUMA_TRIAGE_CRITERIA_STEPS1AND2_VALUE_P = 72;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps3and4 Template Id' of 'Trauma Triage Criteria Steps3and4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS3AND4__TRAUMA_TRIAGE_CRITERIA_STEPS3AND4_TEMPLATE_ID = 73;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps3and4 Mood Code' of 'Trauma Triage Criteria Steps3and4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS3AND4__TRAUMA_TRIAGE_CRITERIA_STEPS3AND4_MOOD_CODE = 74;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps3and4 Code P' of 'Trauma Triage Criteria Steps3and4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS3AND4__TRAUMA_TRIAGE_CRITERIA_STEPS3AND4_CODE_P = 75;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps3and4 Code' of 'Trauma Triage Criteria Steps3and4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS3AND4__TRAUMA_TRIAGE_CRITERIA_STEPS3AND4_CODE = 76;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps3and4 Value' of 'Trauma Triage Criteria Steps3and4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS3AND4__TRAUMA_TRIAGE_CRITERIA_STEPS3AND4_VALUE = 77;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Triage Criteria Steps3and4 Value P' of 'Trauma Triage Criteria Steps3and4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_TRIAGE_CRITERIA_STEPS3AND4__TRAUMA_TRIAGE_CRITERIA_STEPS3AND4_VALUE_P = 78;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Impact Area Template Id' of 'Vehicle Impact Area'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_IMPACT_AREA__VEHICLE_IMPACT_AREA_TEMPLATE_ID = 79;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Impact Area Mood Code' of 'Vehicle Impact Area'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_IMPACT_AREA__VEHICLE_IMPACT_AREA_MOOD_CODE = 80;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Impact Area Code P' of 'Vehicle Impact Area'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_IMPACT_AREA__VEHICLE_IMPACT_AREA_CODE_P = 81;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Impact Area Code' of 'Vehicle Impact Area'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_IMPACT_AREA__VEHICLE_IMPACT_AREA_CODE = 82;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Impact Area Value' of 'Vehicle Impact Area'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_IMPACT_AREA__VEHICLE_IMPACT_AREA_VALUE = 83;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Impact Area Value P' of 'Vehicle Impact Area'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_IMPACT_AREA__VEHICLE_IMPACT_AREA_VALUE_P = 84;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Location In Vehicle Template Id' of 'Patient Location In Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LOCATION_IN_VEHICLE__PATIENT_LOCATION_IN_VEHICLE_TEMPLATE_ID = 85;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Location In Vehicle Mood Code' of 'Patient Location In Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LOCATION_IN_VEHICLE__PATIENT_LOCATION_IN_VEHICLE_MOOD_CODE = 86;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Location In Vehicle Code P' of 'Patient Location In Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LOCATION_IN_VEHICLE__PATIENT_LOCATION_IN_VEHICLE_CODE_P = 87;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Location In Vehicle Code' of 'Patient Location In Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LOCATION_IN_VEHICLE__PATIENT_LOCATION_IN_VEHICLE_CODE = 88;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Location In Vehicle Value' of 'Patient Location In Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LOCATION_IN_VEHICLE__PATIENT_LOCATION_IN_VEHICLE_VALUE = 89;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Location In Vehicle Value P' of 'Patient Location In Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LOCATION_IN_VEHICLE__PATIENT_LOCATION_IN_VEHICLE_VALUE_P = 90;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Occupant Safety Equipment Template Id' of 'Vehicle Occupant Safety Equipment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_OCCUPANT_SAFETY_EQUIPMENT__VEHICLE_OCCUPANT_SAFETY_EQUIPMENT_TEMPLATE_ID = 91;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Occupant Safety Equipment Mood Code' of 'Vehicle Occupant Safety Equipment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_OCCUPANT_SAFETY_EQUIPMENT__VEHICLE_OCCUPANT_SAFETY_EQUIPMENT_MOOD_CODE = 92;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Occupant Safety Equipment Code P' of 'Vehicle Occupant Safety Equipment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_OCCUPANT_SAFETY_EQUIPMENT__VEHICLE_OCCUPANT_SAFETY_EQUIPMENT_CODE_P = 93;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Occupant Safety Equipment Code' of 'Vehicle Occupant Safety Equipment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_OCCUPANT_SAFETY_EQUIPMENT__VEHICLE_OCCUPANT_SAFETY_EQUIPMENT_CODE = 94;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Occupant Safety Equipment Value' of 'Vehicle Occupant Safety Equipment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_OCCUPANT_SAFETY_EQUIPMENT__VEHICLE_OCCUPANT_SAFETY_EQUIPMENT_VALUE = 95;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Occupant Safety Equipment Value P' of 'Vehicle Occupant Safety Equipment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_OCCUPANT_SAFETY_EQUIPMENT__VEHICLE_OCCUPANT_SAFETY_EQUIPMENT_VALUE_P = 96;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airbag Deployment Status Template Id' of 'Airbag Deployment Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRBAG_DEPLOYMENT_STATUS__AIRBAG_DEPLOYMENT_STATUS_TEMPLATE_ID = 97;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airbag Deployment Status Mood Code' of 'Airbag Deployment Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRBAG_DEPLOYMENT_STATUS__AIRBAG_DEPLOYMENT_STATUS_MOOD_CODE = 98;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airbag Deployment Status Code' of 'Airbag Deployment Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRBAG_DEPLOYMENT_STATUS__AIRBAG_DEPLOYMENT_STATUS_CODE = 99;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airbag Deployment Status Value' of 'Airbag Deployment Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRBAG_DEPLOYMENT_STATUS__AIRBAG_DEPLOYMENT_STATUS_VALUE = 100;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airbag Deployment Status Value P' of 'Airbag Deployment Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRBAG_DEPLOYMENT_STATUS__AIRBAG_DEPLOYMENT_STATUS_VALUE_P = 101;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Height Of Fall Template Id' of 'Height Of Fall'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEIGHT_OF_FALL__HEIGHT_OF_FALL_TEMPLATE_ID = 102;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Height Of Fall Mood Code' of 'Height Of Fall'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEIGHT_OF_FALL__HEIGHT_OF_FALL_MOOD_CODE = 103;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Height Of Fall Code P' of 'Height Of Fall'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEIGHT_OF_FALL__HEIGHT_OF_FALL_CODE_P = 104;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Height Of Fall Code' of 'Height Of Fall'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEIGHT_OF_FALL__HEIGHT_OF_FALL_CODE = 105;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Height Of Fall Value' of 'Height Of Fall'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEIGHT_OF_FALL__HEIGHT_OF_FALL_VALUE = 106;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disaster Type Template Id' of 'Disaster Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISASTER_TYPE__DISASTER_TYPE_TEMPLATE_ID = 107;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disaster Type Mood Code' of 'Disaster Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISASTER_TYPE__DISASTER_TYPE_MOOD_CODE = 108;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disaster Type Code' of 'Disaster Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISASTER_TYPE__DISASTER_TYPE_CODE = 109;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disaster Type Value' of 'Disaster Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISASTER_TYPE__DISASTER_TYPE_VALUE = 110;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disaster Type Value P' of 'Disaster Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISASTER_TYPE__DISASTER_TYPE_VALUE_P = 111;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Billing Section Template Id' of 'EMS Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_BILLING_SECTION__EMS_BILLING_SECTION_TEMPLATE_ID = 21;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Billing Section Code' of 'EMS Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_BILLING_SECTION__EMS_BILLING_SECTION_CODE = 22;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Billing Section Code P' of 'EMS Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_BILLING_SECTION__EMS_BILLING_SECTION_CODE_P = 23;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Billing Section Title' of 'EMS Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_BILLING_SECTION__EMS_BILLING_SECTION_TITLE = 24;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Billing Section Text' of 'EMS Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_BILLING_SECTION__EMS_BILLING_SECTION_TEXT = 25;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Billing Section Billing Condition' of 'EMS Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_BILLING_SECTION__EMS_BILLING_SECTION_BILLING_CONDITION = 26;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMS Billing Section Level Of Service Observation' of 'EMS Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMS_BILLING_SECTION__EMS_BILLING_SECTION_LEVEL_OF_SERVICE_OBSERVATION = 27;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Template Id' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_TEMPLATE_ID = 28;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Code P' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_CODE_P = 29;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Code' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_CODE = 30;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Value' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_VALUE = 31;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Value P' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_VALUE_P = 32;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Mood Code' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_MOOD_CODE = 33;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Template Id' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_TEMPLATE_ID = 34;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Mood Code' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_MOOD_CODE = 35;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Code P' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_CODE_P = 36;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Code' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_CODE = 37;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Value' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_VALUE = 38;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Value P' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_VALUE_P = 39;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Ending Odometer Reading Template Id' of 'Response Ending Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ENDING_ODOMETER_READING__RESPONSE_ENDING_ODOMETER_READING_TEMPLATE_ID = 656;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Ending Odometer Reading Mood Code' of 'Response Ending Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ENDING_ODOMETER_READING__RESPONSE_ENDING_ODOMETER_READING_MOOD_CODE = 657;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Ending Odometer Reading Code P' of 'Response Ending Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ENDING_ODOMETER_READING__RESPONSE_ENDING_ODOMETER_READING_CODE_P = 658;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Ending Odometer Reading Code' of 'Response Ending Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ENDING_ODOMETER_READING__RESPONSE_ENDING_ODOMETER_READING_CODE = 659;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Ending Odometer Reading Value' of 'Response Ending Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ENDING_ODOMETER_READING__RESPONSE_ENDING_ODOMETER_READING_VALUE = 660;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Template Id' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_TEMPLATE_ID = 661;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Mood Code' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_MOOD_CODE = 662;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Code P' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_CODE_P = 663;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Code' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_CODE = 664;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Effective Time' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_EFFECTIVE_TIME = 665;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Value' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_VALUE = 666;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Method Code' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_METHOD_CODE = 667;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Method Code P' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_METHOD_CODE_P = 668;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior Aid Vitals Template Id' of 'Prior Aid Vitals'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AID_VITALS__PRIOR_AID_VITALS_TEMPLATE_ID = 669;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior Aid Vitals Mood Code' of 'Prior Aid Vitals'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AID_VITALS__PRIOR_AID_VITALS_MOOD_CODE = 670;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior Aid Vitals Code P' of 'Prior Aid Vitals'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AID_VITALS__PRIOR_AID_VITALS_CODE_P = 671;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior Aid Vitals Code' of 'Prior Aid Vitals'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AID_VITALS__PRIOR_AID_VITALS_CODE = 672;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior Aid Vitals Value' of 'Prior Aid Vitals'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AID_VITALS__PRIOR_AID_VITALS_VALUE = 673;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Allergy Participant1' of 'Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_ALLERGY__DRUG_ALLERGY_PARTICIPANT1 = 674;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Allergy Template Id' of 'Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_ALLERGY__DRUG_ALLERGY_TEMPLATE_ID = 675;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Allergy Code' of 'Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_ALLERGY__DRUG_ALLERGY_CODE = 676;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Allergy Value' of 'Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_ALLERGY__DRUG_ALLERGY_VALUE = 677;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Allergy Mood Code' of 'Drug Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_ALLERGY__DRUG_ALLERGY_MOOD_CODE = 678;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Known Drug Allergy Observation Template Id' of 'Existence Of Known Drug Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION__EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION_TEMPLATE_ID = 679;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Known Drug Allergy Observation Mood Code' of 'Existence Of Known Drug Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION__EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION_MOOD_CODE = 680;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Known Drug Allergy Observation Code P' of 'Existence Of Known Drug Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION__EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION_CODE_P = 681;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Known Drug Allergy Observation Code' of 'Existence Of Known Drug Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION__EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION_CODE = 682;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Known Drug Allergy Observation Value' of 'Existence Of Known Drug Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION__EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION_VALUE = 683;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Template Id' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_TEMPLATE_ID = 684;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Mood Code' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_MOOD_CODE = 685;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Code P' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_CODE_P = 686;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Code' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_CODE = 687;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Value' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_VALUE = 688;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Value P' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_VALUE_P = 689;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Template Id' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_TEMPLATE_ID = 690;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Mood Code' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_MOOD_CODE = 691;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Code P' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_CODE_P = 692;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Code' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_CODE = 693;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Value' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_VALUE = 694;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Value P' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_VALUE_P = 695;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Template Id' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_TEMPLATE_ID = 696;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Mood Code' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_MOOD_CODE = 697;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Code P' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_CODE_P = 698;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Code' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_CODE = 699;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Value' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_VALUE = 700;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Value P' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_VALUE_P = 701;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Prior Administration Observation Template Id' of 'Medication Prior Administration Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION__MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION_TEMPLATE_ID = 702;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Prior Administration Observation Mood Code' of 'Medication Prior Administration Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION__MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION_MOOD_CODE = 703;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Prior Administration Observation Code P' of 'Medication Prior Administration Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION__MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION_CODE_P = 704;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Prior Administration Observation Code' of 'Medication Prior Administration Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION__MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION_CODE = 705;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Prior Administration Observation Value' of 'Medication Prior Administration Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION__MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION_VALUE = 706;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Body Weight Template Id' of 'Patient Body Weight'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BODY_WEIGHT__PATIENT_BODY_WEIGHT_TEMPLATE_ID = 707;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Body Weight Mood Code' of 'Patient Body Weight'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BODY_WEIGHT__PATIENT_BODY_WEIGHT_MOOD_CODE = 708;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Body Weight Code P' of 'Patient Body Weight'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BODY_WEIGHT__PATIENT_BODY_WEIGHT_CODE_P = 709;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Body Weight Code' of 'Patient Body Weight'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BODY_WEIGHT__PATIENT_BODY_WEIGHT_CODE = 710;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Body Weight Effective Time' of 'Patient Body Weight'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BODY_WEIGHT__PATIENT_BODY_WEIGHT_EFFECTIVE_TIME = 711;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Body Weight Value' of 'Patient Body Weight'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BODY_WEIGHT__PATIENT_BODY_WEIGHT_VALUE = 712;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Template Id' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_TEMPLATE_ID = 713;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Mood Code' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_MOOD_CODE = 714;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Code P' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_CODE_P = 715;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Code' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_CODE = 716;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Value' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_VALUE = 717;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Value P' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_VALUE_P = 718;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Template Id' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_TEMPLATE_ID = 719;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Mood Code' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_MOOD_CODE = 720;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Code P' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_CODE_P = 721;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Code' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_CODE = 722;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Effective Time' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_EFFECTIVE_TIME = 723;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Value' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_VALUE = 724;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Value P' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_VALUE_P = 725;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Template Id' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_TEMPLATE_ID = 726;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Mood Code' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_MOOD_CODE = 727;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Code P' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_CODE_P = 728;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Code' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_CODE = 729;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Effective Time' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_EFFECTIVE_TIME = 730;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Value' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_VALUE = 731;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Template Id' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_TEMPLATE_ID = 732;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Mood Code' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_MOOD_CODE = 733;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Code P' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_CODE_P = 734;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Code' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_CODE = 735;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Effective Time' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_EFFECTIVE_TIME = 736;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Value' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_VALUE = 737;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Value P' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_VALUE_P = 738;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Template Id' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_TEMPLATE_ID = 739;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Mood Code' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_MOOD_CODE = 740;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Code P' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_CODE_P = 741;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Code' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_CODE = 742;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Effective Time' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_EFFECTIVE_TIME = 743;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Value' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_VALUE = 744;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Value P' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_VALUE_P = 745;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Template Id' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_TEMPLATE_ID = 746;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Mood Code' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_MOOD_CODE = 747;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Code' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_CODE = 748;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Effective Time' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_EFFECTIVE_TIME = 749;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Value' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_VALUE = 750;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Value P' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_VALUE_P = 751;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Target Site Code' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_TARGET_SITE_CODE = 752;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Target Site Code P' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_TARGET_SITE_CODE_P = 753;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Template Id' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_TEMPLATE_ID = 754;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Mood Code' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_MOOD_CODE = 755;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Code P' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_CODE_P = 756;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Code' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_CODE = 757;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Effective Time' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_EFFECTIVE_TIME = 758;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Value' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_VALUE = 759;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Value P' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_VALUE_P = 760;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Template Id' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_TEMPLATE_ID = 761;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Mood Code' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_MOOD_CODE = 762;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Code P' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_CODE_P = 763;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Code' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_CODE = 764;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Effective Time' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_EFFECTIVE_TIME = 765;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Value' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_VALUE = 766;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Value P' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_VALUE_P = 767;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Target Site Code' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_TARGET_SITE_CODE = 768;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Target Site Code P' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_TARGET_SITE_CODE_P = 769;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Template Id' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_TEMPLATE_ID = 770;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Mood Code' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_MOOD_CODE = 771;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Code P' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_CODE_P = 772;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Code' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_CODE = 773;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Effective Time' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_EFFECTIVE_TIME = 774;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Value' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_VALUE = 775;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Value P' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_VALUE_P = 776;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Target Site Code' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_TARGET_SITE_CODE = 777;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Target Site Code P' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_TARGET_SITE_CODE_P = 778;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Template Id' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_TEMPLATE_ID = 779;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Mood Code' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_MOOD_CODE = 780;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Code P' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_CODE_P = 781;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Code' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_CODE = 782;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Effective Time' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_EFFECTIVE_TIME = 783;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Value' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_VALUE = 784;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Value P' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_VALUE_P = 785;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Target Site Code' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_TARGET_SITE_CODE = 786;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Target Site Code P' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_TARGET_SITE_CODE_P = 787;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Template Id' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_TEMPLATE_ID = 788;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Mood Code' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_MOOD_CODE = 789;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Code P' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_CODE_P = 790;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Code' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_CODE = 791;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Effective Time' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_EFFECTIVE_TIME = 792;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Value' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_VALUE = 793;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Value P' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_VALUE_P = 794;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Timing Template Id' of 'Cardiac Arrest Timing'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_TIMING__CARDIAC_ARREST_TIMING_TEMPLATE_ID = 795;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Timing Mood Code' of 'Cardiac Arrest Timing'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_TIMING__CARDIAC_ARREST_TIMING_MOOD_CODE = 796;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Timing Code' of 'Cardiac Arrest Timing'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_TIMING__CARDIAC_ARREST_TIMING_CODE = 797;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Timing Value' of 'Cardiac Arrest Timing'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_TIMING__CARDIAC_ARREST_TIMING_VALUE = 798;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cause Template Id' of 'Cardiac Arrest Cause'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_CAUSE__CARDIAC_ARREST_CAUSE_TEMPLATE_ID = 799;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cause Mood Code' of 'Cardiac Arrest Cause'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_CAUSE__CARDIAC_ARREST_CAUSE_MOOD_CODE = 800;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cause Code' of 'Cardiac Arrest Cause'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_CAUSE__CARDIAC_ARREST_CAUSE_CODE = 801;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cause Value' of 'Cardiac Arrest Cause'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_CAUSE__CARDIAC_ARREST_CAUSE_VALUE = 802;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cause Value P' of 'Cardiac Arrest Cause'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_CAUSE__CARDIAC_ARREST_CAUSE_VALUE_P = 803;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Arrest Rhythm Template Id' of 'Arrest Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ARREST_RHYTHM__ARREST_RHYTHM_TEMPLATE_ID = 804;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Arrest Rhythm Mood Code' of 'Arrest Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ARREST_RHYTHM__ARREST_RHYTHM_MOOD_CODE = 805;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Arrest Rhythm Code' of 'Arrest Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ARREST_RHYTHM__ARREST_RHYTHM_CODE = 806;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Arrest Rhythm Value' of 'Arrest Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ARREST_RHYTHM__ARREST_RHYTHM_VALUE = 807;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Return Of Spontaneous Circulation Template Id' of 'Return Of Spontaneous Circulation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RETURN_OF_SPONTANEOUS_CIRCULATION__RETURN_OF_SPONTANEOUS_CIRCULATION_TEMPLATE_ID = 808;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Return Of Spontaneous Circulation Mood Code' of 'Return Of Spontaneous Circulation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RETURN_OF_SPONTANEOUS_CIRCULATION__RETURN_OF_SPONTANEOUS_CIRCULATION_MOOD_CODE = 809;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Return Of Spontaneous Circulation Code P' of 'Return Of Spontaneous Circulation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RETURN_OF_SPONTANEOUS_CIRCULATION__RETURN_OF_SPONTANEOUS_CIRCULATION_CODE_P = 810;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Return Of Spontaneous Circulation Code' of 'Return Of Spontaneous Circulation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RETURN_OF_SPONTANEOUS_CIRCULATION__RETURN_OF_SPONTANEOUS_CIRCULATION_CODE = 811;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Return Of Spontaneous Circulation Value' of 'Return Of Spontaneous Circulation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RETURN_OF_SPONTANEOUS_CIRCULATION__RETURN_OF_SPONTANEOUS_CIRCULATION_VALUE = 812;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Return Of Spontaneous Circulation Value P' of 'Return Of Spontaneous Circulation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RETURN_OF_SPONTANEOUS_CIRCULATION__RETURN_OF_SPONTANEOUS_CIRCULATION_VALUE_P = 813;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Rhythm Template Id' of 'Destination Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_RHYTHM__DESTINATION_RHYTHM_TEMPLATE_ID = 814;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Rhythm Mood Code' of 'Destination Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_RHYTHM__DESTINATION_RHYTHM_MOOD_CODE = 815;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Rhythm Code' of 'Destination Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_RHYTHM__DESTINATION_RHYTHM_CODE = 816;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Rhythm Value' of 'Destination Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_RHYTHM__DESTINATION_RHYTHM_VALUE = 817;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Rhythm Value P' of 'Destination Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_RHYTHM__DESTINATION_RHYTHM_VALUE_P = 818;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Template Id' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_TEMPLATE_ID = 819;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Mood Code' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_MOOD_CODE = 820;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Code P' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_CODE_P = 821;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Code' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_CODE = 822;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Value' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_VALUE = 823;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Value P' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_VALUE_P = 824;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Indicator Template Id' of 'Procedure Prior Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PRIOR_INDICATOR__PROCEDURE_PRIOR_INDICATOR_TEMPLATE_ID = 825;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Indicator Mood Code' of 'Procedure Prior Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PRIOR_INDICATOR__PROCEDURE_PRIOR_INDICATOR_MOOD_CODE = 826;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Indicator Code P' of 'Procedure Prior Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PRIOR_INDICATOR__PROCEDURE_PRIOR_INDICATOR_CODE_P = 827;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Indicator Code' of 'Procedure Prior Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PRIOR_INDICATOR__PROCEDURE_PRIOR_INDICATOR_CODE = 828;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Indicator Value' of 'Procedure Prior Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PRIOR_INDICATOR__PROCEDURE_PRIOR_INDICATOR_VALUE = 829;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Observation Template Id' of 'Procedure Number Of Attempts Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION__PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION_TEMPLATE_ID = 830;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Observation Mood Code' of 'Procedure Number Of Attempts Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION__PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION_MOOD_CODE = 831;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Observation Code P' of 'Procedure Number Of Attempts Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION__PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION_CODE_P = 832;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Observation Code' of 'Procedure Number Of Attempts Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION__PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION_CODE = 833;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Observation Value' of 'Procedure Number Of Attempts Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION__PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION_VALUE = 834;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Observation Template Id' of 'Procedure Successful Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SUCCESSFUL_OBSERVATION__PROCEDURE_SUCCESSFUL_OBSERVATION_TEMPLATE_ID = 835;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Observation Mood Code' of 'Procedure Successful Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SUCCESSFUL_OBSERVATION__PROCEDURE_SUCCESSFUL_OBSERVATION_MOOD_CODE = 836;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Observation Code P' of 'Procedure Successful Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SUCCESSFUL_OBSERVATION__PROCEDURE_SUCCESSFUL_OBSERVATION_CODE_P = 837;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Observation Code' of 'Procedure Successful Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SUCCESSFUL_OBSERVATION__PROCEDURE_SUCCESSFUL_OBSERVATION_CODE = 838;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Observation Value' of 'Procedure Successful Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SUCCESSFUL_OBSERVATION__PROCEDURE_SUCCESSFUL_OBSERVATION_VALUE = 839;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Template Id' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_TEMPLATE_ID = 840;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Mood Code' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_MOOD_CODE = 841;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Code P' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_CODE_P = 842;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Code' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_CODE = 843;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Value' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_VALUE = 844;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Value P' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_VALUE_P = 845;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Template Id' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_TEMPLATE_ID = 846;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Mood Code' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_MOOD_CODE = 847;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Code P' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_CODE_P = 848;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Code' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_CODE = 849;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Value' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_VALUE = 850;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Value P' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_VALUE_P = 851;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Template Id' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_TEMPLATE_ID = 852;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Mood Code' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_MOOD_CODE = 853;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Code P' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_CODE_P = 854;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Code' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_CODE = 855;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Effective Time' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_EFFECTIVE_TIME = 856;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Value' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_VALUE = 857;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Method Code P' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_METHOD_CODE_P = 858;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Method Code' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_METHOD_CODE = 859;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Template Id' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_TEMPLATE_ID = 860;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Mood Code' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_MOOD_CODE = 861;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Code P' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_CODE_P = 862;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Code' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_CODE = 863;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Value' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_VALUE = 864;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Value P' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_VALUE_P = 865;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Template Id' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_TEMPLATE_ID = 866;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Mood Code' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_MOOD_CODE = 867;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Code P' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_CODE_P = 868;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Code' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_CODE = 869;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Value' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_VALUE = 870;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Value P' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_VALUE_P = 871;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Template Id' of 'Complaint Duration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_DURATION__COMPLAINT_DURATION_TEMPLATE_ID = 872;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Mood Code' of 'Complaint Duration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_DURATION__COMPLAINT_DURATION_MOOD_CODE = 873;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Code P' of 'Complaint Duration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_DURATION__COMPLAINT_DURATION_CODE_P = 874;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Code' of 'Complaint Duration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_DURATION__COMPLAINT_DURATION_CODE = 875;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Value' of 'Complaint Duration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_DURATION__COMPLAINT_DURATION_VALUE = 876;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Template Id' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_TEMPLATE_ID = 877;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Mood Code' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_MOOD_CODE = 878;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Code P' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_CODE_P = 879;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Code' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_CODE = 880;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Value' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_VALUE = 881;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Value P' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_VALUE_P = 882;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Template Id' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_TEMPLATE_ID = 883;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Mood Code' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_MOOD_CODE = 884;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Code P' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_CODE_P = 885;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Code' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_CODE = 886;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Value' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_VALUE = 887;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Value P' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_VALUE_P = 888;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Template Id' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_TEMPLATE_ID = 889;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Mood Code' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_MOOD_CODE = 890;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Code' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_CODE = 891;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Effective Time' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_EFFECTIVE_TIME = 892;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Value' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_VALUE = 893;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Method Code' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_METHOD_CODE = 894;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Method Code P' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_METHOD_CODE_P = 895;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Template Id' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_TEMPLATE_ID = 896;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Mood Code' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_MOOD_CODE = 897;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Code P' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_CODE_P = 898;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Code' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_CODE = 899;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Effective Time' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_EFFECTIVE_TIME = 900;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Value' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_VALUE = 901;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Respiratory Rate Template Id' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__RESPIRATORY_RATE_TEMPLATE_ID = 902;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Respiratory Rate Mood Code' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__RESPIRATORY_RATE_MOOD_CODE = 903;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Respiratory Rate Code P' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__RESPIRATORY_RATE_CODE_P = 904;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Respiratory Rate Code' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__RESPIRATORY_RATE_CODE = 905;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Respiratory Rate Effective Time' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__RESPIRATORY_RATE_EFFECTIVE_TIME = 906;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Respiratory Rate Value' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__RESPIRATORY_RATE_VALUE = 907;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Body Temperature Template Id' of 'Body Temperature'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BODY_TEMPERATURE__BODY_TEMPERATURE_TEMPLATE_ID = 908;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Body Temperature Mood Code' of 'Body Temperature'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BODY_TEMPERATURE__BODY_TEMPERATURE_MOOD_CODE = 909;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Body Temperature Code' of 'Body Temperature'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BODY_TEMPERATURE__BODY_TEMPERATURE_CODE = 910;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Body Temperature Effective Time' of 'Body Temperature'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BODY_TEMPERATURE__BODY_TEMPERATURE_EFFECTIVE_TIME = 911;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Body Temperature Value' of 'Body Temperature'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BODY_TEMPERATURE__BODY_TEMPERATURE_VALUE = 912;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Oxygen Saturation Template Id' of 'Oxygen Saturation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OXYGEN_SATURATION__OXYGEN_SATURATION_TEMPLATE_ID = 913;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Oxygen Saturation Mood Code' of 'Oxygen Saturation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OXYGEN_SATURATION__OXYGEN_SATURATION_MOOD_CODE = 914;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Oxygen Saturation Code P' of 'Oxygen Saturation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OXYGEN_SATURATION__OXYGEN_SATURATION_CODE_P = 915;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Oxygen Saturation Code' of 'Oxygen Saturation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OXYGEN_SATURATION__OXYGEN_SATURATION_CODE = 916;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Oxygen Saturation Effective Time' of 'Oxygen Saturation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OXYGEN_SATURATION__OXYGEN_SATURATION_EFFECTIVE_TIME = 917;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Oxygen Saturation Value' of 'Oxygen Saturation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OXYGEN_SATURATION__OXYGEN_SATURATION_VALUE = 918;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Template Id' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_TEMPLATE_ID = 919;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Mood Code' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_MOOD_CODE = 920;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Code P' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_CODE_P = 921;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Code' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_CODE = 922;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Value' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_VALUE = 923;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Value P' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_VALUE_P = 924;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Name Template Id' of 'Dispatch Location Name'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_NAME__DISPATCH_LOCATION_NAME_TEMPLATE_ID = 925;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Name Mood Code' of 'Dispatch Location Name'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_NAME__DISPATCH_LOCATION_NAME_MOOD_CODE = 926;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Name Code' of 'Dispatch Location Name'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_NAME__DISPATCH_LOCATION_NAME_CODE = 927;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Name Value' of 'Dispatch Location Name'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_NAME__DISPATCH_LOCATION_NAME_VALUE = 928;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Latitude Template Id' of 'Dispatch Location Latitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LATITUDE__DISPATCH_LOCATION_LATITUDE_TEMPLATE_ID = 929;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Latitude Mood Code' of 'Dispatch Location Latitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LATITUDE__DISPATCH_LOCATION_LATITUDE_MOOD_CODE = 930;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Latitude Code' of 'Dispatch Location Latitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LATITUDE__DISPATCH_LOCATION_LATITUDE_CODE = 931;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Latitude Value' of 'Dispatch Location Latitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LATITUDE__DISPATCH_LOCATION_LATITUDE_VALUE = 932;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Longitude Template Id' of 'Dispatch Location Longitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LONGITUDE__DISPATCH_LOCATION_LONGITUDE_TEMPLATE_ID = 933;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Longitude Mood Code' of 'Dispatch Location Longitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LONGITUDE__DISPATCH_LOCATION_LONGITUDE_MOOD_CODE = 934;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Longitude Code' of 'Dispatch Location Longitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LONGITUDE__DISPATCH_LOCATION_LONGITUDE_CODE = 935;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Longitude Value' of 'Dispatch Location Longitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LONGITUDE__DISPATCH_LOCATION_LONGITUDE_VALUE = 936;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Template Id' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_TEMPLATE_ID = 937;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Mood Code' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_MOOD_CODE = 938;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Code P' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_CODE_P = 939;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Code' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_CODE = 940;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Value' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_VALUE = 941;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Value P' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_VALUE_P = 942;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Template Id' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_TEMPLATE_ID = 943;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Mood Code' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_MOOD_CODE = 944;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Code P' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_CODE_P = 945;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Code' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_CODE = 946;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Value' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_VALUE = 947;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Value P' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_VALUE_P = 948;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Template Id' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_TEMPLATE_ID = 949;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Mood Code' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_MOOD_CODE = 950;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Code P' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_CODE_P = 951;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Code' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_CODE = 952;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Value' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_VALUE = 953;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Value P' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_VALUE_P = 954;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Template Id' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_TEMPLATE_ID = 955;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Mood Code' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_MOOD_CODE = 956;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Code P' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_CODE_P = 957;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Code' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_CODE = 958;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Value' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_VALUE = 959;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Value P' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_VALUE_P = 960;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Template Id' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_TEMPLATE_ID = 961;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Mood Code' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_MOOD_CODE = 962;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Code P' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_CODE_P = 963;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Code' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_CODE = 964;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Value' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_VALUE = 965;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Value P' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_VALUE_P = 966;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Total Template Id' of 'Glasgow Total'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_TOTAL__GLASGOW_TOTAL_TEMPLATE_ID = 967;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Total Mood Code' of 'Glasgow Total'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_TOTAL__GLASGOW_TOTAL_MOOD_CODE = 968;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Total Code P' of 'Glasgow Total'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_TOTAL__GLASGOW_TOTAL_CODE_P = 969;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Total Code' of 'Glasgow Total'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_TOTAL__GLASGOW_TOTAL_CODE = 970;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Total Value' of 'Glasgow Total'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_TOTAL__GLASGOW_TOTAL_VALUE = 971;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Template Id' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_TEMPLATE_ID = 972;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Mood Code' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_MOOD_CODE = 973;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Code P' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_CODE_P = 974;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Code' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_CODE = 975;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Value' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_VALUE = 976;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Value P' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_VALUE_P = 977;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Eye Template Id' of 'Glasgow Eye'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_EYE__GLASGOW_EYE_TEMPLATE_ID = 978;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Eye Mood Code' of 'Glasgow Eye'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_EYE__GLASGOW_EYE_MOOD_CODE = 979;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Eye Code P' of 'Glasgow Eye'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_EYE__GLASGOW_EYE_CODE_P = 980;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Eye Code' of 'Glasgow Eye'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_EYE__GLASGOW_EYE_CODE = 981;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Eye Value' of 'Glasgow Eye'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_EYE__GLASGOW_EYE_VALUE = 982;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Motor Template Id' of 'Glasgow Motor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_MOTOR__GLASGOW_MOTOR_TEMPLATE_ID = 983;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Motor Mood Code' of 'Glasgow Motor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_MOTOR__GLASGOW_MOTOR_MOOD_CODE = 984;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Motor Code P' of 'Glasgow Motor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_MOTOR__GLASGOW_MOTOR_CODE_P = 985;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Motor Code' of 'Glasgow Motor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_MOTOR__GLASGOW_MOTOR_CODE = 986;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Motor Value' of 'Glasgow Motor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_MOTOR__GLASGOW_MOTOR_VALUE = 987;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Verbal Template Id' of 'Glasgow Verbal'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_VERBAL__GLASGOW_VERBAL_TEMPLATE_ID = 988;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Verbal Mood Code' of 'Glasgow Verbal'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_VERBAL__GLASGOW_VERBAL_MOOD_CODE = 989;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Verbal Code P' of 'Glasgow Verbal'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_VERBAL__GLASGOW_VERBAL_CODE_P = 990;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Verbal Code' of 'Glasgow Verbal'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_VERBAL__GLASGOW_VERBAL_CODE = 991;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Verbal Value' of 'Glasgow Verbal'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_VERBAL__GLASGOW_VERBAL_VALUE = 992;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Template Id' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_TEMPLATE_ID = 993;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Mood Code' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_MOOD_CODE = 994;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Code P' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_CODE_P = 995;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Code' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_CODE = 996;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Effective Time' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_EFFECTIVE_TIME = 997;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Value' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_VALUE = 998;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Value P' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_VALUE_P = 999;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Method Code' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_METHOD_CODE = 1000;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Method Code P' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_METHOD_CODE_P = 1001;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pain Score Template Id' of 'Pain Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAIN_SCORE__PAIN_SCORE_TEMPLATE_ID = 1002;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pain Score Mood Code' of 'Pain Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAIN_SCORE__PAIN_SCORE_MOOD_CODE = 1003;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pain Score Code P' of 'Pain Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAIN_SCORE__PAIN_SCORE_CODE_P = 1004;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pain Score Code' of 'Pain Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAIN_SCORE__PAIN_SCORE_CODE = 1005;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pain Score Effective Time' of 'Pain Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAIN_SCORE__PAIN_SCORE_EFFECTIVE_TIME = 1006;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pain Score Value' of 'Pain Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAIN_SCORE__PAIN_SCORE_VALUE = 1007;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Template Id' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_TEMPLATE_ID = 1008;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Mood Code' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_MOOD_CODE = 1009;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Code P' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_CODE_P = 1010;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Code' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_CODE = 1011;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Effective Time' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_EFFECTIVE_TIME = 1012;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Value' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_VALUE = 1013;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Value P' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_VALUE_P = 1014;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Template Id' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_TEMPLATE_ID = 1015;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Mood Code' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_MOOD_CODE = 1016;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Code P' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_CODE_P = 1017;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Code' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_CODE = 1018;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Effective Time' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_EFFECTIVE_TIME = 1019;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Value' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_VALUE = 1020;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Template Id' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_TEMPLATE_ID = 1021;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Mood Code' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_MOOD_CODE = 1022;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Code P' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_CODE_P = 1023;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Code' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_CODE = 1024;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Effective Time' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_EFFECTIVE_TIME = 1025;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Value' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_VALUE = 1026;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Template Id' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_TEMPLATE_ID = 1027;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Mood Code' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_MOOD_CODE = 1028;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Code P' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_CODE_P = 1029;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Code' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_CODE = 1030;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Effective Time' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_EFFECTIVE_TIME = 1031;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Value' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_VALUE = 1032;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Participant1' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_PARTICIPANT1 = 1033;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Template Id' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_TEMPLATE_ID = 1034;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Mood Code' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_MOOD_CODE = 1035;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Code P' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_CODE_P = 1036;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Code' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_CODE = 1037;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Effective Time' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_EFFECTIVE_TIME = 1038;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Value' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_VALUE = 1039;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Value P' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_VALUE_P = 1040;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Method Code' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_METHOD_CODE = 1041;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Method Code P' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_METHOD_CODE_P = 1042;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Template Id' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_TEMPLATE_ID = 1043;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Effective Time' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_EFFECTIVE_TIME = 1044;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Component4' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_COMPONENT4 = 1045;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Component4' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_COMPONENT4 = 1046;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Component4' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_COMPONENT4 = 1047;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Component4' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_COMPONENT4 = 1048;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Component4' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_COMPONENT4 = 1081;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Component4' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_COMPONENT4 = 1082;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Component4' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_COMPONENT4 = 1083;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Component4' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_COMPONENT4 = 1049;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Component4' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_COMPONENT4 = 1085;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Beginning Odometer Reading Template Id' of 'Response Beginning Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_BEGINNING_ODOMETER_READING__RESPONSE_BEGINNING_ODOMETER_READING_TEMPLATE_ID = 1050;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Beginning Odometer Reading Mood Code' of 'Response Beginning Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_BEGINNING_ODOMETER_READING__RESPONSE_BEGINNING_ODOMETER_READING_MOOD_CODE = 1051;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Beginning Odometer Reading Code P' of 'Response Beginning Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_BEGINNING_ODOMETER_READING__RESPONSE_BEGINNING_ODOMETER_READING_CODE_P = 1052;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Beginning Odometer Reading Code' of 'Response Beginning Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_BEGINNING_ODOMETER_READING__RESPONSE_BEGINNING_ODOMETER_READING_CODE = 1053;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Beginning Odometer Reading Value' of 'Response Beginning Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_BEGINNING_ODOMETER_READING__RESPONSE_BEGINNING_ODOMETER_READING_VALUE = 1054;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response On Scene Odometer Reading Template Id' of 'Response On Scene Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ON_SCENE_ODOMETER_READING__RESPONSE_ON_SCENE_ODOMETER_READING_TEMPLATE_ID = 1055;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response On Scene Odometer Reading Mood Code' of 'Response On Scene Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ON_SCENE_ODOMETER_READING__RESPONSE_ON_SCENE_ODOMETER_READING_MOOD_CODE = 1056;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response On Scene Odometer Reading Code P' of 'Response On Scene Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ON_SCENE_ODOMETER_READING__RESPONSE_ON_SCENE_ODOMETER_READING_CODE_P = 1057;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response On Scene Odometer Reading Code' of 'Response On Scene Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ON_SCENE_ODOMETER_READING__RESPONSE_ON_SCENE_ODOMETER_READING_CODE = 1058;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response On Scene Odometer Reading Value' of 'Response On Scene Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ON_SCENE_ODOMETER_READING__RESPONSE_ON_SCENE_ODOMETER_READING_VALUE = 1059;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Destination Odometer Reading Template Id' of 'Response Destination Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DESTINATION_ODOMETER_READING__RESPONSE_DESTINATION_ODOMETER_READING_TEMPLATE_ID = 1060;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Destination Odometer Reading Mood Code' of 'Response Destination Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DESTINATION_ODOMETER_READING__RESPONSE_DESTINATION_ODOMETER_READING_MOOD_CODE = 1061;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Destination Odometer Reading Code P' of 'Response Destination Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DESTINATION_ODOMETER_READING__RESPONSE_DESTINATION_ODOMETER_READING_CODE_P = 1062;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Destination Odometer Reading Code' of 'Response Destination Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DESTINATION_ODOMETER_READING__RESPONSE_DESTINATION_ODOMETER_READING_CODE = 1063;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Destination Odometer Reading Value' of 'Response Destination Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DESTINATION_ODOMETER_READING__RESPONSE_DESTINATION_ODOMETER_READING_VALUE = 1064;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Outcome Template Id' of 'Cardiac Arrest Outcome'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_OUTCOME__CARDIAC_ARREST_OUTCOME_TEMPLATE_ID = 1065;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Outcome Code P' of 'Cardiac Arrest Outcome'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_OUTCOME__CARDIAC_ARREST_OUTCOME_CODE_P = 1066;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Outcome Code' of 'Cardiac Arrest Outcome'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_OUTCOME__CARDIAC_ARREST_OUTCOME_CODE = 1067;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Outcome Mood Code' of 'Cardiac Arrest Outcome'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_OUTCOME__CARDIAC_ARREST_OUTCOME_MOOD_CODE = 1068;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Outcome Value' of 'Cardiac Arrest Outcome'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_OUTCOME__CARDIAC_ARREST_OUTCOME_VALUE = 1069;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Outcome Value P' of 'Cardiac Arrest Outcome'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_OUTCOME__CARDIAC_ARREST_OUTCOME_VALUE_P = 1070;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Qualifier Template Id' of 'Transport Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_QUALIFIER__TRANSPORT_MODE_QUALIFIER_TEMPLATE_ID = 1071;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Qualifier Class Code' of 'Transport Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_QUALIFIER__TRANSPORT_MODE_QUALIFIER_CLASS_CODE = 1072;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Qualifier Code P' of 'Transport Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_QUALIFIER__TRANSPORT_MODE_QUALIFIER_CODE_P = 1073;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Qualifier Code' of 'Transport Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_QUALIFIER__TRANSPORT_MODE_QUALIFIER_CODE = 1074;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Qualifier Mood Code' of 'Transport Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_QUALIFIER__TRANSPORT_MODE_QUALIFIER_MOOD_CODE = 1075;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Qualifier Value' of 'Transport Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_QUALIFIER__TRANSPORT_MODE_QUALIFIER_VALUE = 1076;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Qualifier Value P' of 'Transport Mode Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_QUALIFIER__TRANSPORT_MODE_QUALIFIER_VALUE_P = 1077;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Template Id' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_TEMPLATE_ID = 1078;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Mood Code' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_MOOD_CODE = 1079;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Code P' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_CODE_P = 1080;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Code' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_CODE = 1081;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Effective Time' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_EFFECTIVE_TIME = 1082;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Value' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_VALUE = 1083;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Value P' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_VALUE_P = 1084;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Template Id' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_TEMPLATE_ID = 1085;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Mood Code' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_MOOD_CODE = 1086;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Effective Time' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_EFFECTIVE_TIME = 1087;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1088;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1124;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component42' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT42 = 1089;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1090;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1091;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1092;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1093;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1094;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1126;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1127;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1095;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1129;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1130;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Component4' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	// public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_COMPONENT4 = 1131;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Lung Assessment Template Id' of 'Lung Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LUNG_ASSESSMENT__LUNG_ASSESSMENT_TEMPLATE_ID = 1096;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Lung Assessment Code P' of 'Lung Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LUNG_ASSESSMENT__LUNG_ASSESSMENT_CODE_P = 1097;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Lung Assessment Code' of 'Lung Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LUNG_ASSESSMENT__LUNG_ASSESSMENT_CODE = 1098;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Lung Assessment Value' of 'Lung Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LUNG_ASSESSMENT__LUNG_ASSESSMENT_VALUE = 1099;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Lung Assessment Value P' of 'Lung Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LUNG_ASSESSMENT__LUNG_ASSESSMENT_VALUE_P = 1100;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Lung Assessment Target Site Code P' of 'Lung Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LUNG_ASSESSMENT__LUNG_ASSESSMENT_TARGET_SITE_CODE_P = 1101;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Lung Assessment Target Site Code' of 'Lung Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LUNG_ASSESSMENT__LUNG_ASSESSMENT_TARGET_SITE_CODE = 1102;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest Assessment Template Id' of 'Chest Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_ASSESSMENT__CHEST_ASSESSMENT_TEMPLATE_ID = 1103;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest Assessment Code P' of 'Chest Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_ASSESSMENT__CHEST_ASSESSMENT_CODE_P = 1104;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest Assessment Code' of 'Chest Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_ASSESSMENT__CHEST_ASSESSMENT_CODE = 1105;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest Assessment Value' of 'Chest Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_ASSESSMENT__CHEST_ASSESSMENT_VALUE = 1106;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest Assessment Value P' of 'Chest Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_ASSESSMENT__CHEST_ASSESSMENT_VALUE_P = 1107;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest Assessment Target Site Code' of 'Chest Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_ASSESSMENT__CHEST_ASSESSMENT_TARGET_SITE_CODE = 1108;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest Assessment Target Site Code P' of 'Chest Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_ASSESSMENT__CHEST_ASSESSMENT_TARGET_SITE_CODE_P = 1109;

	/**
	 * A constant with a fixed name that can be used as the base value for additional hand written constants.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final int GENERATED_DIAGNOSTIC_CODE_COUNT = 1109;

	/**
	 * A constant with a fixed name that can be used as the base value for additional hand written constants in a derived class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static final int DIAGNOSTIC_CODE_COUNT = GENERATED_DIAGNOSTIC_CODE_COUNT;

	/**
	 * The cached base package validator.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CDAValidator cdaValidator;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EmspcrValidator() {
		super();
		cdaValidator = CDAValidator.INSTANCE;
	}

	/**
	 * Returns the package of this validator switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EPackage getEPackage() {
	  return EmspcrPackage.eINSTANCE;
	}

	/**
	 * Calls <code>validateXXX</code> for the corresponding classifier of the model.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected boolean validate(int classifierID, Object value, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		switch (classifierID) {
			case EmspcrPackage.PATIENT_CARE_REPORT:
				return validatePatientCareReport((PatientCareReport)value, diagnostics, context);
			case EmspcrPackage.EMS_PAST_MEDICAL_HISTORY_SECTION:
				return validateEMSPastMedicalHistorySection((EMSPastMedicalHistorySection)value, diagnostics, context);
			case EmspcrPackage.EXISTENCE_OF_HISTORY_OF_CONDITION_OR_SURGERY:
				return validateExistenceOfHistoryOfConditionOrSurgery((ExistenceOfHistoryOfConditionOrSurgery)value, diagnostics, context);
			case EmspcrPackage.MEDICAL_SURGICAL_HISTORY:
				return validateMedicalSurgicalHistory((MedicalSurgicalHistory)value, diagnostics, context);
			case EmspcrPackage.EMS_BILLING_SECTION:
				return validateEMSBillingSection((EMSBillingSection)value, diagnostics, context);
			case EmspcrPackage.BILLING_CONDITION:
				return validateBillingCondition((BillingCondition)value, diagnostics, context);
			case EmspcrPackage.LEVEL_OF_SERVICE_OBSERVATION:
				return validateLevelOfServiceObservation((LevelOfServiceObservation)value, diagnostics, context);
			case EmspcrPackage.EMS_INJURY_INCIDENT_DESCRIPTION_SECTION:
				return validateEMSInjuryIncidentDescriptionSection((EMSInjuryIncidentDescriptionSection)value, diagnostics, context);
			case EmspcrPackage.INJURY_CAUSE_CATEGORY:
				return validateInjuryCauseCategory((InjuryCauseCategory)value, diagnostics, context);
			case EmspcrPackage.INJURY_MECHANISM:
				return validateInjuryMechanism((InjuryMechanism)value, diagnostics, context);
			case EmspcrPackage.TRAUMA_TRIAGE_CRITERIA_STEPS1AND2:
				return validateTraumaTriageCriteriaSteps1and2((TraumaTriageCriteriaSteps1and2)value, diagnostics, context);
			case EmspcrPackage.TRAUMA_TRIAGE_CRITERIA_STEPS3AND4:
				return validateTraumaTriageCriteriaSteps3and4((TraumaTriageCriteriaSteps3and4)value, diagnostics, context);
			case EmspcrPackage.VEHICLE_IMPACT_AREA:
				return validateVehicleImpactArea((VehicleImpactArea)value, diagnostics, context);
			case EmspcrPackage.PATIENT_LOCATION_IN_VEHICLE:
				return validatePatientLocationInVehicle((PatientLocationInVehicle)value, diagnostics, context);
			case EmspcrPackage.VEHICLE_OCCUPANT_SAFETY_EQUIPMENT:
				return validateVehicleOccupantSafetyEquipment((VehicleOccupantSafetyEquipment)value, diagnostics, context);
			case EmspcrPackage.AIRBAG_DEPLOYMENT_STATUS:
				return validateAirbagDeploymentStatus((AirbagDeploymentStatus)value, diagnostics, context);
			case EmspcrPackage.HEIGHT_OF_FALL:
				return validateHeightOfFall((HeightOfFall)value, diagnostics, context);
			case EmspcrPackage.DISASTER_TYPE:
				return validateDisasterType((DisasterType)value, diagnostics, context);
			case EmspcrPackage.EMS_CARDIAC_ARREST_EVENT_SECTION:
				return validateEMSCardiacArrestEventSection((EMSCardiacArrestEventSection)value, diagnostics, context);
			case EmspcrPackage.CARDIAC_ARREST:
				return validateCardiacArrest((CardiacArrest)value, diagnostics, context);
			case EmspcrPackage.EMS_ADVANCE_DIRECTIVES_SECTION:
				return validateEMSAdvanceDirectivesSection((EMSAdvanceDirectivesSection)value, diagnostics, context);
			case EmspcrPackage.ADVANCE_DIRECTIVE_OBSERVATION:
				return validateAdvanceDirectiveObservation((AdvanceDirectiveObservation)value, diagnostics, context);
			case EmspcrPackage.EMS_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION:
				return validateEMSAllergiesAndAdverseReactionsSection((EMSAllergiesAndAdverseReactionsSection)value, diagnostics, context);
			case EmspcrPackage.NON_DRUG_ALLERGY_ORGANIZER:
				return validateNonDrugAllergyOrganizer((NonDrugAllergyOrganizer)value, diagnostics, context);
			case EmspcrPackage.EXISTENCE_OF_KNOWN_NON_DRUG_ALLERGY:
				return validateExistenceOfKnownNonDrugAllergy((ExistenceOfKnownNonDrugAllergy)value, diagnostics, context);
			case EmspcrPackage.NON_DRUG_ALLERGY:
				return validateNonDrugAllergy((NonDrugAllergy)value, diagnostics, context);
			case EmspcrPackage.DRUG_ALLERGY_ORGANIZER:
				return validateDrugAllergyOrganizer((DrugAllergyOrganizer)value, diagnostics, context);
			case EmspcrPackage.EMS_CURRENT_MEDICATION_SECTION:
				return validateEMSCurrentMedicationSection((EMSCurrentMedicationSection)value, diagnostics, context);
			case EmspcrPackage.CURRENTLY_ON_MEDICATION:
				return validateCurrentlyOnMedication((CurrentlyOnMedication)value, diagnostics, context);
			case EmspcrPackage.CURRENT_MEDICATION:
				return validateCurrentMedication((CurrentMedication)value, diagnostics, context);
			case EmspcrPackage.EMS_SOCIAL_HISTORY_SECTION:
				return validateEMSSocialHistorySection((EMSSocialHistorySection)value, diagnostics, context);
			case EmspcrPackage.EXISTENCE_OF_DRUG_USE_INDICATION:
				return validateExistenceOfDrugUseIndication((ExistenceOfDrugUseIndication)value, diagnostics, context);
			case EmspcrPackage.DRUG_USE_INDICATION:
				return validateDrugUseIndication((DrugUseIndication)value, diagnostics, context);
			case EmspcrPackage.EMS_VITAL_SIGNS_SECTION:
				return validateEMSVitalSignsSection((EMSVitalSignsSection)value, diagnostics, context);
			case EmspcrPackage.VITAL_SIGNS_ORGANIZER:
				return validateVitalSignsOrganizer((VitalSignsOrganizer)value, diagnostics, context);
			case EmspcrPackage.EMS_PHYSICAL_ASSESSMENT_SECTION:
				return validateEMSPhysicalAssessmentSection((EMSPhysicalAssessmentSection)value, diagnostics, context);
			case EmspcrPackage.PHYSICAL_ASSESSMENT_ORGANIZER:
				return validatePhysicalAssessmentOrganizer((PhysicalAssessmentOrganizer)value, diagnostics, context);
			case EmspcrPackage.PATIENT_PREGNANCY:
				return validatePatientPregnancy((PatientPregnancy)value, diagnostics, context);
			case EmspcrPackage.LAST_ORAL_INTAKE:
				return validateLastOralIntake((LastOralIntake)value, diagnostics, context);
			case EmspcrPackage.PATIENT_AGE:
				return validatePatientAge((PatientAge)value, diagnostics, context);
			case EmspcrPackage.THROMBOLYTIC_CONTRAINDICATIONS:
				return validateThrombolyticContraindications((ThrombolyticContraindications)value, diagnostics, context);
			case EmspcrPackage.BARRIERS_TO_PATIENT_CARE:
				return validateBarriersToPatientCare((BarriersToPatientCare)value, diagnostics, context);
			case EmspcrPackage.EMS_MEDICATIONS_ADMINISTERED_SECTION:
				return validateEMSMedicationsAdministeredSection((EMSMedicationsAdministeredSection)value, diagnostics, context);
			case EmspcrPackage.MEDICATION_ADMINISTERED:
				return validateMedicationAdministered((MedicationAdministered)value, diagnostics, context);
			case EmspcrPackage.EMS_PROCEDURES_PERFORMED_SECTION:
				return validateEMSProceduresPerformedSection((EMSProceduresPerformedSection)value, diagnostics, context);
			case EmspcrPackage.PROCEDURE:
				return validateProcedure((Procedure)value, diagnostics, context);
			case EmspcrPackage.EMS_PATIENT_CARE_NARRATIVE_SECTION:
				return validateEMSPatientCareNarrativeSection((EMSPatientCareNarrativeSection)value, diagnostics, context);
			case EmspcrPackage.EMS_DISPATCH_SECTION:
				return validateEMSDispatchSection((EMSDispatchSection)value, diagnostics, context);
			case EmspcrPackage.EMERGENCY_MEDICAL_DISPATCH_OBSERVATION:
				return validateEmergencyMedicalDispatchObservation((EmergencyMedicalDispatchObservation)value, diagnostics, context);
			case EmspcrPackage.DISPATCH_REASON:
				return validateDispatchReason((DispatchReason)value, diagnostics, context);
			case EmspcrPackage.EMS_RESPONSE_SECTION:
				return validateEMSResponseSection((EMSResponseSection)value, diagnostics, context);
			case EmspcrPackage.DELAY_ORGANIZER:
				return validateDelayOrganizer((DelayOrganizer)value, diagnostics, context);
			case EmspcrPackage.DISPATCH_LOCATION_ORGANIZER:
				return validateDispatchLocationOrganizer((DispatchLocationOrganizer)value, diagnostics, context);
			case EmspcrPackage.RESPONSE_ODOMETER_READING_ORGANIZER:
				return validateResponseOdometerReadingOrganizer((ResponseOdometerReadingOrganizer)value, diagnostics, context);
			case EmspcrPackage.RESPONSE_MODE_TO_SCENE:
				return validateResponseModeToScene((ResponseModeToScene)value, diagnostics, context);
			case EmspcrPackage.RESPONSE_MODE_QUALIFIER:
				return validateResponseModeQualifier((ResponseModeQualifier)value, diagnostics, context);
			case EmspcrPackage.EMS_DISPOSITION_SECTION:
				return validateEMSDispositionSection((EMSDispositionSection)value, diagnostics, context);
			case EmspcrPackage.NUMBER_OF_PATIENTS_TRANSPORTED_OBSERVATION:
				return validateNumberOfPatientsTransportedObservation((NumberOfPatientsTransportedObservation)value, diagnostics, context);
			case EmspcrPackage.TRANSPORT_MODE_OBSERVATION:
				return validateTransportModeObservation((TransportModeObservation)value, diagnostics, context);
			case EmspcrPackage.TRANSPORT_METHOD_OBSERVATION:
				return validateTransportMethodObservation((TransportMethodObservation)value, diagnostics, context);
			case EmspcrPackage.REASON_FOR_CHOOSING_DESTINATION_OBSERVATION:
				return validateReasonForChoosingDestinationObservation((ReasonForChoosingDestinationObservation)value, diagnostics, context);
			case EmspcrPackage.PREARRIVAL_ACTIVATION_OBSERVATION:
				return validatePrearrivalActivationObservation((PrearrivalActivationObservation)value, diagnostics, context);
			case EmspcrPackage.PATIENT_CONDITION_AT_DESTINATION_OBSERVATION:
				return validatePatientConditionAtDestinationObservation((PatientConditionAtDestinationObservation)value, diagnostics, context);
			case EmspcrPackage.DESTINATION_HOSPITAL_CAPABILITY:
				return validateDestinationHospitalCapability((DestinationHospitalCapability)value, diagnostics, context);
			case EmspcrPackage.DESTINATION_WARD:
				return validateDestinationWard((DestinationWard)value, diagnostics, context);
			case EmspcrPackage.UNIT_DISPOSITION:
				return validateUnitDisposition((UnitDisposition)value, diagnostics, context);
			case EmspcrPackage.PATIENT_ENGAGEMENT:
				return validatePatientEngagement((PatientEngagement)value, diagnostics, context);
			case EmspcrPackage.CREW_DISPOSITION:
				return validateCrewDisposition((CrewDisposition)value, diagnostics, context);
			case EmspcrPackage.TRANSPORT_DISPOSITION:
				return validateTransportDisposition((TransportDisposition)value, diagnostics, context);
			case EmspcrPackage.EMS_PERSONNEL_ADVERSE_EVENT_SECTION:
				return validateEMSPersonnelAdverseEventSection((EMSPersonnelAdverseEventSection)value, diagnostics, context);
			case EmspcrPackage.ADVERSE_EVENT_INDICATOR:
				return validateAdverseEventIndicator((AdverseEventIndicator)value, diagnostics, context);
			case EmspcrPackage.ADVERSE_EVENT_TYPE_OBSERVATION:
				return validateAdverseEventTypeObservation((AdverseEventTypeObservation)value, diagnostics, context);
			case EmspcrPackage.EMS_PROTOCOL_SECTION:
				return validateEMSProtocolSection((EMSProtocolSection)value, diagnostics, context);
			case EmspcrPackage.PROTOCOL_OBSERVATION:
				return validateProtocolObservation((ProtocolObservation)value, diagnostics, context);
			case EmspcrPackage.CANDIDATE_PATIENT_REGISTRY_TYPE:
				return validateCandidatePatientRegistryType((CandidatePatientRegistryType)value, diagnostics, context);
			case EmspcrPackage.EMS_SCENE_SECTION:
				return validateEMSSceneSection((EMSSceneSection)value, diagnostics, context);
			case EmspcrPackage.FIRST_UNIT_INDICATOR:
				return validateFirstUnitIndicator((FirstUnitIndicator)value, diagnostics, context);
			case EmspcrPackage.SCENE_PATIENT_COUNT:
				return validateScenePatientCount((ScenePatientCount)value, diagnostics, context);
			case EmspcrPackage.MASS_CASUALTY_INDICATOR:
				return validateMassCasualtyIndicator((MassCasualtyIndicator)value, diagnostics, context);
			case EmspcrPackage.LOCATION_TYPE_OBSERVATION:
				return validateLocationTypeObservation((LocationTypeObservation)value, diagnostics, context);
			case EmspcrPackage.EMS_SITUATION_SECTION:
				return validateEMSSituationSection((EMSSituationSection)value, diagnostics, context);
			case EmspcrPackage.COMPLAINT:
				return validateComplaint((Complaint)value, diagnostics, context);
			case EmspcrPackage.POSSIBLE_INJURY:
				return validatePossibleInjury((PossibleInjury)value, diagnostics, context);
			case EmspcrPackage.PROVIDER_PRIMARY_IMPRESSION:
				return validateProviderPrimaryImpression((ProviderPrimaryImpression)value, diagnostics, context);
			case EmspcrPackage.PRIMARY_SYMPTOM:
				return validatePrimarySymptom((PrimarySymptom)value, diagnostics, context);
			case EmspcrPackage.OTHER_SYMPTOMS:
				return validateOtherSymptoms((OtherSymptoms)value, diagnostics, context);
			case EmspcrPackage.PROVIDER_SECONDARY_IMPRESSIONS:
				return validateProviderSecondaryImpressions((ProviderSecondaryImpressions)value, diagnostics, context);
			case EmspcrPackage.INITIAL_PATIENT_ACUITY:
				return validateInitialPatientAcuity((InitialPatientAcuity)value, diagnostics, context);
			case EmspcrPackage.EMS_TIMES_SECTION:
				return validateEMSTimesSection((EMSTimesSection)value, diagnostics, context);
			case EmspcrPackage.CALL_TIME:
				return validateCallTime((CallTime)value, diagnostics, context);
			case EmspcrPackage.UNIT_NOTIFIED_TIME:
				return validateUnitNotifiedTime((UnitNotifiedTime)value, diagnostics, context);
			case EmspcrPackage.UNIT_EN_ROUTE_TIME:
				return validateUnitEnRouteTime((UnitEnRouteTime)value, diagnostics, context);
			case EmspcrPackage.UNIT_ON_SCENE_TIME:
				return validateUnitOnSceneTime((UnitOnSceneTime)value, diagnostics, context);
			case EmspcrPackage.UNIT_AT_PATIENT_TIME:
				return validateUnitAtPatientTime((UnitAtPatientTime)value, diagnostics, context);
			case EmspcrPackage.UNIT_LEFT_SCENE_TIME:
				return validateUnitLeftSceneTime((UnitLeftSceneTime)value, diagnostics, context);
			case EmspcrPackage.PATIENT_ARRIVED_AT_DESTINATION_TIME:
				return validatePatientArrivedAtDestinationTime((PatientArrivedAtDestinationTime)value, diagnostics, context);
			case EmspcrPackage.UNIT_BACK_IN_SERVICE_TIME:
				return validateUnitBackInServiceTime((UnitBackInServiceTime)value, diagnostics, context);
			case EmspcrPackage.DISPATCH_NOTIFIED_TIME:
				return validateDispatchNotifiedTime((DispatchNotifiedTime)value, diagnostics, context);
			case EmspcrPackage.RESPONSE_ENDING_ODOMETER_READING:
				return validateResponseEndingOdometerReading((ResponseEndingOdometerReading)value, diagnostics, context);
			case EmspcrPackage.SYSTOLIC_BLOOD_PRESSURE:
				return validateSystolicBloodPressure((SystolicBloodPressure)value, diagnostics, context);
			case EmspcrPackage.PRIOR_AID_VITALS:
				return validatePriorAidVitals((PriorAidVitals)value, diagnostics, context);
			case EmspcrPackage.DRUG_ALLERGY:
				return validateDrugAllergy((DrugAllergy)value, diagnostics, context);
			case EmspcrPackage.EXISTENCE_OF_KNOWN_DRUG_ALLERGY_OBSERVATION:
				return validateExistenceOfKnownDrugAllergyObservation((ExistenceOfKnownDrugAllergyObservation)value, diagnostics, context);
			case EmspcrPackage.MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION:
				return validateMedicationNotAdministeredReasonObservation((MedicationNotAdministeredReasonObservation)value, diagnostics, context);
			case EmspcrPackage.MEDICATION_RESPONSE_OBSERVATION:
				return validateMedicationResponseObservation((MedicationResponseObservation)value, diagnostics, context);
			case EmspcrPackage.MEDICATION_COMPLICATION_OBSERVATION:
				return validateMedicationComplicationObservation((MedicationComplicationObservation)value, diagnostics, context);
			case EmspcrPackage.MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION:
				return validateMedicationPriorAdministrationObservation((MedicationPriorAdministrationObservation)value, diagnostics, context);
			case EmspcrPackage.PATIENT_BODY_WEIGHT:
				return validatePatientBodyWeight((PatientBodyWeight)value, diagnostics, context);
			case EmspcrPackage.LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS:
				return validateLengthBasedPatientBodyWeightClass((LengthBasedPatientBodyWeightClass)value, diagnostics, context);
			case EmspcrPackage.FACE_ASSESSMENT:
				return validateFaceAssessment((FaceAssessment)value, diagnostics, context);
			case EmspcrPackage.HEAD_ASSESSMENT:
				return validateHeadAssessment((HeadAssessment)value, diagnostics, context);
			case EmspcrPackage.NECK_ASSESSMENT:
				return validateNeckAssessment((NeckAssessment)value, diagnostics, context);
			case EmspcrPackage.HEART_ASSESSMENT:
				return validateHeartAssessment((HeartAssessment)value, diagnostics, context);
			case EmspcrPackage.ABDOMEN_ASSESSMENT:
				return validateAbdomenAssessment((AbdomenAssessment)value, diagnostics, context);
			case EmspcrPackage.PELVIC_AND_GENITOURINARY_ASSESSMENT:
				return validatePelvicAndGenitourinaryAssessment((PelvicAndGenitourinaryAssessment)value, diagnostics, context);
			case EmspcrPackage.BACK_AND_SPINE_ASSESSMENT:
				return validateBackAndSpineAssessment((BackAndSpineAssessment)value, diagnostics, context);
			case EmspcrPackage.EXTREMITIES_ASSESSMENT:
				return validateExtremitiesAssessment((ExtremitiesAssessment)value, diagnostics, context);
			case EmspcrPackage.EYE_ASSESSMENT:
				return validateEyeAssessment((EyeAssessment)value, diagnostics, context);
			case EmspcrPackage.MENTAL_STATUS_ASSESSMENT:
				return validateMentalStatusAssessment((MentalStatusAssessment)value, diagnostics, context);
			case EmspcrPackage.CARDIAC_ARREST_TIMING:
				return validateCardiacArrestTiming((CardiacArrestTiming)value, diagnostics, context);
			case EmspcrPackage.CARDIAC_ARREST_CAUSE:
				return validateCardiacArrestCause((CardiacArrestCause)value, diagnostics, context);
			case EmspcrPackage.ARREST_RHYTHM:
				return validateArrestRhythm((ArrestRhythm)value, diagnostics, context);
			case EmspcrPackage.RETURN_OF_SPONTANEOUS_CIRCULATION:
				return validateReturnOfSpontaneousCirculation((ReturnOfSpontaneousCirculation)value, diagnostics, context);
			case EmspcrPackage.DESTINATION_RHYTHM:
				return validateDestinationRhythm((DestinationRhythm)value, diagnostics, context);
			case EmspcrPackage.ABANDONED_PROCEDURE_REASON_OBSERVATION:
				return validateAbandonedProcedureReasonObservation((AbandonedProcedureReasonObservation)value, diagnostics, context);
			case EmspcrPackage.PROCEDURE_PRIOR_INDICATOR:
				return validateProcedurePriorIndicator((ProcedurePriorIndicator)value, diagnostics, context);
			case EmspcrPackage.PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION:
				return validateProcedureNumberOfAttemptsObservation((ProcedureNumberOfAttemptsObservation)value, diagnostics, context);
			case EmspcrPackage.PROCEDURE_SUCCESSFUL_OBSERVATION:
				return validateProcedureSuccessfulObservation((ProcedureSuccessfulObservation)value, diagnostics, context);
			case EmspcrPackage.PROCEDURE_COMPLICATIONS_OBSERVATION:
				return validateProcedureComplicationsObservation((ProcedureComplicationsObservation)value, diagnostics, context);
			case EmspcrPackage.PROCEDURE_PATIENT_RESPONSE_OBSERVATION:
				return validateProcedurePatientResponseObservation((ProcedurePatientResponseObservation)value, diagnostics, context);
			case EmspcrPackage.AIRWAY_CONFIRMATION_OBSERVATION:
				return validateAirwayConfirmationObservation((AirwayConfirmationObservation)value, diagnostics, context);
			case EmspcrPackage.REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION:
				return validateReasonProcedureNotAttemptedObservation((ReasonProcedureNotAttemptedObservation)value, diagnostics, context);
			case EmspcrPackage.COMPLAINT_TYPE:
				return validateComplaintType((ComplaintType)value, diagnostics, context);
			case EmspcrPackage.COMPLAINT_DURATION:
				return validateComplaintDuration((ComplaintDuration)value, diagnostics, context);
			case EmspcrPackage.COMPLAINT_ORGAN_SYSTEM:
				return validateComplaintOrganSystem((ComplaintOrganSystem)value, diagnostics, context);
			case EmspcrPackage.NEUROLOGICAL_ASSESSMENT:
				return validateNeurologicalAssessment((NeurologicalAssessment)value, diagnostics, context);
			case EmspcrPackage.DIASTOLIC_BLOOD_PRESSURE:
				return validateDiastolicBloodPressure((DiastolicBloodPressure)value, diagnostics, context);
			case EmspcrPackage.HEART_RATE:
				return validateHeartRate((HeartRate)value, diagnostics, context);
			case EmspcrPackage.RESPIRATORY_RATE:
				return validateRespiratoryRate((RespiratoryRate)value, diagnostics, context);
			case EmspcrPackage.BODY_TEMPERATURE:
				return validateBodyTemperature((BodyTemperature)value, diagnostics, context);
			case EmspcrPackage.OXYGEN_SATURATION:
				return validateOxygenSaturation((OxygenSaturation)value, diagnostics, context);
			case EmspcrPackage.PROTOCOL_AGE_CATEGORY:
				return validateProtocolAgeCategory((ProtocolAgeCategory)value, diagnostics, context);
			case EmspcrPackage.DISPATCH_LOCATION_NAME:
				return validateDispatchLocationName((DispatchLocationName)value, diagnostics, context);
			case EmspcrPackage.DISPATCH_LOCATION_LATITUDE:
				return validateDispatchLocationLatitude((DispatchLocationLatitude)value, diagnostics, context);
			case EmspcrPackage.DISPATCH_LOCATION_LONGITUDE:
				return validateDispatchLocationLongitude((DispatchLocationLongitude)value, diagnostics, context);
			case EmspcrPackage.DISPATCH_DELAY:
				return validateDispatchDelay((DispatchDelay)value, diagnostics, context);
			case EmspcrPackage.RESPONSE_DELAY:
				return validateResponseDelay((ResponseDelay)value, diagnostics, context);
			case EmspcrPackage.SCENE_DELAY:
				return validateSceneDelay((SceneDelay)value, diagnostics, context);
			case EmspcrPackage.TRANSPORT_DELAY:
				return validateTransportDelay((TransportDelay)value, diagnostics, context);
			case EmspcrPackage.TURNAROUND_DELAY:
				return validateTurnaroundDelay((TurnaroundDelay)value, diagnostics, context);
			case EmspcrPackage.GLASGOW_TOTAL:
				return validateGlasgowTotal((GlasgowTotal)value, diagnostics, context);
			case EmspcrPackage.GLASGOW_QUALIFIER:
				return validateGlasgowQualifier((GlasgowQualifier)value, diagnostics, context);
			case EmspcrPackage.GLASGOW_EYE:
				return validateGlasgowEye((GlasgowEye)value, diagnostics, context);
			case EmspcrPackage.GLASGOW_MOTOR:
				return validateGlasgowMotor((GlasgowMotor)value, diagnostics, context);
			case EmspcrPackage.GLASGOW_VERBAL:
				return validateGlasgowVerbal((GlasgowVerbal)value, diagnostics, context);
			case EmspcrPackage.STROKE_SCORE:
				return validateStrokeScore((StrokeScore)value, diagnostics, context);
			case EmspcrPackage.PAIN_SCORE:
				return validatePainScore((PainScore)value, diagnostics, context);
			case EmspcrPackage.LEVEL_OF_RESPONSIVENESS:
				return validateLevelOfResponsiveness((LevelOfResponsiveness)value, diagnostics, context);
			case EmspcrPackage.BLOOD_GLUCOSE:
				return validateBloodGlucose((BloodGlucose)value, diagnostics, context);
			case EmspcrPackage.CARBON_MONOXIDE:
				return validateCarbonMonoxide((CarbonMonoxide)value, diagnostics, context);
			case EmspcrPackage.CARBON_DIOXIDE:
				return validateCarbonDioxide((CarbonDioxide)value, diagnostics, context);
			case EmspcrPackage.CARDIAC_RHYTHM:
				return validateCardiacRhythm((CardiacRhythm)value, diagnostics, context);
			case EmspcrPackage.GLASGOW_COMA_SCORE_ORGANIZER:
				return validateGlasgowComaScoreOrganizer((GlasgowComaScoreOrganizer)value, diagnostics, context);
			case EmspcrPackage.RESPONSE_BEGINNING_ODOMETER_READING:
				return validateResponseBeginningOdometerReading((ResponseBeginningOdometerReading)value, diagnostics, context);
			case EmspcrPackage.RESPONSE_ON_SCENE_ODOMETER_READING:
				return validateResponseOnSceneOdometerReading((ResponseOnSceneOdometerReading)value, diagnostics, context);
			case EmspcrPackage.RESPONSE_DESTINATION_ODOMETER_READING:
				return validateResponseDestinationOdometerReading((ResponseDestinationOdometerReading)value, diagnostics, context);
			case EmspcrPackage.CARDIAC_ARREST_OUTCOME:
				return validateCardiacArrestOutcome((CardiacArrestOutcome)value, diagnostics, context);
			case EmspcrPackage.TRANSPORT_MODE_QUALIFIER:
				return validateTransportModeQualifier((TransportModeQualifier)value, diagnostics, context);
			case EmspcrPackage.SKIN_ASSESSMENT:
				return validateSkinAssessment((SkinAssessment)value, diagnostics, context);
			case EmspcrPackage.ADDITIONAL_VITAL_SIGNS_ORGANIZER:
				return validateAdditionalVitalSignsOrganizer((AdditionalVitalSignsOrganizer)value, diagnostics, context);
			case EmspcrPackage.LUNG_ASSESSMENT:
				return validateLungAssessment((LungAssessment)value, diagnostics, context);
			case EmspcrPackage.CHEST_ASSESSMENT:
				return validateChestAssessment((ChestAssessment)value, diagnostics, context);
			default:
				return true;
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport(PatientCareReport patientCareReport, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientCareReport, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patientCareReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patientCareReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patientCareReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(patientCareReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patientCareReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patientCareReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patientCareReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patientCareReport, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientCareReport_validatePatientCareReportTemplateId(patientCareReport, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientCareReportTemplateId constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportTemplateId(PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCurrentMedicationSection(EMSCurrentMedicationSection emsCurrentMedicationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsCurrentMedicationSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionTemplateId(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionCode(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionCodeP(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionTitle(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionText(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionCurrentlyOnMedication(emsCurrentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionCurrentMedication(emsCurrentMedicationSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSCurrentMedicationSectionTemplateId constraint of '<em>EMS Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionTemplateId(
			EMSCurrentMedicationSection emsCurrentMedicationSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCurrentMedicationSection.validateEMSCurrentMedicationSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCurrentMedicationSectionCode constraint of '<em>EMS Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionCode(
			EMSCurrentMedicationSection emsCurrentMedicationSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCurrentMedicationSection.validateEMSCurrentMedicationSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCurrentMedicationSectionCodeP constraint of '<em>EMS Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionCodeP(
			EMSCurrentMedicationSection emsCurrentMedicationSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCurrentMedicationSection.validateEMSCurrentMedicationSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCurrentMedicationSectionTitle constraint of '<em>EMS Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionTitle(
			EMSCurrentMedicationSection emsCurrentMedicationSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCurrentMedicationSection.validateEMSCurrentMedicationSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCurrentMedicationSectionText constraint of '<em>EMS Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionText(
			EMSCurrentMedicationSection emsCurrentMedicationSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCurrentMedicationSection.validateEMSCurrentMedicationSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCurrentMedicationSectionCurrentlyOnMedication constraint of '<em>EMS Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionCurrentlyOnMedication(
			EMSCurrentMedicationSection emsCurrentMedicationSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCurrentMedicationSection.validateEMSCurrentMedicationSectionCurrentlyOnMedication(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCurrentMedicationSectionCurrentMedication constraint of '<em>EMS Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCurrentMedicationSection_validateEMSCurrentMedicationSectionCurrentMedication(
			EMSCurrentMedicationSection emsCurrentMedicationSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCurrentMedicationSection.validateEMSCurrentMedicationSectionCurrentMedication(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentlyOnMedication(CurrentlyOnMedication currentlyOnMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(currentlyOnMedication, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentlyOnMedication_validateCurrentlyOnMedicationTemplateId(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentlyOnMedication_validateCurrentlyOnMedicationMoodCode(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentlyOnMedication_validateCurrentlyOnMedicationCode(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentlyOnMedication_validateCurrentlyOnMedicationValue(currentlyOnMedication, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCurrentlyOnMedicationTemplateId constraint of '<em>Currently On Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentlyOnMedication_validateCurrentlyOnMedicationTemplateId(
			CurrentlyOnMedication currentlyOnMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentlyOnMedication.validateCurrentlyOnMedicationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentlyOnMedicationMoodCode constraint of '<em>Currently On Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentlyOnMedication_validateCurrentlyOnMedicationMoodCode(
			CurrentlyOnMedication currentlyOnMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentlyOnMedication.validateCurrentlyOnMedicationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentlyOnMedicationCode constraint of '<em>Currently On Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentlyOnMedication_validateCurrentlyOnMedicationCode(
			CurrentlyOnMedication currentlyOnMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentlyOnMedication.validateCurrentlyOnMedicationCode(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentlyOnMedicationValue constraint of '<em>Currently On Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentlyOnMedication_validateCurrentlyOnMedicationValue(
			CurrentlyOnMedication currentlyOnMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentlyOnMedication.validateCurrentlyOnMedicationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication(CurrentMedication currentMedication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(currentMedication, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSubstanceAdministration_validateClassCode(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentMedication_validateCurrentMedicationConsumable(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentMedication_validateCurrentMedicationTemplateId(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentMedication_validateCurrentMedicationNegationInd(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentMedication_validateCurrentMedicationNullFlavor(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentMedication_validateCurrentMedicationDoseQuantity(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentMedication_validateCurrentMedicationRouteCodeP(currentMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateCurrentMedication_validateCurrentMedicationRouteCode(currentMedication, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCurrentMedicationConsumable constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationConsumable(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationConsumable(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationTemplateId constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationTemplateId(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationNegationInd constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationNegationInd(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationNegationInd(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationNullFlavor constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationNullFlavor(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationNullFlavor(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationDoseQuantity constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationDoseQuantity(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationDoseQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationRouteCodeP constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationRouteCodeP(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationRouteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationRouteCode constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationRouteCode(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationRouteCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCardiacArrestEventSection(EMSCardiacArrestEventSection emsCardiacArrestEventSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsCardiacArrestEventSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionTemplateId(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionCode(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionCodeP(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionTitle(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionText(emsCardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionCardiacArrestExistence(emsCardiacArrestEventSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSCardiacArrestEventSectionTemplateId constraint of '<em>EMS Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionTemplateId(
			EMSCardiacArrestEventSection emsCardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCardiacArrestEventSection.validateEMSCardiacArrestEventSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCardiacArrestEventSectionCode constraint of '<em>EMS Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionCode(
			EMSCardiacArrestEventSection emsCardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCardiacArrestEventSection.validateEMSCardiacArrestEventSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCardiacArrestEventSectionCodeP constraint of '<em>EMS Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionCodeP(
			EMSCardiacArrestEventSection emsCardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCardiacArrestEventSection.validateEMSCardiacArrestEventSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCardiacArrestEventSectionTitle constraint of '<em>EMS Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionTitle(
			EMSCardiacArrestEventSection emsCardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCardiacArrestEventSection.validateEMSCardiacArrestEventSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCardiacArrestEventSectionText constraint of '<em>EMS Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionText(
			EMSCardiacArrestEventSection emsCardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCardiacArrestEventSection.validateEMSCardiacArrestEventSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSCardiacArrestEventSectionCardiacArrestExistence constraint of '<em>EMS Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSCardiacArrestEventSection_validateEMSCardiacArrestEventSectionCardiacArrestExistence(
			EMSCardiacArrestEventSection emsCardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsCardiacArrestEventSection.validateEMSCardiacArrestEventSectionCardiacArrestExistence(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest(CardiacArrest cardiacArrest, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(cardiacArrest, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestCardiacArrestCauseRelationship(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestCardiacArrestInformantParticipation(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestSpontaneousCirculationRelationship(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestDestinationRhythmRelationship(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestArrestRhythmRelationship(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestTemplateId(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestMoodCode(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestCode(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestNegationInd(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestEffectiveTime(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestValue(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestCardiacArrestTimingRelationship(cardiacArrest, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrest_validateCardiacArrestCardiacArrestOutcomeRelationship(cardiacArrest, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCardiacArrestCardiacArrestCauseRelationship constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestCardiacArrestCauseRelationship(
			CardiacArrest cardiacArrest, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestCardiacArrestCauseRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCardiacArrestInformantParticipation constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestCardiacArrestInformantParticipation(
			CardiacArrest cardiacArrest, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestCardiacArrestInformantParticipation(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestSpontaneousCirculationRelationship constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestSpontaneousCirculationRelationship(
			CardiacArrest cardiacArrest, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestSpontaneousCirculationRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestDestinationRhythmRelationship constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestDestinationRhythmRelationship(CardiacArrest cardiacArrest,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestDestinationRhythmRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestArrestRhythmRelationship constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestArrestRhythmRelationship(CardiacArrest cardiacArrest,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestArrestRhythmRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestTemplateId constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestTemplateId(CardiacArrest cardiacArrest,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestMoodCode constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestMoodCode(CardiacArrest cardiacArrest,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCode constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestCode(CardiacArrest cardiacArrest,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestNegationInd constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestNegationInd(CardiacArrest cardiacArrest,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestNegationInd(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestEffectiveTime constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestEffectiveTime(CardiacArrest cardiacArrest,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestValue constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestValue(CardiacArrest cardiacArrest,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestValue(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCardiacArrestTimingRelationship constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestCardiacArrestTimingRelationship(
			CardiacArrest cardiacArrest, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestCardiacArrestTimingRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCardiacArrestOutcomeRelationship constraint of '<em>Cardiac Arrest</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrest_validateCardiacArrestCardiacArrestOutcomeRelationship(
			CardiacArrest cardiacArrest, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrest.validateCardiacArrestCardiacArrestOutcomeRelationship(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAdvanceDirectivesSection(EMSAdvanceDirectivesSection emsAdvanceDirectivesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsAdvanceDirectivesSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionTemplateId(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionCode(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionCodeP(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionTitle(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionText(emsAdvanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionAdvancedDirectiveObservation(emsAdvanceDirectivesSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSAdvanceDirectivesSectionTemplateId constraint of '<em>EMS Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionTemplateId(
			EMSAdvanceDirectivesSection emsAdvanceDirectivesSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAdvanceDirectivesSection.validateEMSAdvanceDirectivesSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAdvanceDirectivesSectionCode constraint of '<em>EMS Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionCode(
			EMSAdvanceDirectivesSection emsAdvanceDirectivesSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAdvanceDirectivesSection.validateEMSAdvanceDirectivesSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAdvanceDirectivesSectionCodeP constraint of '<em>EMS Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionCodeP(
			EMSAdvanceDirectivesSection emsAdvanceDirectivesSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAdvanceDirectivesSection.validateEMSAdvanceDirectivesSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAdvanceDirectivesSectionTitle constraint of '<em>EMS Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionTitle(
			EMSAdvanceDirectivesSection emsAdvanceDirectivesSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAdvanceDirectivesSection.validateEMSAdvanceDirectivesSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAdvanceDirectivesSectionText constraint of '<em>EMS Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionText(
			EMSAdvanceDirectivesSection emsAdvanceDirectivesSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAdvanceDirectivesSection.validateEMSAdvanceDirectivesSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAdvanceDirectivesSectionAdvancedDirectiveObservation constraint of '<em>EMS Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAdvanceDirectivesSection_validateEMSAdvanceDirectivesSectionAdvancedDirectiveObservation(
			EMSAdvanceDirectivesSection emsAdvanceDirectivesSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAdvanceDirectivesSection.validateEMSAdvanceDirectivesSectionAdvancedDirectiveObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation(AdvanceDirectiveObservation advanceDirectiveObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advanceDirectiveObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationTemplateId(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationMoodCode(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCode(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationValue(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationValueP(advanceDirectiveObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationTemplateId constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationTemplateId(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationMoodCode constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationMoodCode(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationCode constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCode(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationValue constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationValue(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationValueP constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationValueP(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAllergiesAndAdverseReactionsSection(
			EMSAllergiesAndAdverseReactionsSection emsAllergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsAllergiesAndAdverseReactionsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionTemplateId(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionCode(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionCodeP(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionTitle(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionText(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionEnvironmentalAllergies(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionEMSDrugAllergyOrganizer(emsAllergiesAndAdverseReactionsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSAllergiesAndAdverseReactionsSectionTemplateId constraint of '<em>EMS Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionTemplateId(
			EMSAllergiesAndAdverseReactionsSection emsAllergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAllergiesAndAdverseReactionsSection.validateEMSAllergiesAndAdverseReactionsSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAllergiesAndAdverseReactionsSectionCode constraint of '<em>EMS Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionCode(
			EMSAllergiesAndAdverseReactionsSection emsAllergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAllergiesAndAdverseReactionsSection.validateEMSAllergiesAndAdverseReactionsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAllergiesAndAdverseReactionsSectionCodeP constraint of '<em>EMS Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionCodeP(
			EMSAllergiesAndAdverseReactionsSection emsAllergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAllergiesAndAdverseReactionsSection.validateEMSAllergiesAndAdverseReactionsSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAllergiesAndAdverseReactionsSectionTitle constraint of '<em>EMS Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionTitle(
			EMSAllergiesAndAdverseReactionsSection emsAllergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAllergiesAndAdverseReactionsSection.validateEMSAllergiesAndAdverseReactionsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAllergiesAndAdverseReactionsSectionText constraint of '<em>EMS Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionText(
			EMSAllergiesAndAdverseReactionsSection emsAllergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAllergiesAndAdverseReactionsSection.validateEMSAllergiesAndAdverseReactionsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAllergiesAndAdverseReactionsSectionEnvironmentalAllergies constraint of '<em>EMS Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionEnvironmentalAllergies(
			EMSAllergiesAndAdverseReactionsSection emsAllergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAllergiesAndAdverseReactionsSection.validateEMSAllergiesAndAdverseReactionsSectionEnvironmentalAllergies(diagnostics, context);
	}

	/**
	 * Validates the validateEMSAllergiesAndAdverseReactionsSectionEMSDrugAllergyOrganizer constraint of '<em>EMS Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSAllergiesAndAdverseReactionsSection_validateEMSAllergiesAndAdverseReactionsSectionEMSDrugAllergyOrganizer(
			EMSAllergiesAndAdverseReactionsSection emsAllergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsAllergiesAndAdverseReactionsSection.validateEMSAllergiesAndAdverseReactionsSectionEMSDrugAllergyOrganizer(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergyOrganizer(NonDrugAllergyOrganizer nonDrugAllergyOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(nonDrugAllergyOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonDrugAllergyOrganizer_validateNonDrugAllergyOrganizerExistenceOfNonDrugAllergy(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonDrugAllergyOrganizer_validateNonDrugAllergyOrganizerNonDrugAllergy(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonDrugAllergyOrganizer_validateNonDrugAllergyOrganizerTemplateId(nonDrugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonDrugAllergyOrganizer_validateNonDrugAllergyOrganizerComponent4(nonDrugAllergyOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateNonDrugAllergyOrganizerExistenceOfNonDrugAllergy constraint of '<em>Non Drug Allergy Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergyOrganizer_validateNonDrugAllergyOrganizerExistenceOfNonDrugAllergy(
			NonDrugAllergyOrganizer nonDrugAllergyOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return nonDrugAllergyOrganizer.validateNonDrugAllergyOrganizerExistenceOfNonDrugAllergy(diagnostics, context);
	}

	/**
	 * Validates the validateNonDrugAllergyOrganizerNonDrugAllergy constraint of '<em>Non Drug Allergy Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergyOrganizer_validateNonDrugAllergyOrganizerNonDrugAllergy(
			NonDrugAllergyOrganizer nonDrugAllergyOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return nonDrugAllergyOrganizer.validateNonDrugAllergyOrganizerNonDrugAllergy(diagnostics, context);
	}

	/**
	 * Validates the validateNonDrugAllergyOrganizerTemplateId constraint of '<em>Non Drug Allergy Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergyOrganizer_validateNonDrugAllergyOrganizerTemplateId(
			NonDrugAllergyOrganizer nonDrugAllergyOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return nonDrugAllergyOrganizer.validateNonDrugAllergyOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateNonDrugAllergyOrganizerComponent4 constraint of '<em>Non Drug Allergy Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergyOrganizer_validateNonDrugAllergyOrganizerComponent4(
			NonDrugAllergyOrganizer nonDrugAllergyOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return nonDrugAllergyOrganizer.validateNonDrugAllergyOrganizerComponent4(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownNonDrugAllergy(ExistenceOfKnownNonDrugAllergy existenceOfKnownNonDrugAllergy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(existenceOfKnownNonDrugAllergy, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfKnownNonDrugAllergy_validateExistenceOfKnownNonDrugAllergyTemplateId(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfKnownNonDrugAllergy_validateExistenceOfKnownNonDrugAllergyMoodCode(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfKnownNonDrugAllergy_validateExistenceOfKnownNonDrugAllergyCodeP(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfKnownNonDrugAllergy_validateExistenceOfKnownNonDrugAllergyCode(existenceOfKnownNonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfKnownNonDrugAllergy_validateExistenceOfKnownNonDrugAllergyValue(existenceOfKnownNonDrugAllergy, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateExistenceOfKnownNonDrugAllergyTemplateId constraint of '<em>Existence Of Known Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownNonDrugAllergy_validateExistenceOfKnownNonDrugAllergyTemplateId(
			ExistenceOfKnownNonDrugAllergy existenceOfKnownNonDrugAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfKnownNonDrugAllergy.validateExistenceOfKnownNonDrugAllergyTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfKnownNonDrugAllergyMoodCode constraint of '<em>Existence Of Known Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownNonDrugAllergy_validateExistenceOfKnownNonDrugAllergyMoodCode(
			ExistenceOfKnownNonDrugAllergy existenceOfKnownNonDrugAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfKnownNonDrugAllergy.validateExistenceOfKnownNonDrugAllergyMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfKnownNonDrugAllergyCodeP constraint of '<em>Existence Of Known Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownNonDrugAllergy_validateExistenceOfKnownNonDrugAllergyCodeP(
			ExistenceOfKnownNonDrugAllergy existenceOfKnownNonDrugAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfKnownNonDrugAllergy.validateExistenceOfKnownNonDrugAllergyCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfKnownNonDrugAllergyCode constraint of '<em>Existence Of Known Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownNonDrugAllergy_validateExistenceOfKnownNonDrugAllergyCode(
			ExistenceOfKnownNonDrugAllergy existenceOfKnownNonDrugAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfKnownNonDrugAllergy.validateExistenceOfKnownNonDrugAllergyCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfKnownNonDrugAllergyValue constraint of '<em>Existence Of Known Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownNonDrugAllergy_validateExistenceOfKnownNonDrugAllergyValue(
			ExistenceOfKnownNonDrugAllergy existenceOfKnownNonDrugAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfKnownNonDrugAllergy.validateExistenceOfKnownNonDrugAllergyValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergy(NonDrugAllergy nonDrugAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(nonDrugAllergy, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonDrugAllergy_validateNonDrugAllergyTemplateId(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonDrugAllergy_validateNonDrugAllergyMoodCode(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonDrugAllergy_validateNonDrugAllergyCodeP(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonDrugAllergy_validateNonDrugAllergyCode(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonDrugAllergy_validateNonDrugAllergyValue(nonDrugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonDrugAllergy_validateNonDrugAllergyValueP(nonDrugAllergy, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateNonDrugAllergyTemplateId constraint of '<em>Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergy_validateNonDrugAllergyTemplateId(NonDrugAllergy nonDrugAllergy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return nonDrugAllergy.validateNonDrugAllergyTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateNonDrugAllergyMoodCode constraint of '<em>Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergy_validateNonDrugAllergyMoodCode(NonDrugAllergy nonDrugAllergy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return nonDrugAllergy.validateNonDrugAllergyMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateNonDrugAllergyCodeP constraint of '<em>Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergy_validateNonDrugAllergyCodeP(NonDrugAllergy nonDrugAllergy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return nonDrugAllergy.validateNonDrugAllergyCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateNonDrugAllergyCode constraint of '<em>Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergy_validateNonDrugAllergyCode(NonDrugAllergy nonDrugAllergy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return nonDrugAllergy.validateNonDrugAllergyCode(diagnostics, context);
	}

	/**
	 * Validates the validateNonDrugAllergyValue constraint of '<em>Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergy_validateNonDrugAllergyValue(NonDrugAllergy nonDrugAllergy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return nonDrugAllergy.validateNonDrugAllergyValue(diagnostics, context);
	}

	/**
	 * Validates the validateNonDrugAllergyValueP constraint of '<em>Non Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonDrugAllergy_validateNonDrugAllergyValueP(NonDrugAllergy nonDrugAllergy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return nonDrugAllergy.validateNonDrugAllergyValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergyOrganizer(DrugAllergyOrganizer drugAllergyOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(drugAllergyOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(drugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(drugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(drugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(drugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(drugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(drugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(drugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(drugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugAllergyOrganizer_validateDrugAllergyOrganizerTemplateId(drugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugAllergyOrganizer_validateDrugAllergyOrganizerComponent4(drugAllergyOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugAllergyOrganizer_validateDrugAllergyOrganizerComponent42(drugAllergyOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDrugAllergyOrganizerTemplateId constraint of '<em>Drug Allergy Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergyOrganizer_validateDrugAllergyOrganizerTemplateId(
			DrugAllergyOrganizer drugAllergyOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugAllergyOrganizer.validateDrugAllergyOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDrugAllergyOrganizerComponent4 constraint of '<em>Drug Allergy Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergyOrganizer_validateDrugAllergyOrganizerComponent4(
			DrugAllergyOrganizer drugAllergyOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugAllergyOrganizer.validateDrugAllergyOrganizerComponent4(diagnostics, context);
	}

	/**
	 * Validates the validateDrugAllergyOrganizerComponent42 constraint of '<em>Drug Allergy Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergyOrganizer_validateDrugAllergyOrganizerComponent42(
			DrugAllergyOrganizer drugAllergyOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugAllergyOrganizer.validateDrugAllergyOrganizerComponent42(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPastMedicalHistorySection(EMSPastMedicalHistorySection emsPastMedicalHistorySection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsPastMedicalHistorySection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionTemplateId(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionCode(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionCodeP(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionTitle(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionText(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionExistenceOfHistoryOfCondition(emsPastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionHistoryOfCondition(emsPastMedicalHistorySection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSPastMedicalHistorySectionTemplateId constraint of '<em>EMS Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionTemplateId(
			EMSPastMedicalHistorySection emsPastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPastMedicalHistorySection.validateEMSPastMedicalHistorySectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPastMedicalHistorySectionCode constraint of '<em>EMS Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionCode(
			EMSPastMedicalHistorySection emsPastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPastMedicalHistorySection.validateEMSPastMedicalHistorySectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPastMedicalHistorySectionCodeP constraint of '<em>EMS Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionCodeP(
			EMSPastMedicalHistorySection emsPastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPastMedicalHistorySection.validateEMSPastMedicalHistorySectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPastMedicalHistorySectionTitle constraint of '<em>EMS Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionTitle(
			EMSPastMedicalHistorySection emsPastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPastMedicalHistorySection.validateEMSPastMedicalHistorySectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPastMedicalHistorySectionText constraint of '<em>EMS Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionText(
			EMSPastMedicalHistorySection emsPastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPastMedicalHistorySection.validateEMSPastMedicalHistorySectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPastMedicalHistorySectionExistenceOfHistoryOfCondition constraint of '<em>EMS Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionExistenceOfHistoryOfCondition(
			EMSPastMedicalHistorySection emsPastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPastMedicalHistorySection.validateEMSPastMedicalHistorySectionExistenceOfHistoryOfCondition(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPastMedicalHistorySectionHistoryOfCondition constraint of '<em>EMS Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPastMedicalHistorySection_validateEMSPastMedicalHistorySectionHistoryOfCondition(
			EMSPastMedicalHistorySection emsPastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPastMedicalHistorySection.validateEMSPastMedicalHistorySectionHistoryOfCondition(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfConditionOrSurgery(
			ExistenceOfHistoryOfConditionOrSurgery existenceOfHistoryOfConditionOrSurgery, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(existenceOfHistoryOfConditionOrSurgery, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfHistoryOfConditionOrSurgery_validateExistenceOfHistoryOfConditionOrSurgeryTemplateId(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfHistoryOfConditionOrSurgery_validateExistenceOfHistoryOfConditionOrSurgeryMoodCode(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfHistoryOfConditionOrSurgery_validateExistenceOfHistoryOfConditionOrSurgeryCodeP(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfHistoryOfConditionOrSurgery_validateExistenceOfHistoryOfConditionOrSurgeryCode(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfHistoryOfConditionOrSurgery_validateExistenceOfHistoryOfConditionOrSurgeryValue(existenceOfHistoryOfConditionOrSurgery, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateExistenceOfHistoryOfConditionOrSurgeryTemplateId constraint of '<em>Existence Of History Of Condition Or Surgery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfConditionOrSurgery_validateExistenceOfHistoryOfConditionOrSurgeryTemplateId(
			ExistenceOfHistoryOfConditionOrSurgery existenceOfHistoryOfConditionOrSurgery, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfConditionOrSurgery.validateExistenceOfHistoryOfConditionOrSurgeryTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfHistoryOfConditionOrSurgeryMoodCode constraint of '<em>Existence Of History Of Condition Or Surgery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfConditionOrSurgery_validateExistenceOfHistoryOfConditionOrSurgeryMoodCode(
			ExistenceOfHistoryOfConditionOrSurgery existenceOfHistoryOfConditionOrSurgery, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfConditionOrSurgery.validateExistenceOfHistoryOfConditionOrSurgeryMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfHistoryOfConditionOrSurgeryCodeP constraint of '<em>Existence Of History Of Condition Or Surgery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfConditionOrSurgery_validateExistenceOfHistoryOfConditionOrSurgeryCodeP(
			ExistenceOfHistoryOfConditionOrSurgery existenceOfHistoryOfConditionOrSurgery, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfConditionOrSurgery.validateExistenceOfHistoryOfConditionOrSurgeryCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfHistoryOfConditionOrSurgeryCode constraint of '<em>Existence Of History Of Condition Or Surgery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfConditionOrSurgery_validateExistenceOfHistoryOfConditionOrSurgeryCode(
			ExistenceOfHistoryOfConditionOrSurgery existenceOfHistoryOfConditionOrSurgery, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfConditionOrSurgery.validateExistenceOfHistoryOfConditionOrSurgeryCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfHistoryOfConditionOrSurgeryValue constraint of '<em>Existence Of History Of Condition Or Surgery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfConditionOrSurgery_validateExistenceOfHistoryOfConditionOrSurgeryValue(
			ExistenceOfHistoryOfConditionOrSurgery existenceOfHistoryOfConditionOrSurgery, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfConditionOrSurgery.validateExistenceOfHistoryOfConditionOrSurgeryValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalSurgicalHistory(MedicalSurgicalHistory medicalSurgicalHistory,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicalSurgicalHistory, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryTemplateId(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryMoodCode(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryCodeP(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryCode(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryValue(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryValueP(medicalSurgicalHistory, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryNegationInd(medicalSurgicalHistory, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicalSurgicalHistoryTemplateId constraint of '<em>Medical Surgical History</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryTemplateId(
			MedicalSurgicalHistory medicalSurgicalHistory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalSurgicalHistory.validateMedicalSurgicalHistoryTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalSurgicalHistoryMoodCode constraint of '<em>Medical Surgical History</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryMoodCode(
			MedicalSurgicalHistory medicalSurgicalHistory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalSurgicalHistory.validateMedicalSurgicalHistoryMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalSurgicalHistoryCodeP constraint of '<em>Medical Surgical History</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryCodeP(
			MedicalSurgicalHistory medicalSurgicalHistory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalSurgicalHistory.validateMedicalSurgicalHistoryCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalSurgicalHistoryCode constraint of '<em>Medical Surgical History</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryCode(
			MedicalSurgicalHistory medicalSurgicalHistory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalSurgicalHistory.validateMedicalSurgicalHistoryCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalSurgicalHistoryValue constraint of '<em>Medical Surgical History</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryValue(
			MedicalSurgicalHistory medicalSurgicalHistory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalSurgicalHistory.validateMedicalSurgicalHistoryValue(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalSurgicalHistoryValueP constraint of '<em>Medical Surgical History</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryValueP(
			MedicalSurgicalHistory medicalSurgicalHistory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalSurgicalHistory.validateMedicalSurgicalHistoryValueP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalSurgicalHistoryNegationInd constraint of '<em>Medical Surgical History</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalSurgicalHistory_validateMedicalSurgicalHistoryNegationInd(
			MedicalSurgicalHistory medicalSurgicalHistory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalSurgicalHistory.validateMedicalSurgicalHistoryNegationInd(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSocialHistorySection(EMSSocialHistorySection emsSocialHistorySection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsSocialHistorySection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSocialHistorySection_validateEMSSocialHistorySectionTemplateId(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSocialHistorySection_validateEMSSocialHistorySectionCode(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSocialHistorySection_validateEMSSocialHistorySectionCodeP(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSocialHistorySection_validateEMSSocialHistorySectionTitle(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSocialHistorySection_validateEMSSocialHistorySectionText(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSocialHistorySection_validateEMSSocialHistorySectionExistenceOfDrugUseIndication(emsSocialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSocialHistorySection_validateEMSSocialHistorySectionDrugUseIndication(emsSocialHistorySection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSSocialHistorySectionTemplateId constraint of '<em>EMS Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSocialHistorySection_validateEMSSocialHistorySectionTemplateId(
			EMSSocialHistorySection emsSocialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSocialHistorySection.validateEMSSocialHistorySectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSocialHistorySectionCode constraint of '<em>EMS Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSocialHistorySection_validateEMSSocialHistorySectionCode(
			EMSSocialHistorySection emsSocialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSocialHistorySection.validateEMSSocialHistorySectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSocialHistorySectionCodeP constraint of '<em>EMS Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSocialHistorySection_validateEMSSocialHistorySectionCodeP(
			EMSSocialHistorySection emsSocialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSocialHistorySection.validateEMSSocialHistorySectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSocialHistorySectionTitle constraint of '<em>EMS Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSocialHistorySection_validateEMSSocialHistorySectionTitle(
			EMSSocialHistorySection emsSocialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSocialHistorySection.validateEMSSocialHistorySectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSocialHistorySectionText constraint of '<em>EMS Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSocialHistorySection_validateEMSSocialHistorySectionText(
			EMSSocialHistorySection emsSocialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSocialHistorySection.validateEMSSocialHistorySectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSocialHistorySectionExistenceOfDrugUseIndication constraint of '<em>EMS Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSocialHistorySection_validateEMSSocialHistorySectionExistenceOfDrugUseIndication(
			EMSSocialHistorySection emsSocialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSocialHistorySection.validateEMSSocialHistorySectionExistenceOfDrugUseIndication(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSocialHistorySectionDrugUseIndication constraint of '<em>EMS Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSocialHistorySection_validateEMSSocialHistorySectionDrugUseIndication(
			EMSSocialHistorySection emsSocialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSocialHistorySection.validateEMSSocialHistorySectionDrugUseIndication(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication(ExistenceOfDrugUseIndication existenceOfDrugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(existenceOfDrugUseIndication, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationTemplateId(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationMoodCode(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationCodeP(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationCode(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationValue(existenceOfDrugUseIndication, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateExistenceOfDrugUseIndicationTemplateId constraint of '<em>Existence Of Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationTemplateId(
			ExistenceOfDrugUseIndication existenceOfDrugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugUseIndication.validateExistenceOfDrugUseIndicationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugUseIndicationMoodCode constraint of '<em>Existence Of Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationMoodCode(
			ExistenceOfDrugUseIndication existenceOfDrugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugUseIndication.validateExistenceOfDrugUseIndicationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugUseIndicationCodeP constraint of '<em>Existence Of Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationCodeP(
			ExistenceOfDrugUseIndication existenceOfDrugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugUseIndication.validateExistenceOfDrugUseIndicationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugUseIndicationCode constraint of '<em>Existence Of Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationCode(
			ExistenceOfDrugUseIndication existenceOfDrugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugUseIndication.validateExistenceOfDrugUseIndicationCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugUseIndicationValue constraint of '<em>Existence Of Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationValue(
			ExistenceOfDrugUseIndication existenceOfDrugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugUseIndication.validateExistenceOfDrugUseIndicationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication(DrugUseIndication drugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(drugUseIndication, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugUseIndication_validateDrugUseIndicationTemplateId(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugUseIndication_validateDrugUseIndicationMoodCode(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugUseIndication_validateDrugUseIndicationCode(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugUseIndication_validateDrugUseIndicationValue(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugUseIndication_validateDrugUseIndicationValueP(drugUseIndication, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDrugUseIndicationTemplateId constraint of '<em>Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication_validateDrugUseIndicationTemplateId(DrugUseIndication drugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugUseIndication.validateDrugUseIndicationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDrugUseIndicationMoodCode constraint of '<em>Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication_validateDrugUseIndicationMoodCode(DrugUseIndication drugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugUseIndication.validateDrugUseIndicationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDrugUseIndicationCode constraint of '<em>Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication_validateDrugUseIndicationCode(DrugUseIndication drugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugUseIndication.validateDrugUseIndicationCode(diagnostics, context);
	}

	/**
	 * Validates the validateDrugUseIndicationValue constraint of '<em>Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication_validateDrugUseIndicationValue(DrugUseIndication drugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugUseIndication.validateDrugUseIndicationValue(diagnostics, context);
	}

	/**
	 * Validates the validateDrugUseIndicationValueP constraint of '<em>Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication_validateDrugUseIndicationValueP(DrugUseIndication drugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugUseIndication.validateDrugUseIndicationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection(EMSPhysicalAssessmentSection emsPhysicalAssessmentSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsPhysicalAssessmentSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionTemplateId(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionCode(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionCodeP(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionTitle(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionText(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionPhysicalAssessmentOrganizer(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionPatientPregnancy(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionLastOralIntake(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionPatientAge(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionThrombolyticContraindications(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionBarriersToPatientCare(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionBodyWeight(emsPhysicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionLengthBasedBodyWeight(emsPhysicalAssessmentSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionTemplateId constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionTemplateId(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionCode constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionCode(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionCodeP constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionCodeP(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionTitle constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionTitle(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionText constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionText(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionPhysicalAssessmentOrganizer constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionPhysicalAssessmentOrganizer(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionPhysicalAssessmentOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionPatientPregnancy constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionPatientPregnancy(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionPatientPregnancy(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionLastOralIntake constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionLastOralIntake(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionLastOralIntake(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionPatientAge constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionPatientAge(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionPatientAge(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionThrombolyticContraindications constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionThrombolyticContraindications(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionThrombolyticContraindications(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionBarriersToPatientCare constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionBarriersToPatientCare(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionBarriersToPatientCare(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionBodyWeight constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionBodyWeight(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionBodyWeight(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPhysicalAssessmentSectionLengthBasedBodyWeight constraint of '<em>EMS Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPhysicalAssessmentSection_validateEMSPhysicalAssessmentSectionLengthBasedBodyWeight(
			EMSPhysicalAssessmentSection emsPhysicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPhysicalAssessmentSection.validateEMSPhysicalAssessmentSectionLengthBasedBodyWeight(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer(PhysicalAssessmentOrganizer physicalAssessmentOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(physicalAssessmentOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent3(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent4(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent5(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent6(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent8(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent9(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent10(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent11(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent12(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent13(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent14(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerTemplateId(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent15(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent42(physicalAssessmentOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent3 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent3(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent3(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent4 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent4(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent4(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent5 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent5(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent5(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent6 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent6(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent6(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent8 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent8(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent8(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent9 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent9(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent9(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent10 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent10(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent10(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent11 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent11(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent11(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent12 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent12(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent12(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent13 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent13(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent13(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent14 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent14(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent14(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerTemplateId constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerTemplateId(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent15 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent15(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent15(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent42 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent42(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent42(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy(PatientPregnancy patientPregnancy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientPregnancy, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientPregnancy_validatePatientPregnancyTemplateId(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientPregnancy_validatePatientPregnancyMoodCode(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientPregnancy_validatePatientPregnancyCodeP(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientPregnancy_validatePatientPregnancyCode(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientPregnancy_validatePatientPregnancyValue(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientPregnancy_validatePatientPregnancyValueP(patientPregnancy, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientPregnancyTemplateId constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyTemplateId(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientPregnancyMoodCode constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyMoodCode(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientPregnancyCodeP constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyCodeP(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientPregnancyCode constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyCode(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientPregnancyValue constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyValue(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyValue(diagnostics, context);
	}

	/**
	 * Validates the validatePatientPregnancyValueP constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyValueP(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake(LastOralIntake lastOralIntake, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(lastOralIntake, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validateLastOralIntake_validateLastOralIntakeTemplateId(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validateLastOralIntake_validateLastOralIntakeMoodCode(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validateLastOralIntake_validateLastOralIntakeCodeP(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validateLastOralIntake_validateLastOralIntakeCode(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) result &= validateLastOralIntake_validateLastOralIntakeValue(lastOralIntake, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateLastOralIntakeTemplateId constraint of '<em>Last Oral Intake</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake_validateLastOralIntakeTemplateId(LastOralIntake lastOralIntake,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lastOralIntake.validateLastOralIntakeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateLastOralIntakeMoodCode constraint of '<em>Last Oral Intake</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake_validateLastOralIntakeMoodCode(LastOralIntake lastOralIntake,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lastOralIntake.validateLastOralIntakeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateLastOralIntakeCodeP constraint of '<em>Last Oral Intake</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake_validateLastOralIntakeCodeP(LastOralIntake lastOralIntake,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lastOralIntake.validateLastOralIntakeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLastOralIntakeCode constraint of '<em>Last Oral Intake</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake_validateLastOralIntakeCode(LastOralIntake lastOralIntake,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lastOralIntake.validateLastOralIntakeCode(diagnostics, context);
	}

	/**
	 * Validates the validateLastOralIntakeValue constraint of '<em>Last Oral Intake</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake_validateLastOralIntakeValue(LastOralIntake lastOralIntake,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lastOralIntake.validateLastOralIntakeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge(PatientAge patientAge, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientAge, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientAge_validatePatientAgeTemplateId(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientAge_validatePatientAgeMoodCode(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientAge_validatePatientAgeCodeP(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientAge_validatePatientAgeCode(patientAge, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientAge_validatePatientAgeValue(patientAge, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientAgeTemplateId constraint of '<em>Patient Age</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge_validatePatientAgeTemplateId(PatientAge patientAge, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientAge.validatePatientAgeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientAgeMoodCode constraint of '<em>Patient Age</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge_validatePatientAgeMoodCode(PatientAge patientAge, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientAge.validatePatientAgeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientAgeCodeP constraint of '<em>Patient Age</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge_validatePatientAgeCodeP(PatientAge patientAge, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientAge.validatePatientAgeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientAgeCode constraint of '<em>Patient Age</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge_validatePatientAgeCode(PatientAge patientAge, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientAge.validatePatientAgeCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientAgeValue constraint of '<em>Patient Age</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge_validatePatientAgeValue(PatientAge patientAge, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientAge.validatePatientAgeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications(ThrombolyticContraindications thrombolyticContraindications,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(thrombolyticContraindications, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsTemplateId(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsMoodCode(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsCodeP(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsCode(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsValue(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsValueP(thrombolyticContraindications, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateThrombolyticContraindicationsTemplateId constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsTemplateId(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateThrombolyticContraindicationsMoodCode constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsMoodCode(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateThrombolyticContraindicationsCodeP constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsCodeP(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateThrombolyticContraindicationsCode constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsCode(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsCode(diagnostics, context);
	}

	/**
	 * Validates the validateThrombolyticContraindicationsValue constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsValue(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsValue(diagnostics, context);
	}

	/**
	 * Validates the validateThrombolyticContraindicationsValueP constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsValueP(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare(BarriersToPatientCare barriersToPatientCare,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(barriersToPatientCare, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validateBarriersToPatientCare_validateBarriersToPatientCareTemplateId(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validateBarriersToPatientCare_validateBarriersToPatientCareMoodCode(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validateBarriersToPatientCare_validateBarriersToPatientCareCodeP(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validateBarriersToPatientCare_validateBarriersToPatientCareCode(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validateBarriersToPatientCare_validateBarriersToPatientCareValue(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) result &= validateBarriersToPatientCare_validateBarriersToPatientCareValueP(barriersToPatientCare, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateBarriersToPatientCareTemplateId constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareTemplateId(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBarriersToPatientCareMoodCode constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareMoodCode(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateBarriersToPatientCareCodeP constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareCodeP(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateBarriersToPatientCareCode constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareCode(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareCode(diagnostics, context);
	}

	/**
	 * Validates the validateBarriersToPatientCareValue constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareValue(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareValue(diagnostics, context);
	}

	/**
	 * Validates the validateBarriersToPatientCareValueP constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareValueP(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSMedicationsAdministeredSection(
			EMSMedicationsAdministeredSection emsMedicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsMedicationsAdministeredSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionTemplateId(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionCode(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionCodeP(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionTitle(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionText(emsMedicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionMedicationAdministered(emsMedicationsAdministeredSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSMedicationsAdministeredSectionTemplateId constraint of '<em>EMS Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionTemplateId(
			EMSMedicationsAdministeredSection emsMedicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsMedicationsAdministeredSection.validateEMSMedicationsAdministeredSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSMedicationsAdministeredSectionCode constraint of '<em>EMS Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionCode(
			EMSMedicationsAdministeredSection emsMedicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsMedicationsAdministeredSection.validateEMSMedicationsAdministeredSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSMedicationsAdministeredSectionCodeP constraint of '<em>EMS Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionCodeP(
			EMSMedicationsAdministeredSection emsMedicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsMedicationsAdministeredSection.validateEMSMedicationsAdministeredSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSMedicationsAdministeredSectionTitle constraint of '<em>EMS Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionTitle(
			EMSMedicationsAdministeredSection emsMedicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsMedicationsAdministeredSection.validateEMSMedicationsAdministeredSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSMedicationsAdministeredSectionText constraint of '<em>EMS Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionText(
			EMSMedicationsAdministeredSection emsMedicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsMedicationsAdministeredSection.validateEMSMedicationsAdministeredSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSMedicationsAdministeredSectionMedicationAdministered constraint of '<em>EMS Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSMedicationsAdministeredSection_validateEMSMedicationsAdministeredSectionMedicationAdministered(
			EMSMedicationsAdministeredSection emsMedicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsMedicationsAdministeredSection.validateEMSMedicationsAdministeredSectionMedicationAdministered(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered(MedicationAdministered medicationAdministered,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationAdministered, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSubstanceAdministration_validateClassCode(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredMedicationNotAdministeredEntryRelationship(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredMedicationConsumable(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredMedicationAdministeredResponseRelationship(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredMedicationComplicationRelationship(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredMedicationPriorAdministrationRelationship(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredMedicationPerformerParticipation(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredMedicationAuthorizationRelationship(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredMedicationAdministrationDeviceParticipant(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredTemplateId(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredClassCode(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredNegationInd(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredEffectiveTime(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredRouteCodeP(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredRouteCode(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredDoseQuantity(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredRateQuantity(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredApproachSiteCodeP(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationAdministered_validateMedicationAdministeredApproachSiteCode(medicationAdministered, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationNotAdministeredEntryRelationship constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationNotAdministeredEntryRelationship(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationNotAdministeredEntryRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationConsumable constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationConsumable(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationConsumable(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationAdministeredResponseRelationship constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationAdministeredResponseRelationship(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationAdministeredResponseRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationComplicationRelationship constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationComplicationRelationship(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationComplicationRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationPriorAdministrationRelationship constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationPriorAdministrationRelationship(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationPriorAdministrationRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationPerformerParticipation constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationPerformerParticipation(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationPerformerParticipation(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationAuthorizationRelationship constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationAuthorizationRelationship(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationAuthorizationRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationAdministrationDeviceParticipant constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationAdministrationDeviceParticipant(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationAdministrationDeviceParticipant(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredTemplateId constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredTemplateId(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredClassCode constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredClassCode(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredNegationInd constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredNegationInd(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredNegationInd(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredEffectiveTime constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredEffectiveTime(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredRouteCodeP constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredRouteCodeP(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredRouteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredRouteCode constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredRouteCode(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredRouteCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredDoseQuantity constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredDoseQuantity(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredDoseQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredRateQuantity constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredRateQuantity(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredRateQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredApproachSiteCodeP constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredApproachSiteCodeP(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredApproachSiteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredApproachSiteCode constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredApproachSiteCode(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredApproachSiteCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProceduresPerformedSection(EMSProceduresPerformedSection emsProceduresPerformedSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsProceduresPerformedSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionTemplateId(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionCode(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionCodeP(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionTitle(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionText(emsProceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionProcedureActivityProcedure1(emsProceduresPerformedSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSProceduresPerformedSectionTemplateId constraint of '<em>EMS Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionTemplateId(
			EMSProceduresPerformedSection emsProceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsProceduresPerformedSection.validateEMSProceduresPerformedSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProceduresPerformedSectionCode constraint of '<em>EMS Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionCode(
			EMSProceduresPerformedSection emsProceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsProceduresPerformedSection.validateEMSProceduresPerformedSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProceduresPerformedSectionCodeP constraint of '<em>EMS Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionCodeP(
			EMSProceduresPerformedSection emsProceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsProceduresPerformedSection.validateEMSProceduresPerformedSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProceduresPerformedSectionTitle constraint of '<em>EMS Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionTitle(
			EMSProceduresPerformedSection emsProceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsProceduresPerformedSection.validateEMSProceduresPerformedSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProceduresPerformedSectionText constraint of '<em>EMS Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionText(
			EMSProceduresPerformedSection emsProceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsProceduresPerformedSection.validateEMSProceduresPerformedSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProceduresPerformedSectionProcedureActivityProcedure1 constraint of '<em>EMS Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProceduresPerformedSection_validateEMSProceduresPerformedSectionProcedureActivityProcedure1(
			EMSProceduresPerformedSection emsProceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsProceduresPerformedSection.validateEMSProceduresPerformedSectionProcedureActivityProcedure1(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure(Procedure procedure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedure, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureAbandonedProcedureRelationship(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedurePriorRelationship(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureNumberOfAttemptsRelationship(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureSuccessfulRelationship(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureComplicationsRelationship(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedurePatientResponseRelationship(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedurePerformer(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureAirwayConfirmationRelationship(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureReasonProcedureNotAttemptedRelationship(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureTemplateId(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureCode(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureCodeP(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureNegationInd(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureStatusCode(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureEffectiveTime(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureApproachSiteCode(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureApproachSiteCodeP(procedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedure_validateProcedureDeviceParticipation(procedure, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureAbandonedProcedureRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureAbandonedProcedureRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedureAbandonedProcedureRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePriorRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedurePriorRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedurePriorRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureNumberOfAttemptsRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedureNumberOfAttemptsRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSuccessfulRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureSuccessfulRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedureSuccessfulRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureComplicationsRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureComplicationsRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedureComplicationsRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedurePatientResponseRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedurePatientResponseRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePerformer constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedurePerformer(Procedure procedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedure.validateProcedurePerformer(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureAirwayConfirmationRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureAirwayConfirmationRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedureAirwayConfirmationRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureReasonProcedureNotAttemptedRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureReasonProcedureNotAttemptedRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedureReasonProcedureNotAttemptedRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureTemplateId constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureTemplateId(Procedure procedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedure.validateProcedureTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureCode constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureCode(Procedure procedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedure.validateProcedureCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureCodeP constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureCodeP(Procedure procedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedure.validateProcedureCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNegationInd constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureNegationInd(Procedure procedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedure.validateProcedureNegationInd(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureStatusCode constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureStatusCode(Procedure procedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedure.validateProcedureStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureEffectiveTime constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureEffectiveTime(Procedure procedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedure.validateProcedureEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureApproachSiteCode constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureApproachSiteCode(Procedure procedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedure.validateProcedureApproachSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureApproachSiteCodeP constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureApproachSiteCodeP(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedureApproachSiteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureDeviceParticipation constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureDeviceParticipation(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedureDeviceParticipation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPatientCareNarrativeSection(EMSPatientCareNarrativeSection emsPatientCareNarrativeSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsPatientCareNarrativeSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPatientCareNarrativeSection_validateEMSPatientCareNarrativeSectionTemplateId(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPatientCareNarrativeSection_validateEMSPatientCareNarrativeSectionCode(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPatientCareNarrativeSection_validateEMSPatientCareNarrativeSectionCodeP(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPatientCareNarrativeSection_validateEMSPatientCareNarrativeSectionTitle(emsPatientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPatientCareNarrativeSection_validateEMSPatientCareNarrativeSectionText(emsPatientCareNarrativeSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSPatientCareNarrativeSectionTemplateId constraint of '<em>EMS Patient Care Narrative Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPatientCareNarrativeSection_validateEMSPatientCareNarrativeSectionTemplateId(
			EMSPatientCareNarrativeSection emsPatientCareNarrativeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPatientCareNarrativeSection.validateEMSPatientCareNarrativeSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPatientCareNarrativeSectionCode constraint of '<em>EMS Patient Care Narrative Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPatientCareNarrativeSection_validateEMSPatientCareNarrativeSectionCode(
			EMSPatientCareNarrativeSection emsPatientCareNarrativeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPatientCareNarrativeSection.validateEMSPatientCareNarrativeSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPatientCareNarrativeSectionCodeP constraint of '<em>EMS Patient Care Narrative Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPatientCareNarrativeSection_validateEMSPatientCareNarrativeSectionCodeP(
			EMSPatientCareNarrativeSection emsPatientCareNarrativeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPatientCareNarrativeSection.validateEMSPatientCareNarrativeSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPatientCareNarrativeSectionTitle constraint of '<em>EMS Patient Care Narrative Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPatientCareNarrativeSection_validateEMSPatientCareNarrativeSectionTitle(
			EMSPatientCareNarrativeSection emsPatientCareNarrativeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPatientCareNarrativeSection.validateEMSPatientCareNarrativeSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPatientCareNarrativeSectionText constraint of '<em>EMS Patient Care Narrative Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPatientCareNarrativeSection_validateEMSPatientCareNarrativeSectionText(
			EMSPatientCareNarrativeSection emsPatientCareNarrativeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPatientCareNarrativeSection.validateEMSPatientCareNarrativeSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSceneSection(EMSSceneSection emsSceneSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsSceneSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSceneSection_validateEMSSceneSectionTemplateId(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSceneSection_validateEMSSceneSectionCode(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSceneSection_validateEMSSceneSectionCodeP(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSceneSection_validateEMSSceneSectionTitle(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSceneSection_validateEMSSceneSectionText(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSceneSection_validateEMSSceneSectionFirstUnitIndicator(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSceneSection_validateEMSSceneSectionScenePatientCount(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSceneSection_validateEMSSceneSectionMassCasualtyIndicator(emsSceneSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSceneSection_validateEMSSceneSectionLocationTypeObservation(emsSceneSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSSceneSectionTemplateId constraint of '<em>EMS Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSceneSection_validateEMSSceneSectionTemplateId(EMSSceneSection emsSceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSceneSection.validateEMSSceneSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSceneSectionCode constraint of '<em>EMS Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSceneSection_validateEMSSceneSectionCode(EMSSceneSection emsSceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSceneSection.validateEMSSceneSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSceneSectionCodeP constraint of '<em>EMS Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSceneSection_validateEMSSceneSectionCodeP(EMSSceneSection emsSceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSceneSection.validateEMSSceneSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSceneSectionTitle constraint of '<em>EMS Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSceneSection_validateEMSSceneSectionTitle(EMSSceneSection emsSceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSceneSection.validateEMSSceneSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSceneSectionText constraint of '<em>EMS Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSceneSection_validateEMSSceneSectionText(EMSSceneSection emsSceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSceneSection.validateEMSSceneSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSceneSectionFirstUnitIndicator constraint of '<em>EMS Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSceneSection_validateEMSSceneSectionFirstUnitIndicator(EMSSceneSection emsSceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSceneSection.validateEMSSceneSectionFirstUnitIndicator(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSceneSectionScenePatientCount constraint of '<em>EMS Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSceneSection_validateEMSSceneSectionScenePatientCount(EMSSceneSection emsSceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSceneSection.validateEMSSceneSectionScenePatientCount(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSceneSectionMassCasualtyIndicator constraint of '<em>EMS Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSceneSection_validateEMSSceneSectionMassCasualtyIndicator(EMSSceneSection emsSceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSceneSection.validateEMSSceneSectionMassCasualtyIndicator(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSceneSectionLocationTypeObservation constraint of '<em>EMS Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSceneSection_validateEMSSceneSectionLocationTypeObservation(
			EMSSceneSection emsSceneSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSceneSection.validateEMSSceneSectionLocationTypeObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator(FirstUnitIndicator firstUnitIndicator, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(firstUnitIndicator, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateFirstUnitIndicator_validateFirstUnitIndicatorTemplateId(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateFirstUnitIndicator_validateFirstUnitIndicatorMoodCode(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateFirstUnitIndicator_validateFirstUnitIndicatorCodeP(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateFirstUnitIndicator_validateFirstUnitIndicatorCode(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateFirstUnitIndicator_validateFirstUnitIndicatorValue(firstUnitIndicator, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateFirstUnitIndicatorTemplateId constraint of '<em>First Unit Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator_validateFirstUnitIndicatorTemplateId(
			FirstUnitIndicator firstUnitIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitIndicator.validateFirstUnitIndicatorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitIndicatorMoodCode constraint of '<em>First Unit Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator_validateFirstUnitIndicatorMoodCode(FirstUnitIndicator firstUnitIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitIndicator.validateFirstUnitIndicatorMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitIndicatorCodeP constraint of '<em>First Unit Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator_validateFirstUnitIndicatorCodeP(FirstUnitIndicator firstUnitIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitIndicator.validateFirstUnitIndicatorCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitIndicatorCode constraint of '<em>First Unit Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator_validateFirstUnitIndicatorCode(FirstUnitIndicator firstUnitIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitIndicator.validateFirstUnitIndicatorCode(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitIndicatorValue constraint of '<em>First Unit Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator_validateFirstUnitIndicatorValue(FirstUnitIndicator firstUnitIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitIndicator.validateFirstUnitIndicatorValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount(ScenePatientCount scenePatientCount, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(scenePatientCount, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validateScenePatientCount_validateScenePatientCountTemplateId(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validateScenePatientCount_validateScenePatientCountMoodCode(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validateScenePatientCount_validateScenePatientCountCodeP(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validateScenePatientCount_validateScenePatientCountCode(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) result &= validateScenePatientCount_validateScenePatientCountValue(scenePatientCount, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateScenePatientCountTemplateId constraint of '<em>Scene Patient Count</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount_validateScenePatientCountTemplateId(ScenePatientCount scenePatientCount,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scenePatientCount.validateScenePatientCountTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateScenePatientCountMoodCode constraint of '<em>Scene Patient Count</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount_validateScenePatientCountMoodCode(ScenePatientCount scenePatientCount,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scenePatientCount.validateScenePatientCountMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateScenePatientCountCodeP constraint of '<em>Scene Patient Count</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount_validateScenePatientCountCodeP(ScenePatientCount scenePatientCount,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scenePatientCount.validateScenePatientCountCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateScenePatientCountCode constraint of '<em>Scene Patient Count</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount_validateScenePatientCountCode(ScenePatientCount scenePatientCount,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scenePatientCount.validateScenePatientCountCode(diagnostics, context);
	}

	/**
	 * Validates the validateScenePatientCountValue constraint of '<em>Scene Patient Count</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount_validateScenePatientCountValue(ScenePatientCount scenePatientCount,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scenePatientCount.validateScenePatientCountValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator(MassCasualtyIndicator massCasualtyIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(massCasualtyIndicator, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateMassCasualtyIndicator_validateMassCasualtyIndicatorTemplateId(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateMassCasualtyIndicator_validateMassCasualtyIndicatorMoodCode(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateMassCasualtyIndicator_validateMassCasualtyIndicatorCodeP(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateMassCasualtyIndicator_validateMassCasualtyIndicatorCode(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateMassCasualtyIndicator_validateMassCasualtyIndicatorValue(massCasualtyIndicator, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMassCasualtyIndicatorTemplateId constraint of '<em>Mass Casualty Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator_validateMassCasualtyIndicatorTemplateId(
			MassCasualtyIndicator massCasualtyIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return massCasualtyIndicator.validateMassCasualtyIndicatorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMassCasualtyIndicatorMoodCode constraint of '<em>Mass Casualty Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator_validateMassCasualtyIndicatorMoodCode(
			MassCasualtyIndicator massCasualtyIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return massCasualtyIndicator.validateMassCasualtyIndicatorMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateMassCasualtyIndicatorCodeP constraint of '<em>Mass Casualty Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator_validateMassCasualtyIndicatorCodeP(
			MassCasualtyIndicator massCasualtyIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return massCasualtyIndicator.validateMassCasualtyIndicatorCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMassCasualtyIndicatorCode constraint of '<em>Mass Casualty Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator_validateMassCasualtyIndicatorCode(
			MassCasualtyIndicator massCasualtyIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return massCasualtyIndicator.validateMassCasualtyIndicatorCode(diagnostics, context);
	}

	/**
	 * Validates the validateMassCasualtyIndicatorValue constraint of '<em>Mass Casualty Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator_validateMassCasualtyIndicatorValue(
			MassCasualtyIndicator massCasualtyIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return massCasualtyIndicator.validateMassCasualtyIndicatorValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocationTypeObservation(LocationTypeObservation locationTypeObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(locationTypeObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLocationTypeObservation_validateLocationTypeObservationTemplateId(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLocationTypeObservation_validateLocationTypeObservationCodeP(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLocationTypeObservation_validateLocationTypeObservationCode(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLocationTypeObservation_validateLocationTypeObservationValue(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLocationTypeObservation_validateLocationTypeObservationValueP(locationTypeObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateLocationTypeObservationTemplateId constraint of '<em>Location Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocationTypeObservation_validateLocationTypeObservationTemplateId(
			LocationTypeObservation locationTypeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return locationTypeObservation.validateLocationTypeObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateLocationTypeObservationCodeP constraint of '<em>Location Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocationTypeObservation_validateLocationTypeObservationCodeP(
			LocationTypeObservation locationTypeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return locationTypeObservation.validateLocationTypeObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLocationTypeObservationCode constraint of '<em>Location Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocationTypeObservation_validateLocationTypeObservationCode(
			LocationTypeObservation locationTypeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return locationTypeObservation.validateLocationTypeObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateLocationTypeObservationValue constraint of '<em>Location Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocationTypeObservation_validateLocationTypeObservationValue(
			LocationTypeObservation locationTypeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return locationTypeObservation.validateLocationTypeObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateLocationTypeObservationValueP constraint of '<em>Location Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocationTypeObservation_validateLocationTypeObservationValueP(
			LocationTypeObservation locationTypeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return locationTypeObservation.validateLocationTypeObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispatchSection(EMSDispatchSection emsDispatchSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsDispatchSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispatchSection_validateEMSDispatchSectionTemplateId(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispatchSection_validateEMSDispatchSectionCode(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispatchSection_validateEMSDispatchSectionCodeP(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispatchSection_validateEMSDispatchSectionTitle(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispatchSection_validateEMSDispatchSectionText(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispatchSection_validateEMSDispatchSectionEmergencyMedicalDispatchObservation(emsDispatchSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispatchSection_validateEMSDispatchSectionComplaintReportedByDispatch(emsDispatchSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSDispatchSectionTemplateId constraint of '<em>EMS Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispatchSection_validateEMSDispatchSectionTemplateId(
			EMSDispatchSection emsDispatchSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispatchSection.validateEMSDispatchSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispatchSectionCode constraint of '<em>EMS Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispatchSection_validateEMSDispatchSectionCode(EMSDispatchSection emsDispatchSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispatchSection.validateEMSDispatchSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispatchSectionCodeP constraint of '<em>EMS Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispatchSection_validateEMSDispatchSectionCodeP(EMSDispatchSection emsDispatchSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispatchSection.validateEMSDispatchSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispatchSectionTitle constraint of '<em>EMS Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispatchSection_validateEMSDispatchSectionTitle(EMSDispatchSection emsDispatchSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispatchSection.validateEMSDispatchSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispatchSectionText constraint of '<em>EMS Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispatchSection_validateEMSDispatchSectionText(EMSDispatchSection emsDispatchSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispatchSection.validateEMSDispatchSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispatchSectionEmergencyMedicalDispatchObservation constraint of '<em>EMS Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispatchSection_validateEMSDispatchSectionEmergencyMedicalDispatchObservation(
			EMSDispatchSection emsDispatchSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispatchSection.validateEMSDispatchSectionEmergencyMedicalDispatchObservation(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispatchSectionComplaintReportedByDispatch constraint of '<em>EMS Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispatchSection_validateEMSDispatchSectionComplaintReportedByDispatch(
			EMSDispatchSection emsDispatchSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispatchSection.validateEMSDispatchSectionComplaintReportedByDispatch(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emergencyMedicalDispatchObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationTemplateId(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationMoodCode(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationCodeP(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationCode(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationValue(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationValueP(emergencyMedicalDispatchObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationTemplateId constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationTemplateId(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationMoodCode constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationMoodCode(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationCodeP constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationCodeP(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationCode constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationCode(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationValue constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationValue(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationValueP constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationValueP(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchReason(DispatchReason dispatchReason, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchReason, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchReason_validateDispatchReasonTemplateId(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchReason_validateDispatchReasonMoodCode(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchReason_validateDispatchReasonCodeP(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchReason_validateDispatchReasonCode(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchReason_validateDispatchReasonValue(dispatchReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchReason_validateDispatchReasonValueP(dispatchReason, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDispatchReasonTemplateId constraint of '<em>Dispatch Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchReason_validateDispatchReasonTemplateId(DispatchReason dispatchReason,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchReason.validateDispatchReasonTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchReasonMoodCode constraint of '<em>Dispatch Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchReason_validateDispatchReasonMoodCode(DispatchReason dispatchReason,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchReason.validateDispatchReasonMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchReasonCodeP constraint of '<em>Dispatch Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchReason_validateDispatchReasonCodeP(DispatchReason dispatchReason,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchReason.validateDispatchReasonCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchReasonCode constraint of '<em>Dispatch Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchReason_validateDispatchReasonCode(DispatchReason dispatchReason,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchReason.validateDispatchReasonCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchReasonValue constraint of '<em>Dispatch Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchReason_validateDispatchReasonValue(DispatchReason dispatchReason,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchReason.validateDispatchReasonValue(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchReasonValueP constraint of '<em>Dispatch Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchReason_validateDispatchReasonValueP(DispatchReason dispatchReason,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchReason.validateDispatchReasonValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection(EMSDispositionSection emsDispositionSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsDispositionSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionTemplateId(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionCode(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionCodeP(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionTitle(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionText(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionNumberOfPatientsObservation(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionTransportModeObservation(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionTransportMethodObservation(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionReasonForChoosingDestinationObservation(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionPrearrivalActivationObservation(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionPatientConditionChangeAtDestinationObservation(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionPrimaryDestinationHospitalCapability(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionDestinationWard(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionUnitDisposition(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionPatientEngagement(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionCrewDisposition(emsDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSDispositionSection_validateEMSDispositionSectionTransportDisposition(emsDispositionSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSDispositionSectionTemplateId constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionTemplateId(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionCode constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionCode(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionCodeP constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionCodeP(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionTitle constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionTitle(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionText constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionText(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionNumberOfPatientsObservation constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionNumberOfPatientsObservation(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionNumberOfPatientsObservation(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionTransportModeObservation constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionTransportModeObservation(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionTransportModeObservation(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionTransportMethodObservation constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionTransportMethodObservation(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionTransportMethodObservation(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionReasonForChoosingDestinationObservation constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionReasonForChoosingDestinationObservation(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionReasonForChoosingDestinationObservation(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionPrearrivalActivationObservation constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionPrearrivalActivationObservation(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionPrearrivalActivationObservation(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionPatientConditionChangeAtDestinationObservation constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionPatientConditionChangeAtDestinationObservation(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionPatientConditionChangeAtDestinationObservation(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionPrimaryDestinationHospitalCapability constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionPrimaryDestinationHospitalCapability(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionPrimaryDestinationHospitalCapability(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionDestinationWard constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionDestinationWard(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionDestinationWard(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionUnitDisposition constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionUnitDisposition(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionUnitDisposition(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionPatientEngagement constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionPatientEngagement(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionPatientEngagement(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionCrewDisposition constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionCrewDisposition(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionCrewDisposition(diagnostics, context);
	}

	/**
	 * Validates the validateEMSDispositionSectionTransportDisposition constraint of '<em>EMS Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSDispositionSection_validateEMSDispositionSectionTransportDisposition(
			EMSDispositionSection emsDispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsDispositionSection.validateEMSDispositionSectionTransportDisposition(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsTransportedObservation(
			NumberOfPatientsTransportedObservation numberOfPatientsTransportedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(numberOfPatientsTransportedObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateNumberOfPatientsTransportedObservation_validateNumberOfPatientsTransportedObservationTemplateId(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateNumberOfPatientsTransportedObservation_validateNumberOfPatientsTransportedObservationMoodCode(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateNumberOfPatientsTransportedObservation_validateNumberOfPatientsTransportedObservationCodeP(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateNumberOfPatientsTransportedObservation_validateNumberOfPatientsTransportedObservationCode(numberOfPatientsTransportedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateNumberOfPatientsTransportedObservation_validateNumberOfPatientsTransportedObservationValue(numberOfPatientsTransportedObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateNumberOfPatientsTransportedObservationTemplateId constraint of '<em>Number Of Patients Transported Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsTransportedObservation_validateNumberOfPatientsTransportedObservationTemplateId(
			NumberOfPatientsTransportedObservation numberOfPatientsTransportedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return numberOfPatientsTransportedObservation.validateNumberOfPatientsTransportedObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateNumberOfPatientsTransportedObservationMoodCode constraint of '<em>Number Of Patients Transported Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsTransportedObservation_validateNumberOfPatientsTransportedObservationMoodCode(
			NumberOfPatientsTransportedObservation numberOfPatientsTransportedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return numberOfPatientsTransportedObservation.validateNumberOfPatientsTransportedObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateNumberOfPatientsTransportedObservationCodeP constraint of '<em>Number Of Patients Transported Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsTransportedObservation_validateNumberOfPatientsTransportedObservationCodeP(
			NumberOfPatientsTransportedObservation numberOfPatientsTransportedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return numberOfPatientsTransportedObservation.validateNumberOfPatientsTransportedObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateNumberOfPatientsTransportedObservationCode constraint of '<em>Number Of Patients Transported Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsTransportedObservation_validateNumberOfPatientsTransportedObservationCode(
			NumberOfPatientsTransportedObservation numberOfPatientsTransportedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return numberOfPatientsTransportedObservation.validateNumberOfPatientsTransportedObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateNumberOfPatientsTransportedObservationValue constraint of '<em>Number Of Patients Transported Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsTransportedObservation_validateNumberOfPatientsTransportedObservationValue(
			NumberOfPatientsTransportedObservation numberOfPatientsTransportedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return numberOfPatientsTransportedObservation.validateNumberOfPatientsTransportedObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation(TransportModeObservation transportModeObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(transportModeObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeObservation_validateTransportModeObservationTemplateId(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeObservation_validateTransportModeObservationMoodCode(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeObservation_validateTransportModeObservationCodeP(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeObservation_validateTransportModeObservationCode(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeObservation_validateTransportModeObservationValue(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeObservation_validateTransportModeObservationValueP(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeObservation_validateTransportModeObservationTransportModeQualifierRelationship(transportModeObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateTransportModeObservationTemplateId constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationTemplateId(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeObservationMoodCode constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationMoodCode(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeObservationCodeP constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationCodeP(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeObservationCode constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationCode(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeObservationValue constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationValue(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeObservationValueP constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationValueP(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationValueP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeObservationTransportModeQualifierRelationship constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationTransportModeQualifierRelationship(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationTransportModeQualifierRelationship(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation(TransportMethodObservation transportMethodObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(transportMethodObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportMethodObservation_validateTransportMethodObservationTemplateId(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportMethodObservation_validateTransportMethodObservationMoodCode(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportMethodObservation_validateTransportMethodObservationCodeP(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportMethodObservation_validateTransportMethodObservationCode(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportMethodObservation_validateTransportMethodObservationValue(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportMethodObservation_validateTransportMethodObservationValueP(transportMethodObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateTransportMethodObservationTemplateId constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationTemplateId(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTransportMethodObservationMoodCode constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationMoodCode(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportMethodObservationCodeP constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationCodeP(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportMethodObservationCode constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationCode(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportMethodObservationValue constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationValue(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateTransportMethodObservationValueP constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationValueP(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(reasonForChoosingDestinationObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationTemplateId(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationMoodCode(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationCodeP(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationCode(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationValue(reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationValueP(reasonForChoosingDestinationObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationTemplateId constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationTemplateId(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationMoodCode constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationMoodCode(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationCodeP constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationCodeP(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationCode constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationCode(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationValue constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationValue(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationValueP constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationValueP(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(prearrivalActivationObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationTemplateId(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationMoodCode(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationCodeP(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationCode(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationEffectiveTime(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationValue(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationValueP(prearrivalActivationObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePrearrivalActivationObservationTemplateId constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationTemplateId(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationMoodCode constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationMoodCode(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationCodeP constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationCodeP(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationCode constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationCode(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationEffectiveTime constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationEffectiveTime(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationValue constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationValue(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationValueP constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationValueP(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionAtDestinationObservation(
			PatientConditionAtDestinationObservation patientConditionAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientConditionAtDestinationObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationTemplateId(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationMoodCode(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationCodeP(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationCode(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationValue(patientConditionAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationValueP(patientConditionAtDestinationObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientConditionAtDestinationObservationTemplateId constraint of '<em>Patient Condition At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationTemplateId(
			PatientConditionAtDestinationObservation patientConditionAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionAtDestinationObservation.validatePatientConditionAtDestinationObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientConditionAtDestinationObservationMoodCode constraint of '<em>Patient Condition At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationMoodCode(
			PatientConditionAtDestinationObservation patientConditionAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionAtDestinationObservation.validatePatientConditionAtDestinationObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientConditionAtDestinationObservationCodeP constraint of '<em>Patient Condition At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationCodeP(
			PatientConditionAtDestinationObservation patientConditionAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionAtDestinationObservation.validatePatientConditionAtDestinationObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientConditionAtDestinationObservationCode constraint of '<em>Patient Condition At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationCode(
			PatientConditionAtDestinationObservation patientConditionAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionAtDestinationObservation.validatePatientConditionAtDestinationObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientConditionAtDestinationObservationValue constraint of '<em>Patient Condition At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationValue(
			PatientConditionAtDestinationObservation patientConditionAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionAtDestinationObservation.validatePatientConditionAtDestinationObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validatePatientConditionAtDestinationObservationValueP constraint of '<em>Patient Condition At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionAtDestinationObservation_validatePatientConditionAtDestinationObservationValueP(
			PatientConditionAtDestinationObservation patientConditionAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionAtDestinationObservation.validatePatientConditionAtDestinationObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationHospitalCapability(DestinationHospitalCapability destinationHospitalCapability,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(destinationHospitalCapability, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationHospitalCapability_validateDestinationHospitalCapabilityTemplateId(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationHospitalCapability_validateDestinationHospitalCapabilityClassCode(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationHospitalCapability_validateDestinationHospitalCapabilityCodeP(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationHospitalCapability_validateDestinationHospitalCapabilityCode(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationHospitalCapability_validateDestinationHospitalCapabilityMoodCode(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationHospitalCapability_validateDestinationHospitalCapabilityValue(destinationHospitalCapability, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationHospitalCapability_validateDestinationHospitalCapabilityValueP(destinationHospitalCapability, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDestinationHospitalCapabilityTemplateId constraint of '<em>Destination Hospital Capability</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationHospitalCapability_validateDestinationHospitalCapabilityTemplateId(
			DestinationHospitalCapability destinationHospitalCapability, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return destinationHospitalCapability.validateDestinationHospitalCapabilityTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationHospitalCapabilityClassCode constraint of '<em>Destination Hospital Capability</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationHospitalCapability_validateDestinationHospitalCapabilityClassCode(
			DestinationHospitalCapability destinationHospitalCapability, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return destinationHospitalCapability.validateDestinationHospitalCapabilityClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationHospitalCapabilityCodeP constraint of '<em>Destination Hospital Capability</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationHospitalCapability_validateDestinationHospitalCapabilityCodeP(
			DestinationHospitalCapability destinationHospitalCapability, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return destinationHospitalCapability.validateDestinationHospitalCapabilityCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationHospitalCapabilityCode constraint of '<em>Destination Hospital Capability</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationHospitalCapability_validateDestinationHospitalCapabilityCode(
			DestinationHospitalCapability destinationHospitalCapability, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return destinationHospitalCapability.validateDestinationHospitalCapabilityCode(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationHospitalCapabilityMoodCode constraint of '<em>Destination Hospital Capability</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationHospitalCapability_validateDestinationHospitalCapabilityMoodCode(
			DestinationHospitalCapability destinationHospitalCapability, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return destinationHospitalCapability.validateDestinationHospitalCapabilityMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationHospitalCapabilityValue constraint of '<em>Destination Hospital Capability</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationHospitalCapability_validateDestinationHospitalCapabilityValue(
			DestinationHospitalCapability destinationHospitalCapability, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return destinationHospitalCapability.validateDestinationHospitalCapabilityValue(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationHospitalCapabilityValueP constraint of '<em>Destination Hospital Capability</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationHospitalCapability_validateDestinationHospitalCapabilityValueP(
			DestinationHospitalCapability destinationHospitalCapability, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return destinationHospitalCapability.validateDestinationHospitalCapabilityValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationWard(DestinationWard destinationWard, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(destinationWard, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationWard_validateDestinationWardTemplateId(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationWard_validateDestinationWardClassCode(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationWard_validateDestinationWardCodeP(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationWard_validateDestinationWardCode(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationWard_validateDestinationWardMoodCode(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationWard_validateDestinationWardValue(destinationWard, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationWard_validateDestinationWardValueP(destinationWard, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDestinationWardTemplateId constraint of '<em>Destination Ward</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationWard_validateDestinationWardTemplateId(DestinationWard destinationWard,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationWard.validateDestinationWardTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationWardClassCode constraint of '<em>Destination Ward</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationWard_validateDestinationWardClassCode(DestinationWard destinationWard,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationWard.validateDestinationWardClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationWardCodeP constraint of '<em>Destination Ward</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationWard_validateDestinationWardCodeP(DestinationWard destinationWard,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationWard.validateDestinationWardCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationWardCode constraint of '<em>Destination Ward</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationWard_validateDestinationWardCode(DestinationWard destinationWard,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationWard.validateDestinationWardCode(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationWardMoodCode constraint of '<em>Destination Ward</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationWard_validateDestinationWardMoodCode(DestinationWard destinationWard,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationWard.validateDestinationWardMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationWardValue constraint of '<em>Destination Ward</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationWard_validateDestinationWardValue(DestinationWard destinationWard,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationWard.validateDestinationWardValue(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationWardValueP constraint of '<em>Destination Ward</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationWard_validateDestinationWardValueP(DestinationWard destinationWard,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationWard.validateDestinationWardValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitDisposition(UnitDisposition unitDisposition, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitDisposition, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitDisposition_validateUnitDispositionTemplateId(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitDisposition_validateUnitDispositionCodeP(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitDisposition_validateUnitDispositionCode(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitDisposition_validateUnitDispositionValue(unitDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitDisposition_validateUnitDispositionValueP(unitDisposition, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateUnitDispositionTemplateId constraint of '<em>Unit Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitDisposition_validateUnitDispositionTemplateId(UnitDisposition unitDisposition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitDisposition.validateUnitDispositionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitDispositionCodeP constraint of '<em>Unit Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitDisposition_validateUnitDispositionCodeP(UnitDisposition unitDisposition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitDisposition.validateUnitDispositionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitDispositionCode constraint of '<em>Unit Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitDisposition_validateUnitDispositionCode(UnitDisposition unitDisposition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitDisposition.validateUnitDispositionCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitDispositionValue constraint of '<em>Unit Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitDisposition_validateUnitDispositionValue(UnitDisposition unitDisposition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitDisposition.validateUnitDispositionValue(diagnostics, context);
	}

	/**
	 * Validates the validateUnitDispositionValueP constraint of '<em>Unit Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitDisposition_validateUnitDispositionValueP(UnitDisposition unitDisposition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitDisposition.validateUnitDispositionValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientEngagement(PatientEngagement patientEngagement, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientEngagement, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientEngagement_validatePatientEngagementTemplateId(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientEngagement_validatePatientEngagementCodeP(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientEngagement_validatePatientEngagementCode(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientEngagement_validatePatientEngagementValue(patientEngagement, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientEngagement_validatePatientEngagementValueP(patientEngagement, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientEngagementTemplateId constraint of '<em>Patient Engagement</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientEngagement_validatePatientEngagementTemplateId(PatientEngagement patientEngagement,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientEngagement.validatePatientEngagementTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientEngagementCodeP constraint of '<em>Patient Engagement</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientEngagement_validatePatientEngagementCodeP(PatientEngagement patientEngagement,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientEngagement.validatePatientEngagementCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientEngagementCode constraint of '<em>Patient Engagement</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientEngagement_validatePatientEngagementCode(PatientEngagement patientEngagement,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientEngagement.validatePatientEngagementCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientEngagementValue constraint of '<em>Patient Engagement</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientEngagement_validatePatientEngagementValue(PatientEngagement patientEngagement,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientEngagement.validatePatientEngagementValue(diagnostics, context);
	}

	/**
	 * Validates the validatePatientEngagementValueP constraint of '<em>Patient Engagement</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientEngagement_validatePatientEngagementValueP(PatientEngagement patientEngagement,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientEngagement.validatePatientEngagementValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCrewDisposition(CrewDisposition crewDisposition, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(crewDisposition, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateCrewDisposition_validateCrewDispositionTemplateId(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateCrewDisposition_validateCrewDispositionCode(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateCrewDisposition_validateCrewDispositionValue(crewDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateCrewDisposition_validateCrewDispositionValueP(crewDisposition, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCrewDispositionTemplateId constraint of '<em>Crew Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCrewDisposition_validateCrewDispositionTemplateId(CrewDisposition crewDisposition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return crewDisposition.validateCrewDispositionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCrewDispositionCode constraint of '<em>Crew Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCrewDisposition_validateCrewDispositionCode(CrewDisposition crewDisposition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return crewDisposition.validateCrewDispositionCode(diagnostics, context);
	}

	/**
	 * Validates the validateCrewDispositionValue constraint of '<em>Crew Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCrewDisposition_validateCrewDispositionValue(CrewDisposition crewDisposition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return crewDisposition.validateCrewDispositionValue(diagnostics, context);
	}

	/**
	 * Validates the validateCrewDispositionValueP constraint of '<em>Crew Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCrewDisposition_validateCrewDispositionValueP(CrewDisposition crewDisposition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return crewDisposition.validateCrewDispositionValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDisposition(TransportDisposition transportDisposition, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(transportDisposition, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDisposition_validateTransportDispositionTemplateId(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDisposition_validateTransportDispositionCodeP(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDisposition_validateTransportDispositionCode(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDisposition_validateTransportDispositionValue(transportDisposition, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDisposition_validateTransportDispositionValueP(transportDisposition, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateTransportDispositionTemplateId constraint of '<em>Transport Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDisposition_validateTransportDispositionTemplateId(
			TransportDisposition transportDisposition, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDisposition.validateTransportDispositionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDispositionCodeP constraint of '<em>Transport Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDisposition_validateTransportDispositionCodeP(
			TransportDisposition transportDisposition, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDisposition.validateTransportDispositionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDispositionCode constraint of '<em>Transport Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDisposition_validateTransportDispositionCode(
			TransportDisposition transportDisposition, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDisposition.validateTransportDispositionCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDispositionValue constraint of '<em>Transport Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDisposition_validateTransportDispositionValue(
			TransportDisposition transportDisposition, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDisposition.validateTransportDispositionValue(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDispositionValueP constraint of '<em>Transport Disposition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDisposition_validateTransportDispositionValueP(
			TransportDisposition transportDisposition, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDisposition.validateTransportDispositionValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPersonnelAdverseEventSection(
			EMSPersonnelAdverseEventSection emsPersonnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsPersonnelAdverseEventSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionTemplateId(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionCode(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionCodeP(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionTitle(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionText(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionAdverseEventIndicator(emsPersonnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionAdverseEventTypeObservation(emsPersonnelAdverseEventSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSPersonnelAdverseEventSectionTemplateId constraint of '<em>EMS Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionTemplateId(
			EMSPersonnelAdverseEventSection emsPersonnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPersonnelAdverseEventSection.validateEMSPersonnelAdverseEventSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPersonnelAdverseEventSectionCode constraint of '<em>EMS Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionCode(
			EMSPersonnelAdverseEventSection emsPersonnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPersonnelAdverseEventSection.validateEMSPersonnelAdverseEventSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPersonnelAdverseEventSectionCodeP constraint of '<em>EMS Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionCodeP(
			EMSPersonnelAdverseEventSection emsPersonnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPersonnelAdverseEventSection.validateEMSPersonnelAdverseEventSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPersonnelAdverseEventSectionTitle constraint of '<em>EMS Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionTitle(
			EMSPersonnelAdverseEventSection emsPersonnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPersonnelAdverseEventSection.validateEMSPersonnelAdverseEventSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPersonnelAdverseEventSectionText constraint of '<em>EMS Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionText(
			EMSPersonnelAdverseEventSection emsPersonnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPersonnelAdverseEventSection.validateEMSPersonnelAdverseEventSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPersonnelAdverseEventSectionAdverseEventIndicator constraint of '<em>EMS Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionAdverseEventIndicator(
			EMSPersonnelAdverseEventSection emsPersonnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPersonnelAdverseEventSection.validateEMSPersonnelAdverseEventSectionAdverseEventIndicator(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPersonnelAdverseEventSectionAdverseEventTypeObservation constraint of '<em>EMS Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSPersonnelAdverseEventSection_validateEMSPersonnelAdverseEventSectionAdverseEventTypeObservation(
			EMSPersonnelAdverseEventSection emsPersonnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsPersonnelAdverseEventSection.validateEMSPersonnelAdverseEventSectionAdverseEventTypeObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator(AdverseEventIndicator adverseEventIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(adverseEventIndicator, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventIndicator_validateAdverseEventIndicatorTemplateId(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventIndicator_validateAdverseEventIndicatorMoodCode(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventIndicator_validateAdverseEventIndicatorCodeP(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventIndicator_validateAdverseEventIndicatorCode(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventIndicator_validateAdverseEventIndicatorValue(adverseEventIndicator, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAdverseEventIndicatorTemplateId constraint of '<em>Adverse Event Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator_validateAdverseEventIndicatorTemplateId(
			AdverseEventIndicator adverseEventIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return adverseEventIndicator.validateAdverseEventIndicatorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventIndicatorMoodCode constraint of '<em>Adverse Event Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator_validateAdverseEventIndicatorMoodCode(
			AdverseEventIndicator adverseEventIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return adverseEventIndicator.validateAdverseEventIndicatorMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventIndicatorCodeP constraint of '<em>Adverse Event Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator_validateAdverseEventIndicatorCodeP(
			AdverseEventIndicator adverseEventIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return adverseEventIndicator.validateAdverseEventIndicatorCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventIndicatorCode constraint of '<em>Adverse Event Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator_validateAdverseEventIndicatorCode(
			AdverseEventIndicator adverseEventIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return adverseEventIndicator.validateAdverseEventIndicatorCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventIndicatorValue constraint of '<em>Adverse Event Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator_validateAdverseEventIndicatorValue(
			AdverseEventIndicator adverseEventIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return adverseEventIndicator.validateAdverseEventIndicatorValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation(AdverseEventTypeObservation adverseEventTypeObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(adverseEventTypeObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationTemplateId(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationMoodCode(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationCodeP(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationCode(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationValue(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationValueP(adverseEventTypeObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAdverseEventTypeObservationTemplateId constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationTemplateId(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventTypeObservationMoodCode constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationMoodCode(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventTypeObservationCodeP constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationCodeP(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventTypeObservationCode constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationCode(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventTypeObservationValue constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationValue(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventTypeObservationValueP constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationValueP(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProtocolSection(EMSProtocolSection emsProtocolSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsProtocolSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProtocolSection_validateEMSProtocolSectionTemplateId(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProtocolSection_validateEMSProtocolSectionCode(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProtocolSection_validateEMSProtocolSectionCodeP(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProtocolSection_validateEMSProtocolSectionTitle(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProtocolSection_validateEMSProtocolSectionText(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProtocolSection_validateEMSProtocolSectionProtocolObservation(emsProtocolSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSProtocolSection_validateEMSProtocolSectionCandidatePatientRegistryType(emsProtocolSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSProtocolSectionTemplateId constraint of '<em>EMS Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProtocolSection_validateEMSProtocolSectionTemplateId(
			EMSProtocolSection emsProtocolSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsProtocolSection.validateEMSProtocolSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProtocolSectionCode constraint of '<em>EMS Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProtocolSection_validateEMSProtocolSectionCode(EMSProtocolSection emsProtocolSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsProtocolSection.validateEMSProtocolSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProtocolSectionCodeP constraint of '<em>EMS Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProtocolSection_validateEMSProtocolSectionCodeP(EMSProtocolSection emsProtocolSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsProtocolSection.validateEMSProtocolSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProtocolSectionTitle constraint of '<em>EMS Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProtocolSection_validateEMSProtocolSectionTitle(EMSProtocolSection emsProtocolSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsProtocolSection.validateEMSProtocolSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProtocolSectionText constraint of '<em>EMS Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProtocolSection_validateEMSProtocolSectionText(EMSProtocolSection emsProtocolSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsProtocolSection.validateEMSProtocolSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProtocolSectionProtocolObservation constraint of '<em>EMS Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProtocolSection_validateEMSProtocolSectionProtocolObservation(
			EMSProtocolSection emsProtocolSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsProtocolSection.validateEMSProtocolSectionProtocolObservation(diagnostics, context);
	}

	/**
	 * Validates the validateEMSProtocolSectionCandidatePatientRegistryType constraint of '<em>EMS Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSProtocolSection_validateEMSProtocolSectionCandidatePatientRegistryType(
			EMSProtocolSection emsProtocolSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsProtocolSection.validateEMSProtocolSectionCandidatePatientRegistryType(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation(ProtocolObservation protocolObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(protocolObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolObservation_validateProtocolObservationTemplateId(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolObservation_validateProtocolObservationMoodCode(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolObservation_validateProtocolObservationCodeP(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolObservation_validateProtocolObservationCode(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolObservation_validateProtocolObservationValue(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolObservation_validateProtocolObservationValueP(protocolObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProtocolObservationTemplateId constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationTemplateId(
			ProtocolObservation protocolObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolObservationMoodCode constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationMoodCode(
			ProtocolObservation protocolObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolObservationCodeP constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationCodeP(ProtocolObservation protocolObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolObservationCode constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationCode(ProtocolObservation protocolObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolObservationValue constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationValue(ProtocolObservation protocolObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolObservationValueP constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationValueP(
			ProtocolObservation protocolObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType(CandidatePatientRegistryType candidatePatientRegistryType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(candidatePatientRegistryType, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeTemplateId(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeMoodCode(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeCodeP(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeCode(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeValue(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeValueP(candidatePatientRegistryType, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeTemplateId constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeTemplateId(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeMoodCode constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeMoodCode(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeCodeP constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeCodeP(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeCode constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeCode(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeValue constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeValue(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeValue(diagnostics, context);
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeValueP constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeValueP(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSResponseSection(EMSResponseSection emsResponseSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsResponseSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSResponseSection_validateEMSResponseSectionTemplateId(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSResponseSection_validateEMSResponseSectionCode(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSResponseSection_validateEMSResponseSectionCodeP(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSResponseSection_validateEMSResponseSectionTitle(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSResponseSection_validateEMSResponseSectionText(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSResponseSection_validateEMSResponseSectionDelayOrganizer(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSResponseSection_validateEMSResponseSectionDispatchLocationOrganizer(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSResponseSection_validateEMSResponseSectionResponseOdometerReadingOrganizer(emsResponseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSResponseSection_validateEMSResponseSectionResponseModeToScene(emsResponseSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSResponseSectionTemplateId constraint of '<em>EMS Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSResponseSection_validateEMSResponseSectionTemplateId(
			EMSResponseSection emsResponseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsResponseSection.validateEMSResponseSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSResponseSectionCode constraint of '<em>EMS Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSResponseSection_validateEMSResponseSectionCode(EMSResponseSection emsResponseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsResponseSection.validateEMSResponseSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSResponseSectionCodeP constraint of '<em>EMS Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSResponseSection_validateEMSResponseSectionCodeP(EMSResponseSection emsResponseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsResponseSection.validateEMSResponseSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSResponseSectionTitle constraint of '<em>EMS Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSResponseSection_validateEMSResponseSectionTitle(EMSResponseSection emsResponseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsResponseSection.validateEMSResponseSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSResponseSectionText constraint of '<em>EMS Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSResponseSection_validateEMSResponseSectionText(EMSResponseSection emsResponseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsResponseSection.validateEMSResponseSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSResponseSectionDelayOrganizer constraint of '<em>EMS Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSResponseSection_validateEMSResponseSectionDelayOrganizer(
			EMSResponseSection emsResponseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsResponseSection.validateEMSResponseSectionDelayOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateEMSResponseSectionDispatchLocationOrganizer constraint of '<em>EMS Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSResponseSection_validateEMSResponseSectionDispatchLocationOrganizer(
			EMSResponseSection emsResponseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsResponseSection.validateEMSResponseSectionDispatchLocationOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateEMSResponseSectionResponseOdometerReadingOrganizer constraint of '<em>EMS Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSResponseSection_validateEMSResponseSectionResponseOdometerReadingOrganizer(
			EMSResponseSection emsResponseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsResponseSection.validateEMSResponseSectionResponseOdometerReadingOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateEMSResponseSectionResponseModeToScene constraint of '<em>EMS Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSResponseSection_validateEMSResponseSectionResponseModeToScene(
			EMSResponseSection emsResponseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsResponseSection.validateEMSResponseSectionResponseModeToScene(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer(DelayOrganizer delayOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(delayOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDelayOrganizer_validateDelayOrganizerDispatchDelayRelationship(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDelayOrganizer_validateDelayOrganizerResponseDelayRelationship(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDelayOrganizer_validateDelayOrganizerSceneDelayRelationship(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDelayOrganizer_validateDelayOrganizerTransportDelayRelationship(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDelayOrganizer_validateDelayOrganizerTurnaoundDelayRelationship(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDelayOrganizer_validateDelayOrganizerTemplateId(delayOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDelayOrganizerDispatchDelayRelationship constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerDispatchDelayRelationship(DelayOrganizer delayOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerDispatchDelayRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDelayOrganizerResponseDelayRelationship constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerResponseDelayRelationship(DelayOrganizer delayOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerResponseDelayRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDelayOrganizerSceneDelayRelationship constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerSceneDelayRelationship(DelayOrganizer delayOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerSceneDelayRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDelayOrganizerTransportDelayRelationship constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerTransportDelayRelationship(
			DelayOrganizer delayOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerTransportDelayRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDelayOrganizerTurnaoundDelayRelationship constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerTurnaoundDelayRelationship(
			DelayOrganizer delayOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerTurnaoundDelayRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDelayOrganizerTemplateId constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerTemplateId(DelayOrganizer delayOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationOrganizer(DispatchLocationOrganizer dispatchLocationOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchLocationOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationNameRelationship(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationLatitudeRelationship(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationLongtudeRelationship(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationOrganizer_validateDispatchLocationOrganizerTemplateId(dispatchLocationOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDispatchLocationOrganizerDispatchLocationNameRelationship constraint of '<em>Dispatch Location Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationNameRelationship(
			DispatchLocationOrganizer dispatchLocationOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationOrganizer.validateDispatchLocationOrganizerDispatchLocationNameRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationOrganizerDispatchLocationLatitudeRelationship constraint of '<em>Dispatch Location Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationLatitudeRelationship(
			DispatchLocationOrganizer dispatchLocationOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationOrganizer.validateDispatchLocationOrganizerDispatchLocationLatitudeRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationOrganizerDispatchLocationLongtudeRelationship constraint of '<em>Dispatch Location Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationLongtudeRelationship(
			DispatchLocationOrganizer dispatchLocationOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationOrganizer.validateDispatchLocationOrganizerDispatchLocationLongtudeRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationOrganizerTemplateId constraint of '<em>Dispatch Location Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationOrganizer_validateDispatchLocationOrganizerTemplateId(
			DispatchLocationOrganizer dispatchLocationOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationOrganizer.validateDispatchLocationOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseOdometerReadingOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseBeginningOdometerReadingRelationship(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseOnSceneOdometerReadingRelationship(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseDestinationOdometerReadingRelationship(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseEndingOdometerReadingRelationship(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerTemplateId(responseOdometerReadingOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponseOdometerReadingOrganizerResponseBeginningOdometerReadingRelationship constraint of '<em>Response Odometer Reading Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseBeginningOdometerReadingRelationship(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOdometerReadingOrganizer.validateResponseOdometerReadingOrganizerResponseBeginningOdometerReadingRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOdometerReadingOrganizerResponseOnSceneOdometerReadingRelationship constraint of '<em>Response Odometer Reading Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseOnSceneOdometerReadingRelationship(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOdometerReadingOrganizer.validateResponseOdometerReadingOrganizerResponseOnSceneOdometerReadingRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOdometerReadingOrganizerResponseDestinationOdometerReadingRelationship constraint of '<em>Response Odometer Reading Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseDestinationOdometerReadingRelationship(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOdometerReadingOrganizer.validateResponseOdometerReadingOrganizerResponseDestinationOdometerReadingRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOdometerReadingOrganizerResponseEndingOdometerReadingRelationship constraint of '<em>Response Odometer Reading Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseEndingOdometerReadingRelationship(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOdometerReadingOrganizer.validateResponseOdometerReadingOrganizerResponseEndingOdometerReadingRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOdometerReadingOrganizerTemplateId constraint of '<em>Response Odometer Reading Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerTemplateId(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOdometerReadingOrganizer.validateResponseOdometerReadingOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene(ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseModeToScene, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeToScene_validateResponseModeToSceneTemplateId(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeToScene_validateResponseModeToSceneMoodCode(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeToScene_validateResponseModeToSceneCodeP(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeToScene_validateResponseModeToSceneCode(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeToScene_validateResponseModeToSceneValue(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeToScene_validateResponseModeToSceneValueP(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeToScene_validateResponseModeToSceneResponseModeQualifier(responseModeToScene, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponseModeToSceneTemplateId constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneTemplateId(
			ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneMoodCode constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneMoodCode(
			ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneCodeP constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneCodeP(ResponseModeToScene responseModeToScene,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneCode constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneCode(ResponseModeToScene responseModeToScene,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneValue constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneValue(ResponseModeToScene responseModeToScene,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneValue(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneValueP constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneValueP(
			ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneValueP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneResponseModeQualifier constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneResponseModeQualifier(
			ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneResponseModeQualifier(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeQualifier(ResponseModeQualifier responseModeQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseModeQualifier, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeQualifier_validateResponseModeQualifierTemplateId(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeQualifier_validateResponseModeQualifierClassCode(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeQualifier_validateResponseModeQualifierCodeP(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeQualifier_validateResponseModeQualifierCode(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeQualifier_validateResponseModeQualifierMoodCode(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeQualifier_validateResponseModeQualifierValue(responseModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseModeQualifier_validateResponseModeQualifierValueP(responseModeQualifier, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponseModeQualifierTemplateId constraint of '<em>Response Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeQualifier_validateResponseModeQualifierTemplateId(
			ResponseModeQualifier responseModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeQualifier.validateResponseModeQualifierTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeQualifierClassCode constraint of '<em>Response Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeQualifier_validateResponseModeQualifierClassCode(
			ResponseModeQualifier responseModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeQualifier.validateResponseModeQualifierClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeQualifierCodeP constraint of '<em>Response Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeQualifier_validateResponseModeQualifierCodeP(
			ResponseModeQualifier responseModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeQualifier.validateResponseModeQualifierCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeQualifierCode constraint of '<em>Response Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeQualifier_validateResponseModeQualifierCode(
			ResponseModeQualifier responseModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeQualifier.validateResponseModeQualifierCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeQualifierMoodCode constraint of '<em>Response Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeQualifier_validateResponseModeQualifierMoodCode(
			ResponseModeQualifier responseModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeQualifier.validateResponseModeQualifierMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeQualifierValue constraint of '<em>Response Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeQualifier_validateResponseModeQualifierValue(
			ResponseModeQualifier responseModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeQualifier.validateResponseModeQualifierValue(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeQualifierValueP constraint of '<em>Response Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeQualifier_validateResponseModeQualifierValueP(
			ResponseModeQualifier responseModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeQualifier.validateResponseModeQualifierValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection(EMSSituationSection emsSituationSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsSituationSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionTemplateId(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionCode(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionCodeP(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionTitle(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionText(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionComplaint(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionPossibleInjury(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionProviderPrimaryImpression(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionPrimarySymptom(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionOtherSymptoms(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionProviderSecondaryImpressions(emsSituationSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSSituationSection_validateEMSSituationSectionInitialPatientAcuity(emsSituationSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSSituationSectionTemplateId constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionTemplateId(
			EMSSituationSection emsSituationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionCode constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionCode(EMSSituationSection emsSituationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionCodeP constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionCodeP(EMSSituationSection emsSituationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionTitle constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionTitle(EMSSituationSection emsSituationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionText constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionText(EMSSituationSection emsSituationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionComplaint constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionComplaint(
			EMSSituationSection emsSituationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionComplaint(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionPossibleInjury constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionPossibleInjury(
			EMSSituationSection emsSituationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionPossibleInjury(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionProviderPrimaryImpression constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionProviderPrimaryImpression(
			EMSSituationSection emsSituationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionProviderPrimaryImpression(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionPrimarySymptom constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionPrimarySymptom(
			EMSSituationSection emsSituationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionPrimarySymptom(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionOtherSymptoms constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionOtherSymptoms(
			EMSSituationSection emsSituationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionOtherSymptoms(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionProviderSecondaryImpressions constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionProviderSecondaryImpressions(
			EMSSituationSection emsSituationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionProviderSecondaryImpressions(diagnostics, context);
	}

	/**
	 * Validates the validateEMSSituationSectionInitialPatientAcuity constraint of '<em>EMS Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSSituationSection_validateEMSSituationSectionInitialPatientAcuity(
			EMSSituationSection emsSituationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsSituationSection.validateEMSSituationSectionInitialPatientAcuity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint(Complaint complaint, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(complaint, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintDurationRelationship(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintTypeRelationship(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintOrganSystemRelationship(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintTemplateId(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintMoodCode(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintCodeP(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintCode(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintEffectiveTime(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintValue(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintTargetSiteCode(complaint, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaint_validateComplaintTargetSiteCodeP(complaint, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComplaintDurationRelationship constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintDurationRelationship(Complaint complaint,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaint.validateComplaintDurationRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeRelationship constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintTypeRelationship(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintTypeRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemRelationship constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintOrganSystemRelationship(Complaint complaint,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaint.validateComplaintOrganSystemRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTemplateId constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintTemplateId(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintMoodCode constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintMoodCode(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintCodeP constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintCodeP(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintCode constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintCode(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintEffectiveTime constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintEffectiveTime(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintValue constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintValue(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintValue(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTargetSiteCode constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintTargetSiteCode(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTargetSiteCodeP constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintTargetSiteCodeP(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury(PossibleInjury possibleInjury, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(possibleInjury, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validatePossibleInjury_validatePossibleInjuryTemplateId(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validatePossibleInjury_validatePossibleInjuryMoodCode(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validatePossibleInjury_validatePossibleInjuryCodeP(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validatePossibleInjury_validatePossibleInjuryCode(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) result &= validatePossibleInjury_validatePossibleInjuryValue(possibleInjury, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePossibleInjuryTemplateId constraint of '<em>Possible Injury</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury_validatePossibleInjuryTemplateId(PossibleInjury possibleInjury,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return possibleInjury.validatePossibleInjuryTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePossibleInjuryMoodCode constraint of '<em>Possible Injury</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury_validatePossibleInjuryMoodCode(PossibleInjury possibleInjury,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return possibleInjury.validatePossibleInjuryMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePossibleInjuryCodeP constraint of '<em>Possible Injury</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury_validatePossibleInjuryCodeP(PossibleInjury possibleInjury,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return possibleInjury.validatePossibleInjuryCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePossibleInjuryCode constraint of '<em>Possible Injury</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury_validatePossibleInjuryCode(PossibleInjury possibleInjury,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return possibleInjury.validatePossibleInjuryCode(diagnostics, context);
	}

	/**
	 * Validates the validatePossibleInjuryValue constraint of '<em>Possible Injury</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury_validatePossibleInjuryValue(PossibleInjury possibleInjury,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return possibleInjury.validatePossibleInjuryValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression(ProviderPrimaryImpression providerPrimaryImpression,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(providerPrimaryImpression, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionTemplateId(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionMoodCode(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionCodeP(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionCode(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionValue(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionValueP(providerPrimaryImpression, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProviderPrimaryImpressionTemplateId constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionTemplateId(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProviderPrimaryImpressionMoodCode constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionMoodCode(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProviderPrimaryImpressionCodeP constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionCodeP(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProviderPrimaryImpressionCode constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionCode(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProviderPrimaryImpressionValue constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionValue(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionValue(diagnostics, context);
	}

	/**
	 * Validates the validateProviderPrimaryImpressionValueP constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionValueP(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom(PrimarySymptom primarySymptom, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(primarySymptom, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrimarySymptom_validatePrimarySymptomTemplateId(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrimarySymptom_validatePrimarySymptomMoodCode(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrimarySymptom_validatePrimarySymptomCodeP(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrimarySymptom_validatePrimarySymptomCode(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrimarySymptom_validatePrimarySymptomValue(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) result &= validatePrimarySymptom_validatePrimarySymptomValueP(primarySymptom, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePrimarySymptomTemplateId constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomTemplateId(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePrimarySymptomMoodCode constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomMoodCode(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePrimarySymptomCodeP constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomCodeP(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePrimarySymptomCode constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomCode(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomCode(diagnostics, context);
	}

	/**
	 * Validates the validatePrimarySymptomValue constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomValue(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomValue(diagnostics, context);
	}

	/**
	 * Validates the validatePrimarySymptomValueP constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomValueP(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms(OtherSymptoms otherSymptoms, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(otherSymptoms, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validateOtherSymptoms_validateOtherSymptomsTemplateId(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validateOtherSymptoms_validateOtherSymptomsMoodCode(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validateOtherSymptoms_validateOtherSymptomsCodeP(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validateOtherSymptoms_validateOtherSymptomsCode(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validateOtherSymptoms_validateOtherSymptomsValue(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) result &= validateOtherSymptoms_validateOtherSymptomsValueP(otherSymptoms, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateOtherSymptomsTemplateId constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsTemplateId(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateOtherSymptomsMoodCode constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsMoodCode(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateOtherSymptomsCodeP constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsCodeP(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateOtherSymptomsCode constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsCode(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsCode(diagnostics, context);
	}

	/**
	 * Validates the validateOtherSymptomsValue constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsValue(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsValue(diagnostics, context);
	}

	/**
	 * Validates the validateOtherSymptomsValueP constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsValueP(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions(ProviderSecondaryImpressions providerSecondaryImpressions,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(providerSecondaryImpressions, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsTemplateId(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsMoodCode(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsCodeP(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsCode(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsValue(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsValueP(providerSecondaryImpressions, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsTemplateId constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsTemplateId(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsMoodCode constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsMoodCode(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsCodeP constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsCodeP(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsCode constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsCode(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsCode(diagnostics, context);
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsValue constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsValue(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsValue(diagnostics, context);
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsValueP constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsValueP(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity(InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(initialPatientAcuity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInitialPatientAcuity_validateInitialPatientAcuityTemplateId(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInitialPatientAcuity_validateInitialPatientAcuityMoodCode(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInitialPatientAcuity_validateInitialPatientAcuityCodeP(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInitialPatientAcuity_validateInitialPatientAcuityCode(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInitialPatientAcuity_validateInitialPatientAcuityValue(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInitialPatientAcuity_validateInitialPatientAcuityValueP(initialPatientAcuity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInitialPatientAcuityTemplateId constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityTemplateId(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateInitialPatientAcuityMoodCode constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityMoodCode(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateInitialPatientAcuityCodeP constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityCodeP(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateInitialPatientAcuityCode constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityCode(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityCode(diagnostics, context);
	}

	/**
	 * Validates the validateInitialPatientAcuityValue constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityValue(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityValue(diagnostics, context);
	}

	/**
	 * Validates the validateInitialPatientAcuityValueP constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityValueP(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection(EMSTimesSection emsTimesSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsTimesSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionTemplateId(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionCode(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionCodeP(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionTitle(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionText(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionCallTime(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionUnitNotifiedTime(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionUnitEnRouteTime(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionUnitOnSceneTime(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionUnitAtPatienttTime(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionUnitLeftSceneTime(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionPatientArrivedAtDestinationTime(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionUnitBackInServiceTime(emsTimesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSTimesSection_validateEMSTimesSectionDispatchNotifiedTime(emsTimesSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSTimesSectionTemplateId constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionTemplateId(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionCode constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionCode(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionCodeP constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionCodeP(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionTitle constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionTitle(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionText constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionText(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionCallTime constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionCallTime(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionCallTime(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionUnitNotifiedTime constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionUnitNotifiedTime(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionUnitNotifiedTime(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionUnitEnRouteTime constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionUnitEnRouteTime(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionUnitEnRouteTime(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionUnitOnSceneTime constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionUnitOnSceneTime(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionUnitOnSceneTime(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionUnitAtPatienttTime constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionUnitAtPatienttTime(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionUnitAtPatienttTime(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionUnitLeftSceneTime constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionUnitLeftSceneTime(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionUnitLeftSceneTime(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionPatientArrivedAtDestinationTime constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionPatientArrivedAtDestinationTime(
			EMSTimesSection emsTimesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionPatientArrivedAtDestinationTime(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionUnitBackInServiceTime constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionUnitBackInServiceTime(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionUnitBackInServiceTime(diagnostics, context);
	}

	/**
	 * Validates the validateEMSTimesSectionDispatchNotifiedTime constraint of '<em>EMS Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSTimesSection_validateEMSTimesSectionDispatchNotifiedTime(EMSTimesSection emsTimesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsTimesSection.validateEMSTimesSectionDispatchNotifiedTime(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime(CallTime callTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(callTime, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateCallTime_validateCallTimeTemplateId(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateCallTime_validateCallTimeMoodCode(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateCallTime_validateCallTimeCodeP(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateCallTime_validateCallTimeCode(callTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateCallTime_validateCallTimeValue(callTime, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCallTimeTemplateId constraint of '<em>Call Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime_validateCallTimeTemplateId(CallTime callTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return callTime.validateCallTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCallTimeMoodCode constraint of '<em>Call Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime_validateCallTimeMoodCode(CallTime callTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return callTime.validateCallTimeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCallTimeCodeP constraint of '<em>Call Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime_validateCallTimeCodeP(CallTime callTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return callTime.validateCallTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCallTimeCode constraint of '<em>Call Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime_validateCallTimeCode(CallTime callTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return callTime.validateCallTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateCallTimeValue constraint of '<em>Call Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime_validateCallTimeValue(CallTime callTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return callTime.validateCallTimeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime(UnitNotifiedTime unitNotifiedTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitNotifiedTime, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitNotifiedTime_validateUnitNotifiedTimeTemplateId(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitNotifiedTime_validateUnitNotifiedTimeMoodCode(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitNotifiedTime_validateUnitNotifiedTimeCodeP(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitNotifiedTime_validateUnitNotifiedTimeCode(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitNotifiedTime_validateUnitNotifiedTimeValue(unitNotifiedTime, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateUnitNotifiedTimeTemplateId constraint of '<em>Unit Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime_validateUnitNotifiedTimeTemplateId(UnitNotifiedTime unitNotifiedTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitNotifiedTime.validateUnitNotifiedTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitNotifiedTimeMoodCode constraint of '<em>Unit Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime_validateUnitNotifiedTimeMoodCode(UnitNotifiedTime unitNotifiedTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitNotifiedTime.validateUnitNotifiedTimeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitNotifiedTimeCodeP constraint of '<em>Unit Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime_validateUnitNotifiedTimeCodeP(UnitNotifiedTime unitNotifiedTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitNotifiedTime.validateUnitNotifiedTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitNotifiedTimeCode constraint of '<em>Unit Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime_validateUnitNotifiedTimeCode(UnitNotifiedTime unitNotifiedTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitNotifiedTime.validateUnitNotifiedTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitNotifiedTimeValue constraint of '<em>Unit Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime_validateUnitNotifiedTimeValue(UnitNotifiedTime unitNotifiedTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitNotifiedTime.validateUnitNotifiedTimeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime(UnitEnRouteTime unitEnRouteTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitEnRouteTime, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitEnRouteTime_validateUnitEnRouteTimeTemplateId(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitEnRouteTime_validateUnitEnRouteTimeMoodCode(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitEnRouteTime_validateUnitEnRouteTimeCodeP(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitEnRouteTime_validateUnitEnRouteTimeCode(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitEnRouteTime_validateUnitEnRouteTimeValue(unitEnRouteTime, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateUnitEnRouteTimeTemplateId constraint of '<em>Unit En Route Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime_validateUnitEnRouteTimeTemplateId(UnitEnRouteTime unitEnRouteTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitEnRouteTime.validateUnitEnRouteTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitEnRouteTimeMoodCode constraint of '<em>Unit En Route Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime_validateUnitEnRouteTimeMoodCode(UnitEnRouteTime unitEnRouteTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitEnRouteTime.validateUnitEnRouteTimeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitEnRouteTimeCodeP constraint of '<em>Unit En Route Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime_validateUnitEnRouteTimeCodeP(UnitEnRouteTime unitEnRouteTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitEnRouteTime.validateUnitEnRouteTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitEnRouteTimeCode constraint of '<em>Unit En Route Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime_validateUnitEnRouteTimeCode(UnitEnRouteTime unitEnRouteTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitEnRouteTime.validateUnitEnRouteTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitEnRouteTimeValue constraint of '<em>Unit En Route Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime_validateUnitEnRouteTimeValue(UnitEnRouteTime unitEnRouteTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitEnRouteTime.validateUnitEnRouteTimeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime(UnitOnSceneTime unitOnSceneTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitOnSceneTime, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitOnSceneTime_validateUnitOnSceneTimeTemplateId(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitOnSceneTime_validateUnitOnSceneTimeMoodCode(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitOnSceneTime_validateUnitOnSceneTimeCodeP(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitOnSceneTime_validateUnitOnSceneTimeCode(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitOnSceneTime_validateUnitOnSceneTimeValue(unitOnSceneTime, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateUnitOnSceneTimeTemplateId constraint of '<em>Unit On Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime_validateUnitOnSceneTimeTemplateId(UnitOnSceneTime unitOnSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitOnSceneTime.validateUnitOnSceneTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitOnSceneTimeMoodCode constraint of '<em>Unit On Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime_validateUnitOnSceneTimeMoodCode(UnitOnSceneTime unitOnSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitOnSceneTime.validateUnitOnSceneTimeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitOnSceneTimeCodeP constraint of '<em>Unit On Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime_validateUnitOnSceneTimeCodeP(UnitOnSceneTime unitOnSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitOnSceneTime.validateUnitOnSceneTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitOnSceneTimeCode constraint of '<em>Unit On Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime_validateUnitOnSceneTimeCode(UnitOnSceneTime unitOnSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitOnSceneTime.validateUnitOnSceneTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitOnSceneTimeValue constraint of '<em>Unit On Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime_validateUnitOnSceneTimeValue(UnitOnSceneTime unitOnSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitOnSceneTime.validateUnitOnSceneTimeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatientTime(UnitAtPatientTime unitAtPatientTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitAtPatientTime, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitAtPatientTime_validateUnitAtPatientTimeTemplateId(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitAtPatientTime_validateUnitAtPatientTimeMoodCode(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitAtPatientTime_validateUnitAtPatientTimeCodeP(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitAtPatientTime_validateUnitAtPatientTimeCode(unitAtPatientTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitAtPatientTime_validateUnitAtPatientTimeValue(unitAtPatientTime, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateUnitAtPatientTimeTemplateId constraint of '<em>Unit At Patient Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatientTime_validateUnitAtPatientTimeTemplateId(UnitAtPatientTime unitAtPatientTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitAtPatientTime.validateUnitAtPatientTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitAtPatientTimeMoodCode constraint of '<em>Unit At Patient Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatientTime_validateUnitAtPatientTimeMoodCode(UnitAtPatientTime unitAtPatientTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitAtPatientTime.validateUnitAtPatientTimeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitAtPatientTimeCodeP constraint of '<em>Unit At Patient Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatientTime_validateUnitAtPatientTimeCodeP(UnitAtPatientTime unitAtPatientTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitAtPatientTime.validateUnitAtPatientTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitAtPatientTimeCode constraint of '<em>Unit At Patient Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatientTime_validateUnitAtPatientTimeCode(UnitAtPatientTime unitAtPatientTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitAtPatientTime.validateUnitAtPatientTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitAtPatientTimeValue constraint of '<em>Unit At Patient Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatientTime_validateUnitAtPatientTimeValue(UnitAtPatientTime unitAtPatientTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitAtPatientTime.validateUnitAtPatientTimeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime(UnitLeftSceneTime unitLeftSceneTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitLeftSceneTime, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitLeftSceneTime_validateUnitLeftSceneTimeTemplateId(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitLeftSceneTime_validateUnitLeftSceneTimeMoodCode(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitLeftSceneTime_validateUnitLeftSceneTimeCodeP(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitLeftSceneTime_validateUnitLeftSceneTimeCode(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitLeftSceneTime_validateUnitLeftSceneTimeValue(unitLeftSceneTime, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateUnitLeftSceneTimeTemplateId constraint of '<em>Unit Left Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime_validateUnitLeftSceneTimeTemplateId(UnitLeftSceneTime unitLeftSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitLeftSceneTime.validateUnitLeftSceneTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitLeftSceneTimeMoodCode constraint of '<em>Unit Left Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime_validateUnitLeftSceneTimeMoodCode(UnitLeftSceneTime unitLeftSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitLeftSceneTime.validateUnitLeftSceneTimeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitLeftSceneTimeCodeP constraint of '<em>Unit Left Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime_validateUnitLeftSceneTimeCodeP(UnitLeftSceneTime unitLeftSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitLeftSceneTime.validateUnitLeftSceneTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitLeftSceneTimeCode constraint of '<em>Unit Left Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime_validateUnitLeftSceneTimeCode(UnitLeftSceneTime unitLeftSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitLeftSceneTime.validateUnitLeftSceneTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitLeftSceneTimeValue constraint of '<em>Unit Left Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime_validateUnitLeftSceneTimeValue(UnitLeftSceneTime unitLeftSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitLeftSceneTime.validateUnitLeftSceneTimeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientArrivedAtDestinationTime, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeTemplateId(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeMoodCode(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeCodeP(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeCode(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeValue(patientArrivedAtDestinationTime, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientArrivedAtDestinationTimeTemplateId constraint of '<em>Patient Arrived At Destination Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeTemplateId(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientArrivedAtDestinationTime.validatePatientArrivedAtDestinationTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientArrivedAtDestinationTimeMoodCode constraint of '<em>Patient Arrived At Destination Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeMoodCode(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientArrivedAtDestinationTime.validatePatientArrivedAtDestinationTimeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientArrivedAtDestinationTimeCodeP constraint of '<em>Patient Arrived At Destination Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeCodeP(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientArrivedAtDestinationTime.validatePatientArrivedAtDestinationTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientArrivedAtDestinationTimeCode constraint of '<em>Patient Arrived At Destination Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeCode(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientArrivedAtDestinationTime.validatePatientArrivedAtDestinationTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientArrivedAtDestinationTimeValue constraint of '<em>Patient Arrived At Destination Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeValue(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientArrivedAtDestinationTime.validatePatientArrivedAtDestinationTimeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime(UnitBackInServiceTime unitBackInServiceTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitBackInServiceTime, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitBackInServiceTime_validateUnitBackInServiceTimeTemplateId(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitBackInServiceTime_validateUnitBackInServiceTimeMoodCode(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitBackInServiceTime_validateUnitBackInServiceTimeCodeP(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitBackInServiceTime_validateUnitBackInServiceTimeCode(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnitBackInServiceTime_validateUnitBackInServiceTimeValue(unitBackInServiceTime, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateUnitBackInServiceTimeTemplateId constraint of '<em>Unit Back In Service Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime_validateUnitBackInServiceTimeTemplateId(
			UnitBackInServiceTime unitBackInServiceTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitBackInServiceTime.validateUnitBackInServiceTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitBackInServiceTimeMoodCode constraint of '<em>Unit Back In Service Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime_validateUnitBackInServiceTimeMoodCode(
			UnitBackInServiceTime unitBackInServiceTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitBackInServiceTime.validateUnitBackInServiceTimeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitBackInServiceTimeCodeP constraint of '<em>Unit Back In Service Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime_validateUnitBackInServiceTimeCodeP(
			UnitBackInServiceTime unitBackInServiceTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitBackInServiceTime.validateUnitBackInServiceTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitBackInServiceTimeCode constraint of '<em>Unit Back In Service Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime_validateUnitBackInServiceTimeCode(
			UnitBackInServiceTime unitBackInServiceTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitBackInServiceTime.validateUnitBackInServiceTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitBackInServiceTimeValue constraint of '<em>Unit Back In Service Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime_validateUnitBackInServiceTimeValue(
			UnitBackInServiceTime unitBackInServiceTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitBackInServiceTime.validateUnitBackInServiceTimeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime(DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchNotifiedTime, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchNotifiedTime_validateDispatchNotifiedTimeTemplateId(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchNotifiedTime_validateDispatchNotifiedTimeMoodCode(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchNotifiedTime_validateDispatchNotifiedTimeCodeP(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchNotifiedTime_validateDispatchNotifiedTimeCode(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchNotifiedTime_validateDispatchNotifiedTimeValue(dispatchNotifiedTime, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDispatchNotifiedTimeTemplateId constraint of '<em>Dispatch Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime_validateDispatchNotifiedTimeTemplateId(
			DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchNotifiedTime.validateDispatchNotifiedTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchNotifiedTimeMoodCode constraint of '<em>Dispatch Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime_validateDispatchNotifiedTimeMoodCode(
			DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchNotifiedTime.validateDispatchNotifiedTimeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchNotifiedTimeCodeP constraint of '<em>Dispatch Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime_validateDispatchNotifiedTimeCodeP(
			DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchNotifiedTime.validateDispatchNotifiedTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchNotifiedTimeCode constraint of '<em>Dispatch Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime_validateDispatchNotifiedTimeCode(
			DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchNotifiedTime.validateDispatchNotifiedTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchNotifiedTimeValue constraint of '<em>Dispatch Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime_validateDispatchNotifiedTimeValue(
			DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchNotifiedTime.validateDispatchNotifiedTimeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSVitalSignsSection(EMSVitalSignsSection emsVitalSignsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsVitalSignsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSVitalSignsSection_validateEMSVitalSignsSectionTemplateId(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSVitalSignsSection_validateEMSVitalSignsSectionCode(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSVitalSignsSection_validateEMSVitalSignsSectionCodeP(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSVitalSignsSection_validateEMSVitalSignsSectionTitle(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSVitalSignsSection_validateEMSVitalSignsSectionText(emsVitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSVitalSignsSection_validateEMSVitalSignsSectionVitalSignsOrganizer(emsVitalSignsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSVitalSignsSectionTemplateId constraint of '<em>EMS Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSVitalSignsSection_validateEMSVitalSignsSectionTemplateId(
			EMSVitalSignsSection emsVitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsVitalSignsSection.validateEMSVitalSignsSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSVitalSignsSectionCode constraint of '<em>EMS Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSVitalSignsSection_validateEMSVitalSignsSectionCode(
			EMSVitalSignsSection emsVitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsVitalSignsSection.validateEMSVitalSignsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSVitalSignsSectionCodeP constraint of '<em>EMS Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSVitalSignsSection_validateEMSVitalSignsSectionCodeP(
			EMSVitalSignsSection emsVitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsVitalSignsSection.validateEMSVitalSignsSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSVitalSignsSectionTitle constraint of '<em>EMS Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSVitalSignsSection_validateEMSVitalSignsSectionTitle(
			EMSVitalSignsSection emsVitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsVitalSignsSection.validateEMSVitalSignsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSVitalSignsSectionText constraint of '<em>EMS Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSVitalSignsSection_validateEMSVitalSignsSectionText(
			EMSVitalSignsSection emsVitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsVitalSignsSection.validateEMSVitalSignsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSVitalSignsSectionVitalSignsOrganizer constraint of '<em>EMS Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSVitalSignsSection_validateEMSVitalSignsSectionVitalSignsOrganizer(
			EMSVitalSignsSection emsVitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsVitalSignsSection.validateEMSVitalSignsSectionVitalSignsOrganizer(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer(VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vitalSignsOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerSystolicBloodPressureComponent(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerRespiratoryRateComponent(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerBodyTemperatureComponent(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerOxygenSaturationComponent(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerTemplateId(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerCode(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerCodeP(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerEffectiveTime(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerComponent4(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerComponent42(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerComponent43(vitalSignsOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateVitalSignsOrganizerSystolicBloodPressureComponent constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerSystolicBloodPressureComponent(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerSystolicBloodPressureComponent(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerRespiratoryRateComponent constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerRespiratoryRateComponent(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerRespiratoryRateComponent(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerBodyTemperatureComponent constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerBodyTemperatureComponent(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerBodyTemperatureComponent(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerOxygenSaturationComponent constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerOxygenSaturationComponent(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerOxygenSaturationComponent(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerTemplateId constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerTemplateId(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerCode constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerCode(VitalSignsOrganizer vitalSignsOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerCodeP constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerCodeP(VitalSignsOrganizer vitalSignsOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerEffectiveTime constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerEffectiveTime(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerComponent4 constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerComponent4(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerComponent4(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerComponent42 constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerComponent42(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerComponent42(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerComponent43 constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerComponent43(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerComponent43(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsInjuryIncidentDescriptionSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionTemplateId(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionCode(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionCodeP(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionTitle(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionText(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionInjuryCauseCategory(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionInjuryMechanism(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionTraumaCenterCriteria(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionInjuryRiskFactor(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionVehicleImpactArea(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionPatientLocationInVehicle(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionVehicleOccupantSafetyEquipment(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionAirbagDeploymentStatus(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionHeightOfFall(emsInjuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionDisasterType(emsInjuryIncidentDescriptionSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionTemplateId constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionTemplateId(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionCode constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionCode(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionCodeP constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionCodeP(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionTitle constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionTitle(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionText constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionText(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionInjuryCauseCategory constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionInjuryCauseCategory(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionInjuryCauseCategory(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionInjuryMechanism constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionInjuryMechanism(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionInjuryMechanism(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionTraumaCenterCriteria constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionTraumaCenterCriteria(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionTraumaCenterCriteria(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionInjuryRiskFactor constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionInjuryRiskFactor(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionInjuryRiskFactor(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionVehicleImpactArea constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionVehicleImpactArea(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionVehicleImpactArea(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionPatientLocationInVehicle constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionPatientLocationInVehicle(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionPatientLocationInVehicle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionVehicleOccupantSafetyEquipment constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionVehicleOccupantSafetyEquipment(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionVehicleOccupantSafetyEquipment(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionAirbagDeploymentStatus constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionAirbagDeploymentStatus(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionAirbagDeploymentStatus(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionHeightOfFall constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionHeightOfFall(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionHeightOfFall(diagnostics, context);
	}

	/**
	 * Validates the validateEMSInjuryIncidentDescriptionSectionDisasterType constraint of '<em>EMS Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSInjuryIncidentDescriptionSection_validateEMSInjuryIncidentDescriptionSectionDisasterType(
			EMSInjuryIncidentDescriptionSection emsInjuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emsInjuryIncidentDescriptionSection.validateEMSInjuryIncidentDescriptionSectionDisasterType(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory(InjuryCauseCategory injuryCauseCategory, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(injuryCauseCategory, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryCauseCategory_validateInjuryCauseCategoryTemplateId(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryCauseCategory_validateInjuryCauseCategoryMoodCode(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryCauseCategory_validateInjuryCauseCategoryCodeP(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryCauseCategory_validateInjuryCauseCategoryCode(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryCauseCategory_validateInjuryCauseCategoryValue(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryCauseCategory_validateInjuryCauseCategoryValueP(injuryCauseCategory, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInjuryCauseCategoryTemplateId constraint of '<em>Injury Cause Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory_validateInjuryCauseCategoryTemplateId(
			InjuryCauseCategory injuryCauseCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryCauseCategory.validateInjuryCauseCategoryTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryCauseCategoryMoodCode constraint of '<em>Injury Cause Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory_validateInjuryCauseCategoryMoodCode(
			InjuryCauseCategory injuryCauseCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryCauseCategory.validateInjuryCauseCategoryMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryCauseCategoryCodeP constraint of '<em>Injury Cause Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory_validateInjuryCauseCategoryCodeP(InjuryCauseCategory injuryCauseCategory,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryCauseCategory.validateInjuryCauseCategoryCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryCauseCategoryCode constraint of '<em>Injury Cause Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory_validateInjuryCauseCategoryCode(InjuryCauseCategory injuryCauseCategory,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryCauseCategory.validateInjuryCauseCategoryCode(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryCauseCategoryValue constraint of '<em>Injury Cause Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory_validateInjuryCauseCategoryValue(InjuryCauseCategory injuryCauseCategory,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryCauseCategory.validateInjuryCauseCategoryValue(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryCauseCategoryValueP constraint of '<em>Injury Cause Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory_validateInjuryCauseCategoryValueP(
			InjuryCauseCategory injuryCauseCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryCauseCategory.validateInjuryCauseCategoryValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism(InjuryMechanism injuryMechanism, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(injuryMechanism, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryMechanism_validateInjuryMechanismTemplateId(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryMechanism_validateInjuryMechanismMoodCode(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryMechanism_validateInjuryMechanismCodeP(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryMechanism_validateInjuryMechanismCode(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryMechanism_validateInjuryMechanismValue(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) result &= validateInjuryMechanism_validateInjuryMechanismValueP(injuryMechanism, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInjuryMechanismTemplateId constraint of '<em>Injury Mechanism</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism_validateInjuryMechanismTemplateId(InjuryMechanism injuryMechanism,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryMechanism.validateInjuryMechanismTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryMechanismMoodCode constraint of '<em>Injury Mechanism</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism_validateInjuryMechanismMoodCode(InjuryMechanism injuryMechanism,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryMechanism.validateInjuryMechanismMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryMechanismCodeP constraint of '<em>Injury Mechanism</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism_validateInjuryMechanismCodeP(InjuryMechanism injuryMechanism,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryMechanism.validateInjuryMechanismCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryMechanismCode constraint of '<em>Injury Mechanism</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism_validateInjuryMechanismCode(InjuryMechanism injuryMechanism,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryMechanism.validateInjuryMechanismCode(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryMechanismValue constraint of '<em>Injury Mechanism</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism_validateInjuryMechanismValue(InjuryMechanism injuryMechanism,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryMechanism.validateInjuryMechanismValue(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryMechanismValueP constraint of '<em>Injury Mechanism</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism_validateInjuryMechanismValueP(InjuryMechanism injuryMechanism,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryMechanism.validateInjuryMechanismValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps1and2(TraumaTriageCriteriaSteps1and2 traumaTriageCriteriaSteps1and2,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(traumaTriageCriteriaSteps1and2, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2TemplateId(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2MoodCode(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2CodeP(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2Code(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2Value(traumaTriageCriteriaSteps1and2, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2ValueP(traumaTriageCriteriaSteps1and2, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps1and2TemplateId constraint of '<em>Trauma Triage Criteria Steps1and2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2TemplateId(
			TraumaTriageCriteriaSteps1and2 traumaTriageCriteriaSteps1and2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps1and2.validateTraumaTriageCriteriaSteps1and2TemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps1and2MoodCode constraint of '<em>Trauma Triage Criteria Steps1and2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2MoodCode(
			TraumaTriageCriteriaSteps1and2 traumaTriageCriteriaSteps1and2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps1and2.validateTraumaTriageCriteriaSteps1and2MoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps1and2CodeP constraint of '<em>Trauma Triage Criteria Steps1and2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2CodeP(
			TraumaTriageCriteriaSteps1and2 traumaTriageCriteriaSteps1and2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps1and2.validateTraumaTriageCriteriaSteps1and2CodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps1and2Code constraint of '<em>Trauma Triage Criteria Steps1and2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2Code(
			TraumaTriageCriteriaSteps1and2 traumaTriageCriteriaSteps1and2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps1and2.validateTraumaTriageCriteriaSteps1and2Code(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps1and2Value constraint of '<em>Trauma Triage Criteria Steps1and2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2Value(
			TraumaTriageCriteriaSteps1and2 traumaTriageCriteriaSteps1and2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps1and2.validateTraumaTriageCriteriaSteps1and2Value(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps1and2ValueP constraint of '<em>Trauma Triage Criteria Steps1and2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps1and2_validateTraumaTriageCriteriaSteps1and2ValueP(
			TraumaTriageCriteriaSteps1and2 traumaTriageCriteriaSteps1and2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps1and2.validateTraumaTriageCriteriaSteps1and2ValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps3and4(TraumaTriageCriteriaSteps3and4 traumaTriageCriteriaSteps3and4,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(traumaTriageCriteriaSteps3and4, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4TemplateId(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4MoodCode(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4CodeP(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4Code(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4Value(traumaTriageCriteriaSteps3and4, diagnostics, context);
		if (result || diagnostics != null) result &= validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4ValueP(traumaTriageCriteriaSteps3and4, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps3and4TemplateId constraint of '<em>Trauma Triage Criteria Steps3and4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4TemplateId(
			TraumaTriageCriteriaSteps3and4 traumaTriageCriteriaSteps3and4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps3and4.validateTraumaTriageCriteriaSteps3and4TemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps3and4MoodCode constraint of '<em>Trauma Triage Criteria Steps3and4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4MoodCode(
			TraumaTriageCriteriaSteps3and4 traumaTriageCriteriaSteps3and4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps3and4.validateTraumaTriageCriteriaSteps3and4MoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps3and4CodeP constraint of '<em>Trauma Triage Criteria Steps3and4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4CodeP(
			TraumaTriageCriteriaSteps3and4 traumaTriageCriteriaSteps3and4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps3and4.validateTraumaTriageCriteriaSteps3and4CodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps3and4Code constraint of '<em>Trauma Triage Criteria Steps3and4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4Code(
			TraumaTriageCriteriaSteps3and4 traumaTriageCriteriaSteps3and4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps3and4.validateTraumaTriageCriteriaSteps3and4Code(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps3and4Value constraint of '<em>Trauma Triage Criteria Steps3and4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4Value(
			TraumaTriageCriteriaSteps3and4 traumaTriageCriteriaSteps3and4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps3and4.validateTraumaTriageCriteriaSteps3and4Value(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaTriageCriteriaSteps3and4ValueP constraint of '<em>Trauma Triage Criteria Steps3and4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaTriageCriteriaSteps3and4_validateTraumaTriageCriteriaSteps3and4ValueP(
			TraumaTriageCriteriaSteps3and4 traumaTriageCriteriaSteps3and4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return traumaTriageCriteriaSteps3and4.validateTraumaTriageCriteriaSteps3and4ValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea(VehicleImpactArea vehicleImpactArea, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vehicleImpactArea, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleImpactArea_validateVehicleImpactAreaTemplateId(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleImpactArea_validateVehicleImpactAreaMoodCode(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleImpactArea_validateVehicleImpactAreaCodeP(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleImpactArea_validateVehicleImpactAreaCode(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleImpactArea_validateVehicleImpactAreaValue(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleImpactArea_validateVehicleImpactAreaValueP(vehicleImpactArea, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateVehicleImpactAreaTemplateId constraint of '<em>Vehicle Impact Area</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea_validateVehicleImpactAreaTemplateId(VehicleImpactArea vehicleImpactArea,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vehicleImpactArea.validateVehicleImpactAreaTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleImpactAreaMoodCode constraint of '<em>Vehicle Impact Area</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea_validateVehicleImpactAreaMoodCode(VehicleImpactArea vehicleImpactArea,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vehicleImpactArea.validateVehicleImpactAreaMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleImpactAreaCodeP constraint of '<em>Vehicle Impact Area</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea_validateVehicleImpactAreaCodeP(VehicleImpactArea vehicleImpactArea,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vehicleImpactArea.validateVehicleImpactAreaCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleImpactAreaCode constraint of '<em>Vehicle Impact Area</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea_validateVehicleImpactAreaCode(VehicleImpactArea vehicleImpactArea,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vehicleImpactArea.validateVehicleImpactAreaCode(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleImpactAreaValue constraint of '<em>Vehicle Impact Area</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea_validateVehicleImpactAreaValue(VehicleImpactArea vehicleImpactArea,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vehicleImpactArea.validateVehicleImpactAreaValue(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleImpactAreaValueP constraint of '<em>Vehicle Impact Area</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea_validateVehicleImpactAreaValueP(VehicleImpactArea vehicleImpactArea,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vehicleImpactArea.validateVehicleImpactAreaValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle(PatientLocationInVehicle patientLocationInVehicle,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientLocationInVehicle, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientLocationInVehicle_validatePatientLocationInVehicleTemplateId(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientLocationInVehicle_validatePatientLocationInVehicleMoodCode(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientLocationInVehicle_validatePatientLocationInVehicleCodeP(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientLocationInVehicle_validatePatientLocationInVehicleCode(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientLocationInVehicle_validatePatientLocationInVehicleValue(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientLocationInVehicle_validatePatientLocationInVehicleValueP(patientLocationInVehicle, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientLocationInVehicleTemplateId constraint of '<em>Patient Location In Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle_validatePatientLocationInVehicleTemplateId(
			PatientLocationInVehicle patientLocationInVehicle, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientLocationInVehicle.validatePatientLocationInVehicleTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientLocationInVehicleMoodCode constraint of '<em>Patient Location In Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle_validatePatientLocationInVehicleMoodCode(
			PatientLocationInVehicle patientLocationInVehicle, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientLocationInVehicle.validatePatientLocationInVehicleMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientLocationInVehicleCodeP constraint of '<em>Patient Location In Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle_validatePatientLocationInVehicleCodeP(
			PatientLocationInVehicle patientLocationInVehicle, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientLocationInVehicle.validatePatientLocationInVehicleCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientLocationInVehicleCode constraint of '<em>Patient Location In Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle_validatePatientLocationInVehicleCode(
			PatientLocationInVehicle patientLocationInVehicle, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientLocationInVehicle.validatePatientLocationInVehicleCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientLocationInVehicleValue constraint of '<em>Patient Location In Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle_validatePatientLocationInVehicleValue(
			PatientLocationInVehicle patientLocationInVehicle, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientLocationInVehicle.validatePatientLocationInVehicleValue(diagnostics, context);
	}

	/**
	 * Validates the validatePatientLocationInVehicleValueP constraint of '<em>Patient Location In Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle_validatePatientLocationInVehicleValueP(
			PatientLocationInVehicle patientLocationInVehicle, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientLocationInVehicle.validatePatientLocationInVehicleValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment(VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vehicleOccupantSafetyEquipment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentTemplateId(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentMoodCode(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentCodeP(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentCode(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentValue(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) result &= validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentValueP(vehicleOccupantSafetyEquipment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateVehicleOccupantSafetyEquipmentTemplateId constraint of '<em>Vehicle Occupant Safety Equipment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentTemplateId(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vehicleOccupantSafetyEquipment.validateVehicleOccupantSafetyEquipmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleOccupantSafetyEquipmentMoodCode constraint of '<em>Vehicle Occupant Safety Equipment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentMoodCode(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vehicleOccupantSafetyEquipment.validateVehicleOccupantSafetyEquipmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleOccupantSafetyEquipmentCodeP constraint of '<em>Vehicle Occupant Safety Equipment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentCodeP(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vehicleOccupantSafetyEquipment.validateVehicleOccupantSafetyEquipmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleOccupantSafetyEquipmentCode constraint of '<em>Vehicle Occupant Safety Equipment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentCode(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vehicleOccupantSafetyEquipment.validateVehicleOccupantSafetyEquipmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleOccupantSafetyEquipmentValue constraint of '<em>Vehicle Occupant Safety Equipment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentValue(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vehicleOccupantSafetyEquipment.validateVehicleOccupantSafetyEquipmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleOccupantSafetyEquipmentValueP constraint of '<em>Vehicle Occupant Safety Equipment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentValueP(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vehicleOccupantSafetyEquipment.validateVehicleOccupantSafetyEquipmentValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus(AirbagDeploymentStatus airbagDeploymentStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(airbagDeploymentStatus, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirbagDeploymentStatus_validateAirbagDeploymentStatusTemplateId(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirbagDeploymentStatus_validateAirbagDeploymentStatusMoodCode(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirbagDeploymentStatus_validateAirbagDeploymentStatusCode(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirbagDeploymentStatus_validateAirbagDeploymentStatusValue(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirbagDeploymentStatus_validateAirbagDeploymentStatusValueP(airbagDeploymentStatus, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAirbagDeploymentStatusTemplateId constraint of '<em>Airbag Deployment Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus_validateAirbagDeploymentStatusTemplateId(
			AirbagDeploymentStatus airbagDeploymentStatus, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return airbagDeploymentStatus.validateAirbagDeploymentStatusTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAirbagDeploymentStatusMoodCode constraint of '<em>Airbag Deployment Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus_validateAirbagDeploymentStatusMoodCode(
			AirbagDeploymentStatus airbagDeploymentStatus, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return airbagDeploymentStatus.validateAirbagDeploymentStatusMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAirbagDeploymentStatusCode constraint of '<em>Airbag Deployment Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus_validateAirbagDeploymentStatusCode(
			AirbagDeploymentStatus airbagDeploymentStatus, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return airbagDeploymentStatus.validateAirbagDeploymentStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateAirbagDeploymentStatusValue constraint of '<em>Airbag Deployment Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus_validateAirbagDeploymentStatusValue(
			AirbagDeploymentStatus airbagDeploymentStatus, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return airbagDeploymentStatus.validateAirbagDeploymentStatusValue(diagnostics, context);
	}

	/**
	 * Validates the validateAirbagDeploymentStatusValueP constraint of '<em>Airbag Deployment Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus_validateAirbagDeploymentStatusValueP(
			AirbagDeploymentStatus airbagDeploymentStatus, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return airbagDeploymentStatus.validateAirbagDeploymentStatusValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall(HeightOfFall heightOfFall, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(heightOfFall, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeightOfFall_validateHeightOfFallTemplateId(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeightOfFall_validateHeightOfFallMoodCode(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeightOfFall_validateHeightOfFallCodeP(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeightOfFall_validateHeightOfFallCode(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeightOfFall_validateHeightOfFallValue(heightOfFall, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHeightOfFallTemplateId constraint of '<em>Height Of Fall</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall_validateHeightOfFallTemplateId(HeightOfFall heightOfFall,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heightOfFall.validateHeightOfFallTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHeightOfFallMoodCode constraint of '<em>Height Of Fall</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall_validateHeightOfFallMoodCode(HeightOfFall heightOfFall,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heightOfFall.validateHeightOfFallMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeightOfFallCodeP constraint of '<em>Height Of Fall</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall_validateHeightOfFallCodeP(HeightOfFall heightOfFall,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heightOfFall.validateHeightOfFallCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateHeightOfFallCode constraint of '<em>Height Of Fall</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall_validateHeightOfFallCode(HeightOfFall heightOfFall, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heightOfFall.validateHeightOfFallCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeightOfFallValue constraint of '<em>Height Of Fall</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall_validateHeightOfFallValue(HeightOfFall heightOfFall,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heightOfFall.validateHeightOfFallValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType(DisasterType disasterType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(disasterType, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validateDisasterType_validateDisasterTypeTemplateId(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validateDisasterType_validateDisasterTypeMoodCode(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validateDisasterType_validateDisasterTypeCode(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validateDisasterType_validateDisasterTypeValue(disasterType, diagnostics, context);
		if (result || diagnostics != null) result &= validateDisasterType_validateDisasterTypeValueP(disasterType, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDisasterTypeTemplateId constraint of '<em>Disaster Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType_validateDisasterTypeTemplateId(DisasterType disasterType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return disasterType.validateDisasterTypeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDisasterTypeMoodCode constraint of '<em>Disaster Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType_validateDisasterTypeMoodCode(DisasterType disasterType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return disasterType.validateDisasterTypeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDisasterTypeCode constraint of '<em>Disaster Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType_validateDisasterTypeCode(DisasterType disasterType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return disasterType.validateDisasterTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateDisasterTypeValue constraint of '<em>Disaster Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType_validateDisasterTypeValue(DisasterType disasterType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return disasterType.validateDisasterTypeValue(diagnostics, context);
	}

	/**
	 * Validates the validateDisasterTypeValueP constraint of '<em>Disaster Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType_validateDisasterTypeValueP(DisasterType disasterType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return disasterType.validateDisasterTypeValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSBillingSection(EMSBillingSection emsBillingSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emsBillingSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSBillingSection_validateEMSBillingSectionTemplateId(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSBillingSection_validateEMSBillingSectionCode(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSBillingSection_validateEMSBillingSectionCodeP(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSBillingSection_validateEMSBillingSectionTitle(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSBillingSection_validateEMSBillingSectionText(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSBillingSection_validateEMSBillingSectionBillingCondition(emsBillingSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEMSBillingSection_validateEMSBillingSectionLevelOfServiceObservation(emsBillingSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEMSBillingSectionTemplateId constraint of '<em>EMS Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSBillingSection_validateEMSBillingSectionTemplateId(EMSBillingSection emsBillingSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsBillingSection.validateEMSBillingSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEMSBillingSectionCode constraint of '<em>EMS Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSBillingSection_validateEMSBillingSectionCode(EMSBillingSection emsBillingSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsBillingSection.validateEMSBillingSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSBillingSectionCodeP constraint of '<em>EMS Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSBillingSection_validateEMSBillingSectionCodeP(EMSBillingSection emsBillingSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsBillingSection.validateEMSBillingSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSBillingSectionTitle constraint of '<em>EMS Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSBillingSection_validateEMSBillingSectionTitle(EMSBillingSection emsBillingSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsBillingSection.validateEMSBillingSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSBillingSectionText constraint of '<em>EMS Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSBillingSection_validateEMSBillingSectionText(EMSBillingSection emsBillingSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsBillingSection.validateEMSBillingSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSBillingSectionBillingCondition constraint of '<em>EMS Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSBillingSection_validateEMSBillingSectionBillingCondition(
			EMSBillingSection emsBillingSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsBillingSection.validateEMSBillingSectionBillingCondition(diagnostics, context);
	}

	/**
	 * Validates the validateEMSBillingSectionLevelOfServiceObservation constraint of '<em>EMS Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEMSBillingSection_validateEMSBillingSectionLevelOfServiceObservation(
			EMSBillingSection emsBillingSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return emsBillingSection.validateEMSBillingSectionLevelOfServiceObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition(BillingCondition billingCondition, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(billingCondition, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validateBillingCondition_validateBillingConditionTemplateId(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validateBillingCondition_validateBillingConditionCodeP(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validateBillingCondition_validateBillingConditionCode(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validateBillingCondition_validateBillingConditionValue(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validateBillingCondition_validateBillingConditionValueP(billingCondition, diagnostics, context);
		if (result || diagnostics != null) result &= validateBillingCondition_validateBillingConditionMoodCode(billingCondition, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateBillingConditionTemplateId constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionTemplateId(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBillingConditionCodeP constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionCodeP(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateBillingConditionCode constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionCode(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionCode(diagnostics, context);
	}

	/**
	 * Validates the validateBillingConditionValue constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionValue(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionValue(diagnostics, context);
	}

	/**
	 * Validates the validateBillingConditionValueP constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionValueP(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionValueP(diagnostics, context);
	}

	/**
	 * Validates the validateBillingConditionMoodCode constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionMoodCode(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation(LevelOfServiceObservation levelOfServiceObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(levelOfServiceObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationTemplateId(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationMoodCode(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationCodeP(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationCode(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationValue(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationValueP(levelOfServiceObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateLevelOfServiceObservationTemplateId constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationTemplateId(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfServiceObservationMoodCode constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationMoodCode(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfServiceObservationCodeP constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationCodeP(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfServiceObservationCode constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationCode(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfServiceObservationValue constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationValue(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfServiceObservationValueP constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationValueP(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading(ResponseEndingOdometerReading responseEndingOdometerReading,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseEndingOdometerReading, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingTemplateId(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingMoodCode(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingCodeP(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingCode(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingValue(responseEndingOdometerReading, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponseEndingOdometerReadingTemplateId constraint of '<em>Response Ending Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingTemplateId(
			ResponseEndingOdometerReading responseEndingOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseEndingOdometerReading.validateResponseEndingOdometerReadingTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseEndingOdometerReadingMoodCode constraint of '<em>Response Ending Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingMoodCode(
			ResponseEndingOdometerReading responseEndingOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseEndingOdometerReading.validateResponseEndingOdometerReadingMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseEndingOdometerReadingCodeP constraint of '<em>Response Ending Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingCodeP(
			ResponseEndingOdometerReading responseEndingOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseEndingOdometerReading.validateResponseEndingOdometerReadingCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseEndingOdometerReadingCode constraint of '<em>Response Ending Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingCode(
			ResponseEndingOdometerReading responseEndingOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseEndingOdometerReading.validateResponseEndingOdometerReadingCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseEndingOdometerReadingValue constraint of '<em>Response Ending Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingValue(
			ResponseEndingOdometerReading responseEndingOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseEndingOdometerReading.validateResponseEndingOdometerReadingValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure(SystolicBloodPressure systolicBloodPressure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(systolicBloodPressure, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateSystolicBloodPressure_validateSystolicBloodPressureTemplateId(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateSystolicBloodPressure_validateSystolicBloodPressureMoodCode(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateSystolicBloodPressure_validateSystolicBloodPressureCodeP(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateSystolicBloodPressure_validateSystolicBloodPressureCode(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateSystolicBloodPressure_validateSystolicBloodPressureEffectiveTime(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateSystolicBloodPressure_validateSystolicBloodPressureValue(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateSystolicBloodPressure_validateSystolicBloodPressureMethodCode(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateSystolicBloodPressure_validateSystolicBloodPressureMethodCodeP(systolicBloodPressure, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSystolicBloodPressureTemplateId constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureTemplateId(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSystolicBloodPressureMoodCode constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureMoodCode(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateSystolicBloodPressureCodeP constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureCodeP(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateSystolicBloodPressureCode constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureCode(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureCode(diagnostics, context);
	}

	/**
	 * Validates the validateSystolicBloodPressureEffectiveTime constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureEffectiveTime(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateSystolicBloodPressureValue constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureValue(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureValue(diagnostics, context);
	}

	/**
	 * Validates the validateSystolicBloodPressureMethodCode constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureMethodCode(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateSystolicBloodPressureMethodCodeP constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureMethodCodeP(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureMethodCodeP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals(PriorAidVitals priorAidVitals, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(priorAidVitals, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validatePriorAidVitals_validatePriorAidVitalsTemplateId(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validatePriorAidVitals_validatePriorAidVitalsMoodCode(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validatePriorAidVitals_validatePriorAidVitalsCodeP(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validatePriorAidVitals_validatePriorAidVitalsCode(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) result &= validatePriorAidVitals_validatePriorAidVitalsValue(priorAidVitals, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePriorAidVitalsTemplateId constraint of '<em>Prior Aid Vitals</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals_validatePriorAidVitalsTemplateId(PriorAidVitals priorAidVitals,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAidVitals.validatePriorAidVitalsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAidVitalsMoodCode constraint of '<em>Prior Aid Vitals</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals_validatePriorAidVitalsMoodCode(PriorAidVitals priorAidVitals,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAidVitals.validatePriorAidVitalsMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAidVitalsCodeP constraint of '<em>Prior Aid Vitals</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals_validatePriorAidVitalsCodeP(PriorAidVitals priorAidVitals,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAidVitals.validatePriorAidVitalsCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAidVitalsCode constraint of '<em>Prior Aid Vitals</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals_validatePriorAidVitalsCode(PriorAidVitals priorAidVitals,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAidVitals.validatePriorAidVitalsCode(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAidVitalsValue constraint of '<em>Prior Aid Vitals</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals_validatePriorAidVitalsValue(PriorAidVitals priorAidVitals,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAidVitals.validatePriorAidVitalsValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergy(DrugAllergy drugAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(drugAllergy, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugAllergy_validateDrugAllergyParticipant1(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugAllergy_validateDrugAllergyTemplateId(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugAllergy_validateDrugAllergyCode(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugAllergy_validateDrugAllergyValue(drugAllergy, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugAllergy_validateDrugAllergyMoodCode(drugAllergy, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDrugAllergyParticipant1 constraint of '<em>Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergy_validateDrugAllergyParticipant1(DrugAllergy drugAllergy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugAllergy.validateDrugAllergyParticipant1(diagnostics, context);
	}

	/**
	 * Validates the validateDrugAllergyTemplateId constraint of '<em>Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergy_validateDrugAllergyTemplateId(DrugAllergy drugAllergy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugAllergy.validateDrugAllergyTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDrugAllergyCode constraint of '<em>Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergy_validateDrugAllergyCode(DrugAllergy drugAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return drugAllergy.validateDrugAllergyCode(diagnostics, context);
	}

	/**
	 * Validates the validateDrugAllergyValue constraint of '<em>Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergy_validateDrugAllergyValue(DrugAllergy drugAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return drugAllergy.validateDrugAllergyValue(diagnostics, context);
	}

	/**
	 * Validates the validateDrugAllergyMoodCode constraint of '<em>Drug Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergy_validateDrugAllergyMoodCode(DrugAllergy drugAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return drugAllergy.validateDrugAllergyMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownDrugAllergyObservation(
			ExistenceOfKnownDrugAllergyObservation existenceOfKnownDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(existenceOfKnownDrugAllergyObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfKnownDrugAllergyObservation_validateExistenceOfKnownDrugAllergyObservationTemplateId(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfKnownDrugAllergyObservation_validateExistenceOfKnownDrugAllergyObservationMoodCode(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfKnownDrugAllergyObservation_validateExistenceOfKnownDrugAllergyObservationCodeP(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfKnownDrugAllergyObservation_validateExistenceOfKnownDrugAllergyObservationCode(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateExistenceOfKnownDrugAllergyObservation_validateExistenceOfKnownDrugAllergyObservationValue(existenceOfKnownDrugAllergyObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateExistenceOfKnownDrugAllergyObservationTemplateId constraint of '<em>Existence Of Known Drug Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownDrugAllergyObservation_validateExistenceOfKnownDrugAllergyObservationTemplateId(
			ExistenceOfKnownDrugAllergyObservation existenceOfKnownDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfKnownDrugAllergyObservation.validateExistenceOfKnownDrugAllergyObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfKnownDrugAllergyObservationMoodCode constraint of '<em>Existence Of Known Drug Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownDrugAllergyObservation_validateExistenceOfKnownDrugAllergyObservationMoodCode(
			ExistenceOfKnownDrugAllergyObservation existenceOfKnownDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfKnownDrugAllergyObservation.validateExistenceOfKnownDrugAllergyObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfKnownDrugAllergyObservationCodeP constraint of '<em>Existence Of Known Drug Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownDrugAllergyObservation_validateExistenceOfKnownDrugAllergyObservationCodeP(
			ExistenceOfKnownDrugAllergyObservation existenceOfKnownDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfKnownDrugAllergyObservation.validateExistenceOfKnownDrugAllergyObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfKnownDrugAllergyObservationCode constraint of '<em>Existence Of Known Drug Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownDrugAllergyObservation_validateExistenceOfKnownDrugAllergyObservationCode(
			ExistenceOfKnownDrugAllergyObservation existenceOfKnownDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfKnownDrugAllergyObservation.validateExistenceOfKnownDrugAllergyObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfKnownDrugAllergyObservationValue constraint of '<em>Existence Of Known Drug Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfKnownDrugAllergyObservation_validateExistenceOfKnownDrugAllergyObservationValue(
			ExistenceOfKnownDrugAllergyObservation existenceOfKnownDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfKnownDrugAllergyObservation.validateExistenceOfKnownDrugAllergyObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationNotAdministeredReasonObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationTemplateId(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationMoodCode(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationCodeP(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationCode(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationValue(medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationValueP(medicationNotAdministeredReasonObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationTemplateId constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationTemplateId(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationMoodCode constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationMoodCode(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationCodeP constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationCodeP(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationCode constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationCode(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationValue constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationValue(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationValueP constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationValueP(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation(MedicationResponseObservation medicationResponseObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationResponseObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationResponseObservation_validateMedicationResponseObservationTemplateId(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationResponseObservation_validateMedicationResponseObservationMoodCode(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationResponseObservation_validateMedicationResponseObservationCodeP(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationResponseObservation_validateMedicationResponseObservationCode(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationResponseObservation_validateMedicationResponseObservationValue(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationResponseObservation_validateMedicationResponseObservationValueP(medicationResponseObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationResponseObservationTemplateId constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationTemplateId(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationResponseObservationMoodCode constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationMoodCode(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationResponseObservationCodeP constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationCodeP(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationResponseObservationCode constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationCode(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationResponseObservationValue constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationValue(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationResponseObservationValueP constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationValueP(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationComplicationObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationTemplateId(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationMoodCode(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationCodeP(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationCode(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationValue(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationValueP(medicationComplicationObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationComplicationObservationTemplateId constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationTemplateId(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationComplicationObservationMoodCode constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationMoodCode(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationComplicationObservationCodeP constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationCodeP(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationComplicationObservationCode constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationCode(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationComplicationObservationValue constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationValue(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationComplicationObservationValueP constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationValueP(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationPriorAdministrationObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationTemplateId(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationMoodCode(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationCodeP(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationCode(medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationValue(medicationPriorAdministrationObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationPriorAdministrationObservationTemplateId constraint of '<em>Medication Prior Administration Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationTemplateId(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationPriorAdministrationObservation.validateMedicationPriorAdministrationObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationPriorAdministrationObservationMoodCode constraint of '<em>Medication Prior Administration Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationMoodCode(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationPriorAdministrationObservation.validateMedicationPriorAdministrationObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationPriorAdministrationObservationCodeP constraint of '<em>Medication Prior Administration Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationCodeP(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationPriorAdministrationObservation.validateMedicationPriorAdministrationObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationPriorAdministrationObservationCode constraint of '<em>Medication Prior Administration Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationCode(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationPriorAdministrationObservation.validateMedicationPriorAdministrationObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationPriorAdministrationObservationValue constraint of '<em>Medication Prior Administration Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationValue(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationPriorAdministrationObservation.validateMedicationPriorAdministrationObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight(PatientBodyWeight patientBodyWeight, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientBodyWeight, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientBodyWeight_validatePatientBodyWeightTemplateId(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientBodyWeight_validatePatientBodyWeightMoodCode(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientBodyWeight_validatePatientBodyWeightCodeP(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientBodyWeight_validatePatientBodyWeightCode(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientBodyWeight_validatePatientBodyWeightEffectiveTime(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientBodyWeight_validatePatientBodyWeightValue(patientBodyWeight, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientBodyWeightTemplateId constraint of '<em>Patient Body Weight</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight_validatePatientBodyWeightTemplateId(PatientBodyWeight patientBodyWeight,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientBodyWeight.validatePatientBodyWeightTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBodyWeightMoodCode constraint of '<em>Patient Body Weight</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight_validatePatientBodyWeightMoodCode(PatientBodyWeight patientBodyWeight,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientBodyWeight.validatePatientBodyWeightMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBodyWeightCodeP constraint of '<em>Patient Body Weight</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight_validatePatientBodyWeightCodeP(PatientBodyWeight patientBodyWeight,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientBodyWeight.validatePatientBodyWeightCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBodyWeightCode constraint of '<em>Patient Body Weight</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight_validatePatientBodyWeightCode(PatientBodyWeight patientBodyWeight,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientBodyWeight.validatePatientBodyWeightCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBodyWeightEffectiveTime constraint of '<em>Patient Body Weight</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight_validatePatientBodyWeightEffectiveTime(PatientBodyWeight patientBodyWeight,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientBodyWeight.validatePatientBodyWeightEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBodyWeightValue constraint of '<em>Patient Body Weight</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight_validatePatientBodyWeightValue(PatientBodyWeight patientBodyWeight,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientBodyWeight.validatePatientBodyWeightValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(lengthBasedPatientBodyWeightClass, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassTemplateId(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassMoodCode(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassCodeP(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassCode(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassValue(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassValueP(lengthBasedPatientBodyWeightClass, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassTemplateId constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassTemplateId(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassMoodCode constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassMoodCode(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassCodeP constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassCodeP(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassCode constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassCode(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassValue constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassValue(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassValue(diagnostics, context);
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassValueP constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassValueP(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment(FaceAssessment faceAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(faceAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateFaceAssessment_validateFaceAssessmentTemplateId(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateFaceAssessment_validateFaceAssessmentMoodCode(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateFaceAssessment_validateFaceAssessmentCodeP(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateFaceAssessment_validateFaceAssessmentCode(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateFaceAssessment_validateFaceAssessmentEffectiveTime(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateFaceAssessment_validateFaceAssessmentValue(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateFaceAssessment_validateFaceAssessmentValueP(faceAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateFaceAssessmentTemplateId constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentTemplateId(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentMoodCode constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentMoodCode(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentCodeP constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentCodeP(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentCode constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentCode(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentEffectiveTime constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentEffectiveTime(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentValue constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentValue(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentValueP constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentValueP(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment(HeadAssessment headAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(headAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeadAssessment_validateHeadAssessmentTemplateId(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeadAssessment_validateHeadAssessmentMoodCode(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeadAssessment_validateHeadAssessmentCodeP(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeadAssessment_validateHeadAssessmentCode(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeadAssessment_validateHeadAssessmentEffectiveTime(headAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeadAssessment_validateHeadAssessmentValue(headAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHeadAssessmentTemplateId constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentTemplateId(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHeadAssessmentMoodCode constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentMoodCode(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeadAssessmentCodeP constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentCodeP(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateHeadAssessmentCode constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentCode(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeadAssessmentEffectiveTime constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentEffectiveTime(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateHeadAssessmentValue constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentValue(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment(NeckAssessment neckAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(neckAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeckAssessment_validateNeckAssessmentTemplateId(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeckAssessment_validateNeckAssessmentMoodCode(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeckAssessment_validateNeckAssessmentCodeP(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeckAssessment_validateNeckAssessmentCode(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeckAssessment_validateNeckAssessmentEffectiveTime(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeckAssessment_validateNeckAssessmentValue(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeckAssessment_validateNeckAssessmentValueP(neckAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateNeckAssessmentTemplateId constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentTemplateId(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateNeckAssessmentMoodCode constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentMoodCode(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateNeckAssessmentCodeP constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentCodeP(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateNeckAssessmentCode constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentCode(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateNeckAssessmentEffectiveTime constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentEffectiveTime(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateNeckAssessmentValue constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentValue(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateNeckAssessmentValueP constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentValueP(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment(HeartAssessment heartAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(heartAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartAssessment_validateHeartAssessmentTemplateId(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartAssessment_validateHeartAssessmentMoodCode(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartAssessment_validateHeartAssessmentCodeP(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartAssessment_validateHeartAssessmentCode(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartAssessment_validateHeartAssessmentEffectiveTime(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartAssessment_validateHeartAssessmentValue(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartAssessment_validateHeartAssessmentValueP(heartAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHeartAssessmentTemplateId constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentTemplateId(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentMoodCode constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentMoodCode(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentCodeP constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentCodeP(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentCode constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentCode(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentEffectiveTime constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentEffectiveTime(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentValue constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentValue(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentValueP constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentValueP(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment(AbdomenAssessment abdomenAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(abdomenAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbdomenAssessment_validateAbdomenAssessmentTemplateId(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbdomenAssessment_validateAbdomenAssessmentMoodCode(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbdomenAssessment_validateAbdomenAssessmentCode(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbdomenAssessment_validateAbdomenAssessmentEffectiveTime(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbdomenAssessment_validateAbdomenAssessmentValue(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbdomenAssessment_validateAbdomenAssessmentValueP(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbdomenAssessment_validateAbdomenAssessmentTargetSiteCode(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbdomenAssessment_validateAbdomenAssessmentTargetSiteCodeP(abdomenAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAbdomenAssessmentTemplateId constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentTemplateId(AbdomenAssessment abdomenAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentMoodCode constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentMoodCode(AbdomenAssessment abdomenAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentCode constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentCode(AbdomenAssessment abdomenAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentEffectiveTime constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentEffectiveTime(AbdomenAssessment abdomenAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentValue constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentValue(AbdomenAssessment abdomenAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentValueP constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentValueP(AbdomenAssessment abdomenAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentTargetSiteCode constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentTargetSiteCode(
			AbdomenAssessment abdomenAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentTargetSiteCodeP constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentTargetSiteCodeP(
			AbdomenAssessment abdomenAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(pelvicAndGenitourinaryAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentTemplateId(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentMoodCode(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentCodeP(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentCode(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentEffectiveTime(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentValue(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentValueP(pelvicAndGenitourinaryAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentTemplateId constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentTemplateId(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentMoodCode constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentMoodCode(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentCodeP constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentCodeP(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentCode constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentCode(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentEffectiveTime constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentEffectiveTime(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentValue constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentValue(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentValueP constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentValueP(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment(BackAndSpineAssessment backAndSpineAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(backAndSpineAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentTemplateId(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentMoodCode(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentCodeP(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentCode(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentEffectiveTime(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentValue(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentValueP(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentTargetSiteCode(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentTargetSiteCodeP(backAndSpineAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateBackAndSpineAssessmentTemplateId constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentTemplateId(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentMoodCode constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentMoodCode(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentCodeP constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentCodeP(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentCode constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentCode(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentEffectiveTime constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentEffectiveTime(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentValue constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentValue(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentValueP constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentValueP(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentTargetSiteCode constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentTargetSiteCode(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentTargetSiteCodeP constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentTargetSiteCodeP(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment(ExtremitiesAssessment extremitiesAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(extremitiesAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateExtremitiesAssessment_validateExtremitiesAssessmentTemplateId(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateExtremitiesAssessment_validateExtremitiesAssessmentMoodCode(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateExtremitiesAssessment_validateExtremitiesAssessmentCodeP(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateExtremitiesAssessment_validateExtremitiesAssessmentCode(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateExtremitiesAssessment_validateExtremitiesAssessmentEffectiveTime(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateExtremitiesAssessment_validateExtremitiesAssessmentValue(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateExtremitiesAssessment_validateExtremitiesAssessmentValueP(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateExtremitiesAssessment_validateExtremitiesAssessmentTargetSiteCode(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateExtremitiesAssessment_validateExtremitiesAssessmentTargetSiteCodeP(extremitiesAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateExtremitiesAssessmentTemplateId constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentTemplateId(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentMoodCode constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentMoodCode(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentCodeP constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentCodeP(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentCode constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentCode(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentEffectiveTime constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentEffectiveTime(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentValue constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentValue(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentValueP constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentValueP(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentTargetSiteCode constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentTargetSiteCode(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentTargetSiteCodeP constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentTargetSiteCodeP(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment(EyeAssessment eyeAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(eyeAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateEyeAssessment_validateEyeAssessmentTemplateId(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateEyeAssessment_validateEyeAssessmentMoodCode(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateEyeAssessment_validateEyeAssessmentCodeP(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateEyeAssessment_validateEyeAssessmentCode(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateEyeAssessment_validateEyeAssessmentEffectiveTime(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateEyeAssessment_validateEyeAssessmentValue(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateEyeAssessment_validateEyeAssessmentValueP(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateEyeAssessment_validateEyeAssessmentTargetSiteCode(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateEyeAssessment_validateEyeAssessmentTargetSiteCodeP(eyeAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEyeAssessmentTemplateId constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentTemplateId(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentMoodCode constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentMoodCode(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentCodeP constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentCodeP(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentCode constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentCode(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentEffectiveTime constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentEffectiveTime(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentValue constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentValue(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentValueP constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentValueP(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentTargetSiteCode constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentTargetSiteCode(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentTargetSiteCodeP constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentTargetSiteCodeP(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment(MentalStatusAssessment mentalStatusAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(mentalStatusAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateMentalStatusAssessment_validateMentalStatusAssessmentTemplateId(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateMentalStatusAssessment_validateMentalStatusAssessmentMoodCode(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateMentalStatusAssessment_validateMentalStatusAssessmentCodeP(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateMentalStatusAssessment_validateMentalStatusAssessmentCode(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateMentalStatusAssessment_validateMentalStatusAssessmentEffectiveTime(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateMentalStatusAssessment_validateMentalStatusAssessmentValue(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateMentalStatusAssessment_validateMentalStatusAssessmentValueP(mentalStatusAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMentalStatusAssessmentTemplateId constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentTemplateId(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMentalStatusAssessmentMoodCode constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentMoodCode(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateMentalStatusAssessmentCodeP constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentCodeP(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMentalStatusAssessmentCode constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentCode(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateMentalStatusAssessmentEffectiveTime constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentEffectiveTime(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateMentalStatusAssessmentValue constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentValue(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateMentalStatusAssessmentValueP constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentValueP(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestTiming(CardiacArrestTiming cardiacArrestTiming, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(cardiacArrestTiming, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestTiming_validateCardiacArrestTimingTemplateId(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestTiming_validateCardiacArrestTimingMoodCode(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestTiming_validateCardiacArrestTimingCode(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestTiming_validateCardiacArrestTimingValue(cardiacArrestTiming, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCardiacArrestTimingTemplateId constraint of '<em>Cardiac Arrest Timing</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestTiming_validateCardiacArrestTimingTemplateId(
			CardiacArrestTiming cardiacArrestTiming, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestTiming.validateCardiacArrestTimingTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestTimingMoodCode constraint of '<em>Cardiac Arrest Timing</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestTiming_validateCardiacArrestTimingMoodCode(
			CardiacArrestTiming cardiacArrestTiming, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestTiming.validateCardiacArrestTimingMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestTimingCode constraint of '<em>Cardiac Arrest Timing</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestTiming_validateCardiacArrestTimingCode(CardiacArrestTiming cardiacArrestTiming,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestTiming.validateCardiacArrestTimingCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestTimingValue constraint of '<em>Cardiac Arrest Timing</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestTiming_validateCardiacArrestTimingValue(CardiacArrestTiming cardiacArrestTiming,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestTiming.validateCardiacArrestTimingValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause(CardiacArrestCause cardiacArrestCause, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(cardiacArrestCause, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestCause_validateCardiacArrestCauseTemplateId(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestCause_validateCardiacArrestCauseMoodCode(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestCause_validateCardiacArrestCauseCode(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestCause_validateCardiacArrestCauseValue(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestCause_validateCardiacArrestCauseValueP(cardiacArrestCause, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCardiacArrestCauseTemplateId constraint of '<em>Cardiac Arrest Cause</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause_validateCardiacArrestCauseTemplateId(
			CardiacArrestCause cardiacArrestCause, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestCause.validateCardiacArrestCauseTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCauseMoodCode constraint of '<em>Cardiac Arrest Cause</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause_validateCardiacArrestCauseMoodCode(CardiacArrestCause cardiacArrestCause,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestCause.validateCardiacArrestCauseMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCauseCode constraint of '<em>Cardiac Arrest Cause</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause_validateCardiacArrestCauseCode(CardiacArrestCause cardiacArrestCause,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestCause.validateCardiacArrestCauseCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCauseValue constraint of '<em>Cardiac Arrest Cause</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause_validateCardiacArrestCauseValue(CardiacArrestCause cardiacArrestCause,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestCause.validateCardiacArrestCauseValue(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCauseValueP constraint of '<em>Cardiac Arrest Cause</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause_validateCardiacArrestCauseValueP(CardiacArrestCause cardiacArrestCause,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestCause.validateCardiacArrestCauseValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateArrestRhythm(ArrestRhythm arrestRhythm, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(arrestRhythm, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateArrestRhythm_validateArrestRhythmTemplateId(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateArrestRhythm_validateArrestRhythmMoodCode(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateArrestRhythm_validateArrestRhythmCode(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateArrestRhythm_validateArrestRhythmValue(arrestRhythm, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateArrestRhythmTemplateId constraint of '<em>Arrest Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateArrestRhythm_validateArrestRhythmTemplateId(ArrestRhythm arrestRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return arrestRhythm.validateArrestRhythmTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateArrestRhythmMoodCode constraint of '<em>Arrest Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateArrestRhythm_validateArrestRhythmMoodCode(ArrestRhythm arrestRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return arrestRhythm.validateArrestRhythmMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateArrestRhythmCode constraint of '<em>Arrest Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateArrestRhythm_validateArrestRhythmCode(ArrestRhythm arrestRhythm, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return arrestRhythm.validateArrestRhythmCode(diagnostics, context);
	}

	/**
	 * Validates the validateArrestRhythmValue constraint of '<em>Arrest Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateArrestRhythm_validateArrestRhythmValue(ArrestRhythm arrestRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return arrestRhythm.validateArrestRhythmValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation(ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(returnOfSpontaneousCirculation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationTemplateId(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationMoodCode(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationCodeP(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationCode(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationValue(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationValueP(returnOfSpontaneousCirculation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateReturnOfSpontaneousCirculationTemplateId constraint of '<em>Return Of Spontaneous Circulation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationTemplateId(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return returnOfSpontaneousCirculation.validateReturnOfSpontaneousCirculationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateReturnOfSpontaneousCirculationMoodCode constraint of '<em>Return Of Spontaneous Circulation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationMoodCode(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return returnOfSpontaneousCirculation.validateReturnOfSpontaneousCirculationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateReturnOfSpontaneousCirculationCodeP constraint of '<em>Return Of Spontaneous Circulation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationCodeP(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return returnOfSpontaneousCirculation.validateReturnOfSpontaneousCirculationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateReturnOfSpontaneousCirculationCode constraint of '<em>Return Of Spontaneous Circulation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationCode(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return returnOfSpontaneousCirculation.validateReturnOfSpontaneousCirculationCode(diagnostics, context);
	}

	/**
	 * Validates the validateReturnOfSpontaneousCirculationValue constraint of '<em>Return Of Spontaneous Circulation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationValue(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return returnOfSpontaneousCirculation.validateReturnOfSpontaneousCirculationValue(diagnostics, context);
	}

	/**
	 * Validates the validateReturnOfSpontaneousCirculationValueP constraint of '<em>Return Of Spontaneous Circulation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationValueP(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return returnOfSpontaneousCirculation.validateReturnOfSpontaneousCirculationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm(DestinationRhythm destinationRhythm, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(destinationRhythm, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationRhythm_validateDestinationRhythmTemplateId(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationRhythm_validateDestinationRhythmMoodCode(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationRhythm_validateDestinationRhythmCode(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationRhythm_validateDestinationRhythmValue(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateDestinationRhythm_validateDestinationRhythmValueP(destinationRhythm, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDestinationRhythmTemplateId constraint of '<em>Destination Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm_validateDestinationRhythmTemplateId(DestinationRhythm destinationRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationRhythm.validateDestinationRhythmTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationRhythmMoodCode constraint of '<em>Destination Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm_validateDestinationRhythmMoodCode(DestinationRhythm destinationRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationRhythm.validateDestinationRhythmMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationRhythmCode constraint of '<em>Destination Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm_validateDestinationRhythmCode(DestinationRhythm destinationRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationRhythm.validateDestinationRhythmCode(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationRhythmValue constraint of '<em>Destination Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm_validateDestinationRhythmValue(DestinationRhythm destinationRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationRhythm.validateDestinationRhythmValue(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationRhythmValueP constraint of '<em>Destination Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm_validateDestinationRhythmValueP(DestinationRhythm destinationRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationRhythm.validateDestinationRhythmValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(abandonedProcedureReasonObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationTemplateId(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationMoodCode(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationCodeP(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationCode(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationValue(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationValueP(abandonedProcedureReasonObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationTemplateId constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationTemplateId(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationMoodCode constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationMoodCode(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationCodeP constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationCodeP(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationCode constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationCode(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationValue constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationValue(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationValueP constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationValueP(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator(ProcedurePriorIndicator procedurePriorIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedurePriorIndicator, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePriorIndicator_validateProcedurePriorIndicatorTemplateId(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePriorIndicator_validateProcedurePriorIndicatorMoodCode(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePriorIndicator_validateProcedurePriorIndicatorCodeP(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePriorIndicator_validateProcedurePriorIndicatorCode(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePriorIndicator_validateProcedurePriorIndicatorValue(procedurePriorIndicator, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedurePriorIndicatorTemplateId constraint of '<em>Procedure Prior Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator_validateProcedurePriorIndicatorTemplateId(
			ProcedurePriorIndicator procedurePriorIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePriorIndicator.validateProcedurePriorIndicatorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePriorIndicatorMoodCode constraint of '<em>Procedure Prior Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator_validateProcedurePriorIndicatorMoodCode(
			ProcedurePriorIndicator procedurePriorIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePriorIndicator.validateProcedurePriorIndicatorMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePriorIndicatorCodeP constraint of '<em>Procedure Prior Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator_validateProcedurePriorIndicatorCodeP(
			ProcedurePriorIndicator procedurePriorIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePriorIndicator.validateProcedurePriorIndicatorCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePriorIndicatorCode constraint of '<em>Procedure Prior Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator_validateProcedurePriorIndicatorCode(
			ProcedurePriorIndicator procedurePriorIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePriorIndicator.validateProcedurePriorIndicatorCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePriorIndicatorValue constraint of '<em>Procedure Prior Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator_validateProcedurePriorIndicatorValue(
			ProcedurePriorIndicator procedurePriorIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePriorIndicator.validateProcedurePriorIndicatorValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureNumberOfAttemptsObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationTemplateId(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationMoodCode(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationCodeP(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationCode(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationValue(procedureNumberOfAttemptsObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsObservationTemplateId constraint of '<em>Procedure Number Of Attempts Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationTemplateId(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNumberOfAttemptsObservation.validateProcedureNumberOfAttemptsObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsObservationMoodCode constraint of '<em>Procedure Number Of Attempts Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationMoodCode(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNumberOfAttemptsObservation.validateProcedureNumberOfAttemptsObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsObservationCodeP constraint of '<em>Procedure Number Of Attempts Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationCodeP(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNumberOfAttemptsObservation.validateProcedureNumberOfAttemptsObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsObservationCode constraint of '<em>Procedure Number Of Attempts Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationCode(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNumberOfAttemptsObservation.validateProcedureNumberOfAttemptsObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsObservationValue constraint of '<em>Procedure Number Of Attempts Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationValue(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNumberOfAttemptsObservation.validateProcedureNumberOfAttemptsObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation(ProcedureSuccessfulObservation procedureSuccessfulObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureSuccessfulObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationTemplateId(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationMoodCode(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationCodeP(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationCode(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationValue(procedureSuccessfulObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureSuccessfulObservationTemplateId constraint of '<em>Procedure Successful Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationTemplateId(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSuccessfulObservation.validateProcedureSuccessfulObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSuccessfulObservationMoodCode constraint of '<em>Procedure Successful Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationMoodCode(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSuccessfulObservation.validateProcedureSuccessfulObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSuccessfulObservationCodeP constraint of '<em>Procedure Successful Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationCodeP(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSuccessfulObservation.validateProcedureSuccessfulObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSuccessfulObservationCode constraint of '<em>Procedure Successful Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationCode(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSuccessfulObservation.validateProcedureSuccessfulObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSuccessfulObservationValue constraint of '<em>Procedure Successful Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationValue(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSuccessfulObservation.validateProcedureSuccessfulObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureComplicationsObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationTemplateId(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationMoodCode(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationCodeP(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationCode(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationValue(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationValueP(procedureComplicationsObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureComplicationsObservationTemplateId constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationTemplateId(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureComplicationsObservationMoodCode constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationMoodCode(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureComplicationsObservationCodeP constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationCodeP(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureComplicationsObservationCode constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationCode(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureComplicationsObservationValue constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationValue(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureComplicationsObservationValueP constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationValueP(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedurePatientResponseObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationTemplateId(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationMoodCode(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationCodeP(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationCode(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationValue(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationValueP(procedurePatientResponseObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationTemplateId constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationTemplateId(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationMoodCode constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationMoodCode(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationCodeP constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationCodeP(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationCode constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationCode(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationValue constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationValue(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationValueP constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationValueP(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation(AirwayConfirmationObservation airwayConfirmationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(airwayConfirmationObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationTemplateId(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMoodCode(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationCodeP(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationCode(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationEffectiveTime(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationValue(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMethodCodeP(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMethodCode(airwayConfirmationObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAirwayConfirmationObservationTemplateId constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationTemplateId(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationMoodCode constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMoodCode(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationCodeP constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationCodeP(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationCode constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationCode(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationEffectiveTime constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationEffectiveTime(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationValue constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationValue(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationMethodCodeP constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMethodCodeP(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationMethodCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationMethodCode constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMethodCode(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationMethodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(reasonProcedureNotAttemptedObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationTemplateId(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationMoodCode(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationCodeP(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationCode(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationValue(reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationValueP(reasonProcedureNotAttemptedObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationTemplateId constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationTemplateId(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationMoodCode constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationMoodCode(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationCodeP constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationCodeP(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationCode constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationCode(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationValue constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationValue(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationValueP constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationValueP(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType(ComplaintType complaintType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(complaintType, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintType_validateComplaintTypeTemplateId(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintType_validateComplaintTypeMoodCode(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintType_validateComplaintTypeCodeP(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintType_validateComplaintTypeCode(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintType_validateComplaintTypeValue(complaintType, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintType_validateComplaintTypeValueP(complaintType, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComplaintTypeTemplateId constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeTemplateId(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeMoodCode constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeMoodCode(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeCodeP constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeCodeP(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeCode constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeCode(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeValue constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeValue(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeValue(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeValueP constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeValueP(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration(ComplaintDuration complaintDuration, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(complaintDuration, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintDuration_validateComplaintDurationTemplateId(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintDuration_validateComplaintDurationMoodCode(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintDuration_validateComplaintDurationCodeP(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintDuration_validateComplaintDurationCode(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintDuration_validateComplaintDurationValue(complaintDuration, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComplaintDurationTemplateId constraint of '<em>Complaint Duration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration_validateComplaintDurationTemplateId(ComplaintDuration complaintDuration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintDuration.validateComplaintDurationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintDurationMoodCode constraint of '<em>Complaint Duration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration_validateComplaintDurationMoodCode(ComplaintDuration complaintDuration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintDuration.validateComplaintDurationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintDurationCodeP constraint of '<em>Complaint Duration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration_validateComplaintDurationCodeP(ComplaintDuration complaintDuration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintDuration.validateComplaintDurationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintDurationCode constraint of '<em>Complaint Duration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration_validateComplaintDurationCode(ComplaintDuration complaintDuration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintDuration.validateComplaintDurationCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintDurationValue constraint of '<em>Complaint Duration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration_validateComplaintDurationValue(ComplaintDuration complaintDuration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintDuration.validateComplaintDurationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem(ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(complaintOrganSystem, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintOrganSystem_validateComplaintOrganSystemTemplateId(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintOrganSystem_validateComplaintOrganSystemMoodCode(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintOrganSystem_validateComplaintOrganSystemCodeP(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintOrganSystem_validateComplaintOrganSystemCode(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintOrganSystem_validateComplaintOrganSystemValue(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplaintOrganSystem_validateComplaintOrganSystemValueP(complaintOrganSystem, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComplaintOrganSystemTemplateId constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemTemplateId(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemMoodCode constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemMoodCode(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemCodeP constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemCodeP(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemCode constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemCode(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemValue constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemValue(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemValue(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemValueP constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemValueP(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment(NeurologicalAssessment neurologicalAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(neurologicalAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeurologicalAssessment_validateNeurologicalAssessmentTemplateId(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeurologicalAssessment_validateNeurologicalAssessmentMoodCode(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeurologicalAssessment_validateNeurologicalAssessmentCodeP(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeurologicalAssessment_validateNeurologicalAssessmentCode(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeurologicalAssessment_validateNeurologicalAssessmentValue(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateNeurologicalAssessment_validateNeurologicalAssessmentValueP(neurologicalAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateNeurologicalAssessmentTemplateId constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentTemplateId(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateNeurologicalAssessmentMoodCode constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentMoodCode(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateNeurologicalAssessmentCodeP constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentCodeP(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateNeurologicalAssessmentCode constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentCode(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateNeurologicalAssessmentValue constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentValue(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateNeurologicalAssessmentValueP constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentValueP(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure(DiastolicBloodPressure diastolicBloodPressure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(diastolicBloodPressure, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureTemplateId(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureMoodCode(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureCode(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureEffectiveTime(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureValue(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureMethodCode(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureMethodCodeP(diastolicBloodPressure, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDiastolicBloodPressureTemplateId constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureTemplateId(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDiastolicBloodPressureMoodCode constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureMoodCode(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDiastolicBloodPressureCode constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureCode(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureCode(diagnostics, context);
	}

	/**
	 * Validates the validateDiastolicBloodPressureEffectiveTime constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureEffectiveTime(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateDiastolicBloodPressureValue constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureValue(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureValue(diagnostics, context);
	}

	/**
	 * Validates the validateDiastolicBloodPressureMethodCode constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureMethodCode(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDiastolicBloodPressureMethodCodeP constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureMethodCodeP(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureMethodCodeP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate(HeartRate heartRate, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(heartRate, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartRate_validateHeartRateTemplateId(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartRate_validateHeartRateMoodCode(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartRate_validateHeartRateCodeP(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartRate_validateHeartRateCode(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartRate_validateHeartRateEffectiveTime(heartRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateHeartRate_validateHeartRateValue(heartRate, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHeartRateTemplateId constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateTemplateId(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHeartRateMoodCode constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateMoodCode(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeartRateCodeP constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateCodeP(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateHeartRateCode constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateCode(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeartRateEffectiveTime constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateEffectiveTime(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateHeartRateValue constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateValue(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate(RespiratoryRate respiratoryRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(respiratoryRate, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateRespiratoryRate_validateRespiratoryRateTemplateId(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateRespiratoryRate_validateRespiratoryRateMoodCode(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateRespiratoryRate_validateRespiratoryRateCodeP(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateRespiratoryRate_validateRespiratoryRateCode(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateRespiratoryRate_validateRespiratoryRateEffectiveTime(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) result &= validateRespiratoryRate_validateRespiratoryRateValue(respiratoryRate, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateRespiratoryRateTemplateId constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateRespiratoryRateTemplateId(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateRespiratoryRateTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateRespiratoryRateMoodCode constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateRespiratoryRateMoodCode(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateRespiratoryRateMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateRespiratoryRateCodeP constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateRespiratoryRateCodeP(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateRespiratoryRateCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateRespiratoryRateCode constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateRespiratoryRateCode(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateRespiratoryRateCode(diagnostics, context);
	}

	/**
	 * Validates the validateRespiratoryRateEffectiveTime constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateRespiratoryRateEffectiveTime(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateRespiratoryRateEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateRespiratoryRateValue constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateRespiratoryRateValue(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateRespiratoryRateValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature(BodyTemperature bodyTemperature, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(bodyTemperature, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validateBodyTemperature_validateBodyTemperatureTemplateId(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validateBodyTemperature_validateBodyTemperatureMoodCode(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validateBodyTemperature_validateBodyTemperatureCode(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validateBodyTemperature_validateBodyTemperatureEffectiveTime(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) result &= validateBodyTemperature_validateBodyTemperatureValue(bodyTemperature, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateBodyTemperatureTemplateId constraint of '<em>Body Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature_validateBodyTemperatureTemplateId(BodyTemperature bodyTemperature,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bodyTemperature.validateBodyTemperatureTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBodyTemperatureMoodCode constraint of '<em>Body Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature_validateBodyTemperatureMoodCode(BodyTemperature bodyTemperature,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bodyTemperature.validateBodyTemperatureMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateBodyTemperatureCode constraint of '<em>Body Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature_validateBodyTemperatureCode(BodyTemperature bodyTemperature,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bodyTemperature.validateBodyTemperatureCode(diagnostics, context);
	}

	/**
	 * Validates the validateBodyTemperatureEffectiveTime constraint of '<em>Body Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature_validateBodyTemperatureEffectiveTime(BodyTemperature bodyTemperature,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bodyTemperature.validateBodyTemperatureEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateBodyTemperatureValue constraint of '<em>Body Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature_validateBodyTemperatureValue(BodyTemperature bodyTemperature,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bodyTemperature.validateBodyTemperatureValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation(OxygenSaturation oxygenSaturation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(oxygenSaturation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validateOxygenSaturation_validateOxygenSaturationTemplateId(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validateOxygenSaturation_validateOxygenSaturationMoodCode(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validateOxygenSaturation_validateOxygenSaturationCodeP(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validateOxygenSaturation_validateOxygenSaturationCode(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validateOxygenSaturation_validateOxygenSaturationEffectiveTime(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) result &= validateOxygenSaturation_validateOxygenSaturationValue(oxygenSaturation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateOxygenSaturationTemplateId constraint of '<em>Oxygen Saturation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation_validateOxygenSaturationTemplateId(OxygenSaturation oxygenSaturation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return oxygenSaturation.validateOxygenSaturationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateOxygenSaturationMoodCode constraint of '<em>Oxygen Saturation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation_validateOxygenSaturationMoodCode(OxygenSaturation oxygenSaturation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return oxygenSaturation.validateOxygenSaturationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateOxygenSaturationCodeP constraint of '<em>Oxygen Saturation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation_validateOxygenSaturationCodeP(OxygenSaturation oxygenSaturation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return oxygenSaturation.validateOxygenSaturationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateOxygenSaturationCode constraint of '<em>Oxygen Saturation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation_validateOxygenSaturationCode(OxygenSaturation oxygenSaturation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return oxygenSaturation.validateOxygenSaturationCode(diagnostics, context);
	}

	/**
	 * Validates the validateOxygenSaturationEffectiveTime constraint of '<em>Oxygen Saturation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation_validateOxygenSaturationEffectiveTime(OxygenSaturation oxygenSaturation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return oxygenSaturation.validateOxygenSaturationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateOxygenSaturationValue constraint of '<em>Oxygen Saturation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation_validateOxygenSaturationValue(OxygenSaturation oxygenSaturation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return oxygenSaturation.validateOxygenSaturationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory(ProtocolAgeCategory protocolAgeCategory, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(protocolAgeCategory, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolAgeCategory_validateProtocolAgeCategoryTemplateId(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolAgeCategory_validateProtocolAgeCategoryMoodCode(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolAgeCategory_validateProtocolAgeCategoryCodeP(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolAgeCategory_validateProtocolAgeCategoryCode(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolAgeCategory_validateProtocolAgeCategoryValue(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) result &= validateProtocolAgeCategory_validateProtocolAgeCategoryValueP(protocolAgeCategory, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProtocolAgeCategoryTemplateId constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryTemplateId(
			ProtocolAgeCategory protocolAgeCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolAgeCategoryMoodCode constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryMoodCode(
			ProtocolAgeCategory protocolAgeCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolAgeCategoryCodeP constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryCodeP(ProtocolAgeCategory protocolAgeCategory,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolAgeCategoryCode constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryCode(ProtocolAgeCategory protocolAgeCategory,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryCode(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolAgeCategoryValue constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryValue(ProtocolAgeCategory protocolAgeCategory,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryValue(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolAgeCategoryValueP constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryValueP(
			ProtocolAgeCategory protocolAgeCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationName(DispatchLocationName dispatchLocationName, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchLocationName, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationName_validateDispatchLocationNameTemplateId(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationName_validateDispatchLocationNameMoodCode(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationName_validateDispatchLocationNameCode(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationName_validateDispatchLocationNameValue(dispatchLocationName, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDispatchLocationNameTemplateId constraint of '<em>Dispatch Location Name</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationName_validateDispatchLocationNameTemplateId(
			DispatchLocationName dispatchLocationName, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationName.validateDispatchLocationNameTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationNameMoodCode constraint of '<em>Dispatch Location Name</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationName_validateDispatchLocationNameMoodCode(
			DispatchLocationName dispatchLocationName, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationName.validateDispatchLocationNameMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationNameCode constraint of '<em>Dispatch Location Name</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationName_validateDispatchLocationNameCode(
			DispatchLocationName dispatchLocationName, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationName.validateDispatchLocationNameCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationNameValue constraint of '<em>Dispatch Location Name</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationName_validateDispatchLocationNameValue(
			DispatchLocationName dispatchLocationName, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationName.validateDispatchLocationNameValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLatitude(DispatchLocationLatitude dispatchLocationLatitude,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchLocationLatitude, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationLatitude_validateDispatchLocationLatitudeTemplateId(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationLatitude_validateDispatchLocationLatitudeMoodCode(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationLatitude_validateDispatchLocationLatitudeCode(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationLatitude_validateDispatchLocationLatitudeValue(dispatchLocationLatitude, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDispatchLocationLatitudeTemplateId constraint of '<em>Dispatch Location Latitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLatitude_validateDispatchLocationLatitudeTemplateId(
			DispatchLocationLatitude dispatchLocationLatitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLatitude.validateDispatchLocationLatitudeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLatitudeMoodCode constraint of '<em>Dispatch Location Latitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLatitude_validateDispatchLocationLatitudeMoodCode(
			DispatchLocationLatitude dispatchLocationLatitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLatitude.validateDispatchLocationLatitudeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLatitudeCode constraint of '<em>Dispatch Location Latitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLatitude_validateDispatchLocationLatitudeCode(
			DispatchLocationLatitude dispatchLocationLatitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLatitude.validateDispatchLocationLatitudeCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLatitudeValue constraint of '<em>Dispatch Location Latitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLatitude_validateDispatchLocationLatitudeValue(
			DispatchLocationLatitude dispatchLocationLatitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLatitude.validateDispatchLocationLatitudeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLongitude(DispatchLocationLongitude dispatchLocationLongitude,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchLocationLongitude, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationLongitude_validateDispatchLocationLongitudeTemplateId(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationLongitude_validateDispatchLocationLongitudeMoodCode(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationLongitude_validateDispatchLocationLongitudeCode(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchLocationLongitude_validateDispatchLocationLongitudeValue(dispatchLocationLongitude, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDispatchLocationLongitudeTemplateId constraint of '<em>Dispatch Location Longitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLongitude_validateDispatchLocationLongitudeTemplateId(
			DispatchLocationLongitude dispatchLocationLongitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLongitude.validateDispatchLocationLongitudeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLongitudeMoodCode constraint of '<em>Dispatch Location Longitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLongitude_validateDispatchLocationLongitudeMoodCode(
			DispatchLocationLongitude dispatchLocationLongitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLongitude.validateDispatchLocationLongitudeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLongitudeCode constraint of '<em>Dispatch Location Longitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLongitude_validateDispatchLocationLongitudeCode(
			DispatchLocationLongitude dispatchLocationLongitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLongitude.validateDispatchLocationLongitudeCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLongitudeValue constraint of '<em>Dispatch Location Longitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLongitude_validateDispatchLocationLongitudeValue(
			DispatchLocationLongitude dispatchLocationLongitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLongitude.validateDispatchLocationLongitudeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay(DispatchDelay dispatchDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchDelay, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchDelay_validateDispatchDelayTemplateId(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchDelay_validateDispatchDelayMoodCode(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchDelay_validateDispatchDelayCodeP(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchDelay_validateDispatchDelayCode(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchDelay_validateDispatchDelayValue(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateDispatchDelay_validateDispatchDelayValueP(dispatchDelay, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDispatchDelayTemplateId constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayTemplateId(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchDelayMoodCode constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayMoodCode(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchDelayCodeP constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayCodeP(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchDelayCode constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayCode(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchDelayValue constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayValue(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayValue(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchDelayValueP constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayValueP(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay(ResponseDelay responseDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseDelay, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDelay_validateResponseDelayTemplateId(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDelay_validateResponseDelayMoodCode(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDelay_validateResponseDelayCodeP(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDelay_validateResponseDelayCode(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDelay_validateResponseDelayValue(responseDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDelay_validateResponseDelayValueP(responseDelay, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponseDelayTemplateId constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayTemplateId(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDelayMoodCode constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayMoodCode(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDelayCodeP constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayCodeP(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDelayCode constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayCode(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDelayValue constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayValue(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayValue(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDelayValueP constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayValueP(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay(SceneDelay sceneDelay, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(sceneDelay, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateSceneDelay_validateSceneDelayTemplateId(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateSceneDelay_validateSceneDelayMoodCode(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateSceneDelay_validateSceneDelayCodeP(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateSceneDelay_validateSceneDelayCode(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateSceneDelay_validateSceneDelayValue(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateSceneDelay_validateSceneDelayValueP(sceneDelay, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSceneDelayTemplateId constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayTemplateId(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSceneDelayMoodCode constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayMoodCode(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateSceneDelayCodeP constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayCodeP(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateSceneDelayCode constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayCode(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayCode(diagnostics, context);
	}

	/**
	 * Validates the validateSceneDelayValue constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayValue(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayValue(diagnostics, context);
	}

	/**
	 * Validates the validateSceneDelayValueP constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayValueP(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay(TransportDelay transportDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(transportDelay, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDelay_validateTransportDelayTemplateId(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDelay_validateTransportDelayMoodCode(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDelay_validateTransportDelayCodeP(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDelay_validateTransportDelayCode(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDelay_validateTransportDelayValue(transportDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportDelay_validateTransportDelayValueP(transportDelay, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateTransportDelayTemplateId constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayTemplateId(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDelayMoodCode constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayMoodCode(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDelayCodeP constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayCodeP(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDelayCode constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayCode(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDelayValue constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayValue(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayValue(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDelayValueP constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayValueP(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay(TurnaroundDelay turnaroundDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(turnaroundDelay, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTurnaroundDelay_validateTurnaroundDelayTemplateId(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTurnaroundDelay_validateTurnaroundDelayMoodCode(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTurnaroundDelay_validateTurnaroundDelayCodeP(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTurnaroundDelay_validateTurnaroundDelayCode(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTurnaroundDelay_validateTurnaroundDelayValue(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) result &= validateTurnaroundDelay_validateTurnaroundDelayValueP(turnaroundDelay, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateTurnaroundDelayTemplateId constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayTemplateId(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTurnaroundDelayMoodCode constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayMoodCode(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateTurnaroundDelayCodeP constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayCodeP(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTurnaroundDelayCode constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayCode(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayCode(diagnostics, context);
	}

	/**
	 * Validates the validateTurnaroundDelayValue constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayValue(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayValue(diagnostics, context);
	}

	/**
	 * Validates the validateTurnaroundDelayValueP constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayValueP(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal(GlasgowTotal glasgowTotal, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowTotal, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowTotal_validateGlasgowTotalTemplateId(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowTotal_validateGlasgowTotalMoodCode(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowTotal_validateGlasgowTotalCodeP(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowTotal_validateGlasgowTotalCode(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowTotal_validateGlasgowTotalValue(glasgowTotal, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateGlasgowTotalTemplateId constraint of '<em>Glasgow Total</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal_validateGlasgowTotalTemplateId(GlasgowTotal glasgowTotal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowTotal.validateGlasgowTotalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowTotalMoodCode constraint of '<em>Glasgow Total</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal_validateGlasgowTotalMoodCode(GlasgowTotal glasgowTotal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowTotal.validateGlasgowTotalMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowTotalCodeP constraint of '<em>Glasgow Total</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal_validateGlasgowTotalCodeP(GlasgowTotal glasgowTotal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowTotal.validateGlasgowTotalCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowTotalCode constraint of '<em>Glasgow Total</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal_validateGlasgowTotalCode(GlasgowTotal glasgowTotal, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowTotal.validateGlasgowTotalCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowTotalValue constraint of '<em>Glasgow Total</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal_validateGlasgowTotalValue(GlasgowTotal glasgowTotal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowTotal.validateGlasgowTotalValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier(GlasgowQualifier glasgowQualifier, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowQualifier, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowQualifier_validateGlasgowQualifierTemplateId(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowQualifier_validateGlasgowQualifierMoodCode(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowQualifier_validateGlasgowQualifierCodeP(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowQualifier_validateGlasgowQualifierCode(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowQualifier_validateGlasgowQualifierValue(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowQualifier_validateGlasgowQualifierValueP(glasgowQualifier, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateGlasgowQualifierTemplateId constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierTemplateId(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowQualifierMoodCode constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierMoodCode(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowQualifierCodeP constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierCodeP(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowQualifierCode constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierCode(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowQualifierValue constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierValue(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierValue(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowQualifierValueP constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierValueP(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye(GlasgowEye glasgowEye, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowEye, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowEye_validateGlasgowEyeTemplateId(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowEye_validateGlasgowEyeMoodCode(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowEye_validateGlasgowEyeCodeP(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowEye_validateGlasgowEyeCode(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowEye_validateGlasgowEyeValue(glasgowEye, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateGlasgowEyeTemplateId constraint of '<em>Glasgow Eye</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye_validateGlasgowEyeTemplateId(GlasgowEye glasgowEye, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowEye.validateGlasgowEyeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowEyeMoodCode constraint of '<em>Glasgow Eye</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye_validateGlasgowEyeMoodCode(GlasgowEye glasgowEye, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowEye.validateGlasgowEyeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowEyeCodeP constraint of '<em>Glasgow Eye</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye_validateGlasgowEyeCodeP(GlasgowEye glasgowEye, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowEye.validateGlasgowEyeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowEyeCode constraint of '<em>Glasgow Eye</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye_validateGlasgowEyeCode(GlasgowEye glasgowEye, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowEye.validateGlasgowEyeCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowEyeValue constraint of '<em>Glasgow Eye</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye_validateGlasgowEyeValue(GlasgowEye glasgowEye, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowEye.validateGlasgowEyeValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor(GlasgowMotor glasgowMotor, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowMotor, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowMotor_validateGlasgowMotorTemplateId(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowMotor_validateGlasgowMotorMoodCode(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowMotor_validateGlasgowMotorCodeP(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowMotor_validateGlasgowMotorCode(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowMotor_validateGlasgowMotorValue(glasgowMotor, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateGlasgowMotorTemplateId constraint of '<em>Glasgow Motor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor_validateGlasgowMotorTemplateId(GlasgowMotor glasgowMotor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowMotor.validateGlasgowMotorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowMotorMoodCode constraint of '<em>Glasgow Motor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor_validateGlasgowMotorMoodCode(GlasgowMotor glasgowMotor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowMotor.validateGlasgowMotorMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowMotorCodeP constraint of '<em>Glasgow Motor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor_validateGlasgowMotorCodeP(GlasgowMotor glasgowMotor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowMotor.validateGlasgowMotorCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowMotorCode constraint of '<em>Glasgow Motor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor_validateGlasgowMotorCode(GlasgowMotor glasgowMotor, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowMotor.validateGlasgowMotorCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowMotorValue constraint of '<em>Glasgow Motor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor_validateGlasgowMotorValue(GlasgowMotor glasgowMotor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowMotor.validateGlasgowMotorValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal(GlasgowVerbal glasgowVerbal, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowVerbal, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowVerbal_validateGlasgowVerbalTemplateId(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowVerbal_validateGlasgowVerbalMoodCode(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowVerbal_validateGlasgowVerbalCodeP(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowVerbal_validateGlasgowVerbalCode(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowVerbal_validateGlasgowVerbalValue(glasgowVerbal, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateGlasgowVerbalTemplateId constraint of '<em>Glasgow Verbal</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal_validateGlasgowVerbalTemplateId(GlasgowVerbal glasgowVerbal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowVerbal.validateGlasgowVerbalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowVerbalMoodCode constraint of '<em>Glasgow Verbal</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal_validateGlasgowVerbalMoodCode(GlasgowVerbal glasgowVerbal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowVerbal.validateGlasgowVerbalMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowVerbalCodeP constraint of '<em>Glasgow Verbal</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal_validateGlasgowVerbalCodeP(GlasgowVerbal glasgowVerbal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowVerbal.validateGlasgowVerbalCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowVerbalCode constraint of '<em>Glasgow Verbal</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal_validateGlasgowVerbalCode(GlasgowVerbal glasgowVerbal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowVerbal.validateGlasgowVerbalCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowVerbalValue constraint of '<em>Glasgow Verbal</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal_validateGlasgowVerbalValue(GlasgowVerbal glasgowVerbal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowVerbal.validateGlasgowVerbalValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore(StrokeScore strokeScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(strokeScore, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validateStrokeScore_validateStrokeScoreTemplateId(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validateStrokeScore_validateStrokeScoreMoodCode(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validateStrokeScore_validateStrokeScoreCodeP(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validateStrokeScore_validateStrokeScoreCode(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validateStrokeScore_validateStrokeScoreEffectiveTime(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validateStrokeScore_validateStrokeScoreValue(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validateStrokeScore_validateStrokeScoreValueP(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validateStrokeScore_validateStrokeScoreMethodCode(strokeScore, diagnostics, context);
		if (result || diagnostics != null) result &= validateStrokeScore_validateStrokeScoreMethodCodeP(strokeScore, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateStrokeScoreTemplateId constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreTemplateId(StrokeScore strokeScore,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreMoodCode constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreMoodCode(StrokeScore strokeScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreCodeP constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreCodeP(StrokeScore strokeScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreCode constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreCode(StrokeScore strokeScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreCode(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreEffectiveTime constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreEffectiveTime(StrokeScore strokeScore,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreValue constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreValue(StrokeScore strokeScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreValue(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreValueP constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreValueP(StrokeScore strokeScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreValueP(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreMethodCode constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreMethodCode(StrokeScore strokeScore,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreMethodCodeP constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreMethodCodeP(StrokeScore strokeScore,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreMethodCodeP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore(PainScore painScore, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(painScore, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validatePainScore_validatePainScoreTemplateId(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validatePainScore_validatePainScoreMoodCode(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validatePainScore_validatePainScoreCodeP(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validatePainScore_validatePainScoreCode(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validatePainScore_validatePainScoreEffectiveTime(painScore, diagnostics, context);
		if (result || diagnostics != null) result &= validatePainScore_validatePainScoreValue(painScore, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePainScoreTemplateId constraint of '<em>Pain Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore_validatePainScoreTemplateId(PainScore painScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return painScore.validatePainScoreTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePainScoreMoodCode constraint of '<em>Pain Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore_validatePainScoreMoodCode(PainScore painScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return painScore.validatePainScoreMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePainScoreCodeP constraint of '<em>Pain Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore_validatePainScoreCodeP(PainScore painScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return painScore.validatePainScoreCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePainScoreCode constraint of '<em>Pain Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore_validatePainScoreCode(PainScore painScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return painScore.validatePainScoreCode(diagnostics, context);
	}

	/**
	 * Validates the validatePainScoreEffectiveTime constraint of '<em>Pain Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore_validatePainScoreEffectiveTime(PainScore painScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return painScore.validatePainScoreEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validatePainScoreValue constraint of '<em>Pain Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore_validatePainScoreValue(PainScore painScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return painScore.validatePainScoreValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness(LevelOfResponsiveness levelOfResponsiveness,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(levelOfResponsiveness, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessTemplateId(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessMoodCode(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessCodeP(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessCode(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessEffectiveTime(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessValue(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessValueP(levelOfResponsiveness, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateLevelOfResponsivenessTemplateId constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessTemplateId(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessMoodCode constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessMoodCode(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessCodeP constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessCodeP(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessCode constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessCode(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessCode(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessEffectiveTime constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessEffectiveTime(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessValue constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessValue(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessValue(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessValueP constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessValueP(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose(BloodGlucose bloodGlucose, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(bloodGlucose, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validateBloodGlucose_validateBloodGlucoseTemplateId(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validateBloodGlucose_validateBloodGlucoseMoodCode(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validateBloodGlucose_validateBloodGlucoseCodeP(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validateBloodGlucose_validateBloodGlucoseCode(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validateBloodGlucose_validateBloodGlucoseEffectiveTime(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) result &= validateBloodGlucose_validateBloodGlucoseValue(bloodGlucose, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateBloodGlucoseTemplateId constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseTemplateId(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBloodGlucoseMoodCode constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseMoodCode(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateBloodGlucoseCodeP constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseCodeP(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateBloodGlucoseCode constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseCode(BloodGlucose bloodGlucose, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseCode(diagnostics, context);
	}

	/**
	 * Validates the validateBloodGlucoseEffectiveTime constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseEffectiveTime(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateBloodGlucoseValue constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseValue(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide(CarbonMonoxide carbonMonoxide, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(carbonMonoxide, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonMonoxide_validateCarbonMonoxideTemplateId(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonMonoxide_validateCarbonMonoxideMoodCode(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonMonoxide_validateCarbonMonoxideCodeP(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonMonoxide_validateCarbonMonoxideCode(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonMonoxide_validateCarbonMonoxideEffectiveTime(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonMonoxide_validateCarbonMonoxideValue(carbonMonoxide, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCarbonMonoxideTemplateId constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideTemplateId(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonMonoxideMoodCode constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideMoodCode(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonMonoxideCodeP constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideCodeP(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonMonoxideCode constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideCode(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideCode(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonMonoxideEffectiveTime constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideEffectiveTime(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonMonoxideValue constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideValue(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide(CarbonDioxide carbonDioxide, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(carbonDioxide, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonDioxide_validateCarbonDioxideTemplateId(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonDioxide_validateCarbonDioxideMoodCode(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonDioxide_validateCarbonDioxideCodeP(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonDioxide_validateCarbonDioxideCode(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonDioxide_validateCarbonDioxideEffectiveTime(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) result &= validateCarbonDioxide_validateCarbonDioxideValue(carbonDioxide, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCarbonDioxideTemplateId constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideTemplateId(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonDioxideMoodCode constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideMoodCode(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonDioxideCodeP constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideCodeP(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonDioxideCode constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideCode(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideCode(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonDioxideEffectiveTime constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideEffectiveTime(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonDioxideValue constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideValue(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm(CardiacRhythm cardiacRhythm, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(cardiacRhythm, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacRhythm_validateCardiacRhythmParticipant1(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacRhythm_validateCardiacRhythmTemplateId(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacRhythm_validateCardiacRhythmMoodCode(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacRhythm_validateCardiacRhythmCodeP(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacRhythm_validateCardiacRhythmCode(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacRhythm_validateCardiacRhythmEffectiveTime(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacRhythm_validateCardiacRhythmValue(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacRhythm_validateCardiacRhythmValueP(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacRhythm_validateCardiacRhythmMethodCode(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacRhythm_validateCardiacRhythmMethodCodeP(cardiacRhythm, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCardiacRhythmParticipant1 constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmParticipant1(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmParticipant1(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmTemplateId constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmTemplateId(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmMoodCode constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmMoodCode(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmCodeP constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmCodeP(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmCode constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmCode(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmEffectiveTime constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmEffectiveTime(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmValue constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmValue(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmValue(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmValueP constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmValueP(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmValueP(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmMethodCode constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmMethodCode(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmMethodCodeP constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmMethodCodeP(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmMethodCodeP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer(GlasgowComaScoreOrganizer glasgowComaScoreOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowComaScoreOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerTemplateId(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerEffectiveTime(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerComponent4(glasgowComaScoreOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateGlasgowComaScoreOrganizerTemplateId constraint of '<em>Glasgow Coma Score Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerTemplateId(
			GlasgowComaScoreOrganizer glasgowComaScoreOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowComaScoreOrganizer.validateGlasgowComaScoreOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowComaScoreOrganizerEffectiveTime constraint of '<em>Glasgow Coma Score Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerEffectiveTime(
			GlasgowComaScoreOrganizer glasgowComaScoreOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowComaScoreOrganizer.validateGlasgowComaScoreOrganizerEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowComaScoreOrganizerComponent4 constraint of '<em>Glasgow Coma Score Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerComponent4(
			GlasgowComaScoreOrganizer glasgowComaScoreOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowComaScoreOrganizer.validateGlasgowComaScoreOrganizerComponent4(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseBeginningOdometerReading, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingTemplateId(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingMoodCode(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingCodeP(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingCode(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingValue(responseBeginningOdometerReading, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponseBeginningOdometerReadingTemplateId constraint of '<em>Response Beginning Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingTemplateId(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseBeginningOdometerReading.validateResponseBeginningOdometerReadingTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseBeginningOdometerReadingMoodCode constraint of '<em>Response Beginning Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingMoodCode(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseBeginningOdometerReading.validateResponseBeginningOdometerReadingMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseBeginningOdometerReadingCodeP constraint of '<em>Response Beginning Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingCodeP(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseBeginningOdometerReading.validateResponseBeginningOdometerReadingCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseBeginningOdometerReadingCode constraint of '<em>Response Beginning Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingCode(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseBeginningOdometerReading.validateResponseBeginningOdometerReadingCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseBeginningOdometerReadingValue constraint of '<em>Response Beginning Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingValue(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseBeginningOdometerReading.validateResponseBeginningOdometerReadingValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading(ResponseOnSceneOdometerReading responseOnSceneOdometerReading,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseOnSceneOdometerReading, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingTemplateId(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingMoodCode(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingCodeP(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingCode(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingValue(responseOnSceneOdometerReading, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponseOnSceneOdometerReadingTemplateId constraint of '<em>Response On Scene Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingTemplateId(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOnSceneOdometerReading.validateResponseOnSceneOdometerReadingTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOnSceneOdometerReadingMoodCode constraint of '<em>Response On Scene Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingMoodCode(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOnSceneOdometerReading.validateResponseOnSceneOdometerReadingMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOnSceneOdometerReadingCodeP constraint of '<em>Response On Scene Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingCodeP(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOnSceneOdometerReading.validateResponseOnSceneOdometerReadingCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOnSceneOdometerReadingCode constraint of '<em>Response On Scene Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingCode(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOnSceneOdometerReading.validateResponseOnSceneOdometerReadingCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOnSceneOdometerReadingValue constraint of '<em>Response On Scene Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingValue(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOnSceneOdometerReading.validateResponseOnSceneOdometerReadingValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseDestinationOdometerReading, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingTemplateId(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingMoodCode(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingCodeP(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingCode(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) result &= validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingValue(responseDestinationOdometerReading, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponseDestinationOdometerReadingTemplateId constraint of '<em>Response Destination Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingTemplateId(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseDestinationOdometerReading.validateResponseDestinationOdometerReadingTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDestinationOdometerReadingMoodCode constraint of '<em>Response Destination Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingMoodCode(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseDestinationOdometerReading.validateResponseDestinationOdometerReadingMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDestinationOdometerReadingCodeP constraint of '<em>Response Destination Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingCodeP(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseDestinationOdometerReading.validateResponseDestinationOdometerReadingCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDestinationOdometerReadingCode constraint of '<em>Response Destination Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingCode(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseDestinationOdometerReading.validateResponseDestinationOdometerReadingCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDestinationOdometerReadingValue constraint of '<em>Response Destination Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingValue(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseDestinationOdometerReading.validateResponseDestinationOdometerReadingValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestOutcome(CardiacArrestOutcome cardiacArrestOutcome, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(cardiacArrestOutcome, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestOutcome_validateCardiacArrestOutcomeTemplateId(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestOutcome_validateCardiacArrestOutcomeCodeP(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestOutcome_validateCardiacArrestOutcomeCode(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestOutcome_validateCardiacArrestOutcomeMoodCode(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestOutcome_validateCardiacArrestOutcomeValue(cardiacArrestOutcome, diagnostics, context);
		if (result || diagnostics != null) result &= validateCardiacArrestOutcome_validateCardiacArrestOutcomeValueP(cardiacArrestOutcome, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCardiacArrestOutcomeTemplateId constraint of '<em>Cardiac Arrest Outcome</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestOutcome_validateCardiacArrestOutcomeTemplateId(
			CardiacArrestOutcome cardiacArrestOutcome, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestOutcome.validateCardiacArrestOutcomeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestOutcomeCodeP constraint of '<em>Cardiac Arrest Outcome</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestOutcome_validateCardiacArrestOutcomeCodeP(
			CardiacArrestOutcome cardiacArrestOutcome, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestOutcome.validateCardiacArrestOutcomeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestOutcomeCode constraint of '<em>Cardiac Arrest Outcome</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestOutcome_validateCardiacArrestOutcomeCode(
			CardiacArrestOutcome cardiacArrestOutcome, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestOutcome.validateCardiacArrestOutcomeCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestOutcomeMoodCode constraint of '<em>Cardiac Arrest Outcome</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestOutcome_validateCardiacArrestOutcomeMoodCode(
			CardiacArrestOutcome cardiacArrestOutcome, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestOutcome.validateCardiacArrestOutcomeMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestOutcomeValue constraint of '<em>Cardiac Arrest Outcome</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestOutcome_validateCardiacArrestOutcomeValue(
			CardiacArrestOutcome cardiacArrestOutcome, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestOutcome.validateCardiacArrestOutcomeValue(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestOutcomeValueP constraint of '<em>Cardiac Arrest Outcome</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestOutcome_validateCardiacArrestOutcomeValueP(
			CardiacArrestOutcome cardiacArrestOutcome, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestOutcome.validateCardiacArrestOutcomeValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeQualifier(TransportModeQualifier transportModeQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(transportModeQualifier, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeQualifier_validateTransportModeQualifierTemplateId(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeQualifier_validateTransportModeQualifierClassCode(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeQualifier_validateTransportModeQualifierCodeP(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeQualifier_validateTransportModeQualifierCode(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeQualifier_validateTransportModeQualifierMoodCode(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeQualifier_validateTransportModeQualifierValue(transportModeQualifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateTransportModeQualifier_validateTransportModeQualifierValueP(transportModeQualifier, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateTransportModeQualifierTemplateId constraint of '<em>Transport Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeQualifier_validateTransportModeQualifierTemplateId(
			TransportModeQualifier transportModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeQualifier.validateTransportModeQualifierTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeQualifierClassCode constraint of '<em>Transport Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeQualifier_validateTransportModeQualifierClassCode(
			TransportModeQualifier transportModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeQualifier.validateTransportModeQualifierClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeQualifierCodeP constraint of '<em>Transport Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeQualifier_validateTransportModeQualifierCodeP(
			TransportModeQualifier transportModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeQualifier.validateTransportModeQualifierCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeQualifierCode constraint of '<em>Transport Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeQualifier_validateTransportModeQualifierCode(
			TransportModeQualifier transportModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeQualifier.validateTransportModeQualifierCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeQualifierMoodCode constraint of '<em>Transport Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeQualifier_validateTransportModeQualifierMoodCode(
			TransportModeQualifier transportModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeQualifier.validateTransportModeQualifierMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeQualifierValue constraint of '<em>Transport Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeQualifier_validateTransportModeQualifierValue(
			TransportModeQualifier transportModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeQualifier.validateTransportModeQualifierValue(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeQualifierValueP constraint of '<em>Transport Mode Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeQualifier_validateTransportModeQualifierValueP(
			TransportModeQualifier transportModeQualifier, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeQualifier.validateTransportModeQualifierValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment(SkinAssessment skinAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(skinAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateSkinAssessment_validateSkinAssessmentTemplateId(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateSkinAssessment_validateSkinAssessmentMoodCode(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateSkinAssessment_validateSkinAssessmentCodeP(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateSkinAssessment_validateSkinAssessmentCode(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateSkinAssessment_validateSkinAssessmentEffectiveTime(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateSkinAssessment_validateSkinAssessmentValue(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateSkinAssessment_validateSkinAssessmentValueP(skinAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSkinAssessmentTemplateId constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentTemplateId(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentMoodCode constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentMoodCode(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentCodeP constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentCodeP(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentCode constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentCode(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentEffectiveTime constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentEffectiveTime(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentValue constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentValue(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentValueP constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentValueP(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentValueP(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer(AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(additionalVitalSignsOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerTemplateId(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerMoodCode(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerEffectiveTime(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerComponent4(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerComponent42(additionalVitalSignsOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerTemplateId constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerTemplateId(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerMoodCode constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerMoodCode(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerEffectiveTime constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerEffectiveTime(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerComponent4 constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerComponent4(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerComponent4(diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerComponent42 constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerComponent42(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerComponent42(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLungAssessment(LungAssessment lungAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(lungAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateLungAssessment_validateLungAssessmentTemplateId(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateLungAssessment_validateLungAssessmentCodeP(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateLungAssessment_validateLungAssessmentCode(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateLungAssessment_validateLungAssessmentValue(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateLungAssessment_validateLungAssessmentValueP(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateLungAssessment_validateLungAssessmentTargetSiteCodeP(lungAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateLungAssessment_validateLungAssessmentTargetSiteCode(lungAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateLungAssessmentTemplateId constraint of '<em>Lung Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLungAssessment_validateLungAssessmentTemplateId(LungAssessment lungAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lungAssessment.validateLungAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateLungAssessmentCodeP constraint of '<em>Lung Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLungAssessment_validateLungAssessmentCodeP(LungAssessment lungAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lungAssessment.validateLungAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLungAssessmentCode constraint of '<em>Lung Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLungAssessment_validateLungAssessmentCode(LungAssessment lungAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lungAssessment.validateLungAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateLungAssessmentValue constraint of '<em>Lung Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLungAssessment_validateLungAssessmentValue(LungAssessment lungAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lungAssessment.validateLungAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateLungAssessmentValueP constraint of '<em>Lung Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLungAssessment_validateLungAssessmentValueP(LungAssessment lungAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lungAssessment.validateLungAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateLungAssessmentTargetSiteCodeP constraint of '<em>Lung Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLungAssessment_validateLungAssessmentTargetSiteCodeP(LungAssessment lungAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lungAssessment.validateLungAssessmentTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLungAssessmentTargetSiteCode constraint of '<em>Lung Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLungAssessment_validateLungAssessmentTargetSiteCode(LungAssessment lungAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lungAssessment.validateLungAssessmentTargetSiteCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAssessment(ChestAssessment chestAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(chestAssessment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateChestAssessment_validateChestAssessmentTemplateId(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateChestAssessment_validateChestAssessmentCodeP(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateChestAssessment_validateChestAssessmentCode(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateChestAssessment_validateChestAssessmentValue(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateChestAssessment_validateChestAssessmentValueP(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateChestAssessment_validateChestAssessmentTargetSiteCode(chestAssessment, diagnostics, context);
		if (result || diagnostics != null) result &= validateChestAssessment_validateChestAssessmentTargetSiteCodeP(chestAssessment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateChestAssessmentTemplateId constraint of '<em>Chest Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAssessment_validateChestAssessmentTemplateId(ChestAssessment chestAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAssessment.validateChestAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateChestAssessmentCodeP constraint of '<em>Chest Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAssessment_validateChestAssessmentCodeP(ChestAssessment chestAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAssessment.validateChestAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateChestAssessmentCode constraint of '<em>Chest Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAssessment_validateChestAssessmentCode(ChestAssessment chestAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAssessment.validateChestAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateChestAssessmentValue constraint of '<em>Chest Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAssessment_validateChestAssessmentValue(ChestAssessment chestAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAssessment.validateChestAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateChestAssessmentValueP constraint of '<em>Chest Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAssessment_validateChestAssessmentValueP(ChestAssessment chestAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAssessment.validateChestAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateChestAssessmentTargetSiteCode constraint of '<em>Chest Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAssessment_validateChestAssessmentTargetSiteCode(ChestAssessment chestAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAssessment.validateChestAssessmentTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateChestAssessmentTargetSiteCodeP constraint of '<em>Chest Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAssessment_validateChestAssessmentTargetSiteCodeP(ChestAssessment chestAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAssessment.validateChestAssessmentTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * Returns the resource locator that will be used to fetch messages for this validator's diagnostics.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ResourceLocator getResourceLocator() {
		return EmspcrPlugin.INSTANCE;
	}

} // EmspcrValidator
